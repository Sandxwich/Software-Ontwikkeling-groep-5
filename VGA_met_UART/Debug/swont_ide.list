
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007438  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007694  08007694  00022780  2**0
                  CONTENTS
  4 .ARM          00000008  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800769c  0800769c  00022780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002780  20000000  080076a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000158fc  20002780  08009e24  00022780  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001807c  08009e24  0002807c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022780  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002043c  00000000  00000000  000227b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000423f  00000000  00000000  00042bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00046e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00048088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002679b  00000000  00000000  00049138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a47e  00000000  00000000  0006f8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2f56  00000000  00000000  00089d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015cca7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  0015ccfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20002780 	.word	0x20002780
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075a8 	.word	0x080075a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20002784 	.word	0x20002784
 80001c4:	080075a8 	.word	0x080075a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <API_draw_bitmap>:
	}
	return error;
}

int API_draw_bitmap(uint16_t nr, uint16_t x_lup, uint16_t y_lup)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
 80004ca:	460b      	mov	r3, r1
 80004cc:	80bb      	strh	r3, [r7, #4]
 80004ce:	4613      	mov	r3, r2
 80004d0:	807b      	strh	r3, [r7, #2]
	int error = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
	uint16_t xp,yp,xp2,yp2 = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	823b      	strh	r3, [r7, #16]
	yp2=0;
 80004da:	2300      	movs	r3, #0
 80004dc:	823b      	strh	r3, [r7, #16]
	  for(yp = 20; yp < 120; yp++)
 80004de:	2314      	movs	r3, #20
 80004e0:	82bb      	strh	r3, [r7, #20]
 80004e2:	e021      	b.n	8000528 <API_draw_bitmap+0x68>
	  {
	    for(xp = 0, xp2 = 0; xp < 100; xp++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	82fb      	strh	r3, [r7, #22]
 80004e8:	2300      	movs	r3, #0
 80004ea:	827b      	strh	r3, [r7, #18]
 80004ec:	e013      	b.n	8000516 <API_draw_bitmap+0x56>
	    {
	      UB_VGA_SetPixel(xp, yp, bitmap[yp2][xp2]);
 80004ee:	8a3a      	ldrh	r2, [r7, #16]
 80004f0:	8a7b      	ldrh	r3, [r7, #18]
 80004f2:	4911      	ldr	r1, [pc, #68]	; (8000538 <API_draw_bitmap+0x78>)
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	fb00 f202 	mul.w	r2, r0, r2
 80004fa:	440a      	add	r2, r1
 80004fc:	4413      	add	r3, r2
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	8ab9      	ldrh	r1, [r7, #20]
 8000502:	8afb      	ldrh	r3, [r7, #22]
 8000504:	4618      	mov	r0, r3
 8000506:	f000 ff77 	bl	80013f8 <UB_VGA_SetPixel>
	      xp2++;
 800050a:	8a7b      	ldrh	r3, [r7, #18]
 800050c:	3301      	adds	r3, #1
 800050e:	827b      	strh	r3, [r7, #18]
	    for(xp = 0, xp2 = 0; xp < 100; xp++)
 8000510:	8afb      	ldrh	r3, [r7, #22]
 8000512:	3301      	adds	r3, #1
 8000514:	82fb      	strh	r3, [r7, #22]
 8000516:	8afb      	ldrh	r3, [r7, #22]
 8000518:	2b63      	cmp	r3, #99	; 0x63
 800051a:	d9e8      	bls.n	80004ee <API_draw_bitmap+0x2e>
	    }
	    yp2++;
 800051c:	8a3b      	ldrh	r3, [r7, #16]
 800051e:	3301      	adds	r3, #1
 8000520:	823b      	strh	r3, [r7, #16]
	  for(yp = 20; yp < 120; yp++)
 8000522:	8abb      	ldrh	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	82bb      	strh	r3, [r7, #20]
 8000528:	8abb      	ldrh	r3, [r7, #20]
 800052a:	2b77      	cmp	r3, #119	; 0x77
 800052c:	d9da      	bls.n	80004e4 <API_draw_bitmap+0x24>
//
//		break;
//	}
//
//	}
	return error;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000000 	.word	0x20000000

0800053c <LogicLayer_Parser>:


Message_parser LogicLayer_Parser(char*, unsigned int);

Message_parser LogicLayer_Parser(char *Message, unsigned int Messagelength)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0ee      	sub	sp, #440	; 0x1b8
 8000540:	af00      	add	r7, sp, #0
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	6018      	str	r0, [r3, #0]
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	6019      	str	r1, [r3, #0]
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 8000558:	e07e      	b.n	8000658 <LogicLayer_Parser+0x11c>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 800055a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800055e:	3301      	adds	r3, #1
 8000560:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d903      	bls.n	8000578 <LogicLayer_Parser+0x3c>
			  {
				  printf("Error , not detected \n");
 8000570:	484a      	ldr	r0, [pc, #296]	; (800069c <LogicLayer_Parser+0x160>)
 8000572:	f006 fbc1 	bl	8006cf8 <puts>
				  break;
 8000576:	e011      	b.n	800059c <LogicLayer_Parser+0x60>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b2c      	cmp	r3, #44	; 0x2c
 8000588:	d008      	beq.n	800059c <LogicLayer_Parser+0x60>
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1de      	bne.n	800055a <LogicLayer_Parser+0x1e>
			  }
		  }

	  	  for (l=0; j<i; j++)
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80005a2:	e01f      	b.n	80005e4 <LogicLayer_Parser+0xa8>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80005ae:	4413      	add	r3, r2
 80005b0:	7818      	ldrb	r0, [r3, #0]
 80005b2:	f107 0114 	add.w	r1, r7, #20
 80005b6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	18ca      	adds	r2, r1, r3
 80005c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80005c8:	4413      	add	r3, r2
 80005ca:	3301      	adds	r3, #1
 80005cc:	4602      	mov	r2, r0
 80005ce:	701a      	strb	r2, [r3, #0]
	  		l++;
 80005d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80005d4:	3301      	adds	r3, #1
 80005d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	  for (l=0; j<i; j++)
 80005da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80005de:	3301      	adds	r3, #1
 80005e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80005e4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80005e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d3d9      	bcc.n	80005a4 <LogicLayer_Parser+0x68>
	  	  }

	  	  j = i+1;
 80005f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80005f4:	3301      	adds	r3, #1
 80005f6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	  	  if (Message[j] == 0x20)	// checking for spaces between lines
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b20      	cmp	r3, #32
 800060a:	d104      	bne.n	8000616 <LogicLayer_Parser+0xda>
	  	  {
	  		  j++;
 800060c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000610:	3301      	adds	r3, #1
 8000612:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  	  }

	  	  localParser.Parser_Message[k][l] = '\0';
 8000616:	f107 0114 	add.w	r1, r7, #20
 800061a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	18ca      	adds	r2, r1, r3
 8000628:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800062c:	4413      	add	r3, r2
 800062e:	3301      	adds	r3, #1
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 8000634:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000638:	3301      	adds	r3, #1
 800063a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 800063e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000642:	3301      	adds	r3, #1
 8000644:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 8000648:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800064c:	2b14      	cmp	r3, #20
 800064e:	d903      	bls.n	8000658 <LogicLayer_Parser+0x11c>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <LogicLayer_Parser+0x164>)
 8000652:	f006 fb51 	bl	8006cf8 <puts>
	  		  	  break;
 8000656:	e008      	b.n	800066a <LogicLayer_Parser+0x12e>
	  while (Message[i] != 0) 	// Kijk voor line end
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d186      	bne.n	8000578 <LogicLayer_Parser+0x3c>
	  	  	  }

	  }

	localParser.Variable_length = k;
 800066a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800066e:	b2da      	uxtb	r2, r3
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	701a      	strb	r2, [r3, #0]

	return localParser;
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4610      	mov	r0, r2
 8000682:	4619      	mov	r1, r3
 8000684:	f240 1391 	movw	r3, #401	; 0x191
 8000688:	461a      	mov	r2, r3
 800068a:	f006 fab1 	bl	8006bf0 <memcpy>
}
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	080075c0 	.word	0x080075c0
 80006a0:	080075d8 	.word	0x080075d8

080006a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_DMA_Init+0x3c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <MX_DMA_Init+0x3c>)
 80006b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_DMA_Init+0x3c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2044      	movs	r0, #68	; 0x44
 80006cc:	f001 f82d 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006d0:	2044      	movs	r0, #68	; 0x44
 80006d2:	f001 f846 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	4b46      	ldr	r3, [pc, #280]	; (8000818 <MX_GPIO_Init+0x134>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a45      	ldr	r2, [pc, #276]	; (8000818 <MX_GPIO_Init+0x134>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <MX_GPIO_Init+0x134>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <MX_GPIO_Init+0x134>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a3e      	ldr	r2, [pc, #248]	; (8000818 <MX_GPIO_Init+0x134>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <MX_GPIO_Init+0x134>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <MX_GPIO_Init+0x134>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a37      	ldr	r2, [pc, #220]	; (8000818 <MX_GPIO_Init+0x134>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <MX_GPIO_Init+0x134>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <MX_GPIO_Init+0x134>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a30      	ldr	r2, [pc, #192]	; (8000818 <MX_GPIO_Init+0x134>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MX_GPIO_Init+0x134>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_GPIO_Init+0x134>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a29      	ldr	r2, [pc, #164]	; (8000818 <MX_GPIO_Init+0x134>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_GPIO_Init+0x134>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_GPIO_Init+0x134>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a22      	ldr	r2, [pc, #136]	; (8000818 <MX_GPIO_Init+0x134>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_GPIO_Init+0x134>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80007a8:	481c      	ldr	r0, [pc, #112]	; (800081c <MX_GPIO_Init+0x138>)
 80007aa:	f001 fdab 	bl	8002304 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	481a      	ldr	r0, [pc, #104]	; (8000820 <MX_GPIO_Init+0x13c>)
 80007b6:	f001 fda5 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <MX_GPIO_Init+0x140>)
 80007ce:	f001 fbe5 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80007d2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007d6:	61fb      	str	r3, [r7, #28]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_GPIO_Init+0x138>)
 80007ec:	f001 fbd6 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_GPIO_Init+0x13c>)
 800080a:	f001 fbc7 	bl	8001f9c <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3730      	adds	r7, #48	; 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40021000 	.word	0x40021000
 8000820:	40020400 	.word	0x40020400
 8000824:	40020000 	.word	0x40020000

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0e9      	sub	sp, #420	; 0x1a4
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fe0b 	bl	8001448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f883 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff ff55 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800083a:	f7ff ff33 	bl	80006a4 <MX_DMA_Init>
  MX_TIM1_Init();
 800083e:	f000 fb59 	bl	8000ef4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000842:	f000 fba7 	bl	8000f94 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000846:	f000 fcbd 	bl	80011c4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800084a:	f005 ffbb 	bl	80067c4 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 800084e:	f000 f8f9 	bl	8000a44 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000852:	f000 fd5b 	bl	800130c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_RED);
 8000856:	20e0      	movs	r0, #224	; 0xe0
 8000858:	f000 fdaa 	bl	80013b0 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 800085c:	220a      	movs	r2, #10
 800085e:	210a      	movs	r1, #10
 8000860:	200a      	movs	r0, #10
 8000862:	f000 fdc9 	bl	80013f8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fdc4 	bl	80013f8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	f240 103f 	movw	r0, #319	; 0x13f
 8000878:	f000 fdbe 	bl	80013f8 <UB_VGA_SetPixel>

  API_draw_bitmap(0,0,0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fe1d 	bl	80004c0 <API_draw_bitmap>

  unsigned int i = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c


  for(i = 0; i < LINE_BUFLEN; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000892:	e00b      	b.n	80008ac <main+0x84>
	  input.line_rx_buffer[i] = 0;
 8000894:	4a24      	ldr	r2, [pc, #144]	; (8000928 <main+0x100>)
 8000896:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800089a:	4413      	add	r3, r2
 800089c:	3301      	adds	r3, #1
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 80008a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80008a6:	3301      	adds	r3, #1
 80008a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80008ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80008b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008b4:	d3ee      	bcc.n	8000894 <main+0x6c>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <main+0x100>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <main+0x100>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  input.command_execute_flag = FALSE;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <main+0x100>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, &input.byte_buffer_rx, LINE_BUFLEN);
 80008cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d0:	4915      	ldr	r1, [pc, #84]	; (8000928 <main+0x100>)
 80008d2:	4816      	ldr	r0, [pc, #88]	; (800092c <main+0x104>)
 80008d4:	f004 fb51 	bl	8004f7a <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 80008d8:	23ff      	movs	r3, #255	; 0xff
 80008da:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <main+0x100>)
 80008e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d1fa      	bne.n	80008de <main+0xb6>
	  {
		  i = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

		  Debugging = LogicLayer_Parser(&input.line_rx_buffer, LINE_BUFLEN);
 80008ee:	4c10      	ldr	r4, [pc, #64]	; (8000930 <main+0x108>)
 80008f0:	463b      	mov	r3, r7
 80008f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f6:	490f      	ldr	r1, [pc, #60]	; (8000934 <main+0x10c>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe1f 	bl	800053c <LogicLayer_Parser>
 80008fe:	463b      	mov	r3, r7
 8000900:	4620      	mov	r0, r4
 8000902:	4619      	mov	r1, r3
 8000904:	f240 1391 	movw	r3, #401	; 0x191
 8000908:	461a      	mov	r2, r3
 800090a:	f006 f971 	bl	8006bf0 <memcpy>


		  // Do some stuff
		  printf("yes\n");
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <main+0x110>)
 8000910:	f006 f9f2 	bl	8006cf8 <puts>
		  UB_VGA_FillScreen(colorTest);
 8000914:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fd49 	bl	80013b0 <UB_VGA_FillScreen>


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 800091e:	4b02      	ldr	r3, [pc, #8]	; (8000928 <main+0x100>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	  if(input.command_execute_flag == TRUE)
 8000926:	e7da      	b.n	80008de <main+0xb6>
 8000928:	200027b4 	.word	0x200027b4
 800092c:	200032bc 	.word	0x200032bc
 8000930:	20002fb4 	.word	0x20002fb4
 8000934:	200027b5 	.word	0x200027b5
 8000938:	080075f8 	.word	0x080075f8

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	2230      	movs	r2, #48	; 0x30
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f006 f95e 	bl	8006c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <SystemClock_Config+0xcc>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <SystemClock_Config+0xcc>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <SystemClock_Config+0xd0>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <SystemClock_Config+0xd0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009b0:	23a8      	movs	r3, #168	; 0xa8
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b8:	2307      	movs	r3, #7
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fcb9 	bl	8002338 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009cc:	f000 f832 	bl	8000a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2302      	movs	r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2105      	movs	r1, #5
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 ff1a 	bl	8002828 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009fa:	f000 f81b 	bl	8000a34 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3750      	adds	r7, #80	; 0x50
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000a18:	1d39      	adds	r1, r7, #4
 8000a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <__io_putchar+0x20>)
 8000a22:	f004 fa18 	bl	8004e56 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000a26:	687b      	ldr	r3, [r7, #4]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200032bc 	.word	0x200032bc

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SDIO_SD_Init+0x38>)
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <MX_SDIO_SD_Init+0x3c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_SDIO_SD_Init+0x38>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SDIO_SD_Init+0x38>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_SDIO_SD_Init+0x38>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SDIO_SD_Init+0x38>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <MX_SDIO_SD_Init+0x38>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <MX_SDIO_SD_Init+0x38>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20003148 	.word	0x20003148
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <HAL_SD_MspInit+0xc0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d14a      	bne.n	8000b3c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_SD_MspInit+0xc4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000afa:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <HAL_SD_MspInit+0xc8>)
 8000b18:	f001 fa40 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4806      	ldr	r0, [pc, #24]	; (8000b50 <HAL_SD_MspInit+0xcc>)
 8000b38:	f001 fa30 	bl	8001f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40012c00 	.word	0x40012c00
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 fc78 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c04:	4828      	ldr	r0, [pc, #160]	; (8000ca8 <TIM2_IRQHandler+0xa8>)
 8000c06:	f003 fa75 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <TIM2_IRQHandler+0xa8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f06f 0208 	mvn.w	r2, #8
 8000c12:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c1e:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000c28:	d905      	bls.n	8000c36 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000c30:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <TIM2_IRQHandler+0xb0>)
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c34:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d802      	bhi.n	8000c44 <TIM2_IRQHandler+0x44>
 8000c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c42:	e001      	b.n	8000c48 <TIM2_IRQHandler+0x48>
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <TIM2_IRQHandler+0xb4>)
 8000c4a:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	2b23      	cmp	r3, #35	; 0x23
 8000c52:	d927      	bls.n	8000ca4 <TIM2_IRQHandler+0xa4>
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	f240 2202 	movw	r2, #514	; 0x202
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d821      	bhi.n	8000ca4 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000c60:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <TIM2_IRQHandler+0xb8>)
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <TIM2_IRQHandler+0xb8>)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <TIM2_IRQHandler+0xbc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <TIM2_IRQHandler+0xbc>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <TIM2_IRQHandler+0xc0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <TIM2_IRQHandler+0xc0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000ca0:	4a02      	ldr	r2, [pc, #8]	; (8000cac <TIM2_IRQHandler+0xac>)
 8000ca2:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20003274 	.word	0x20003274
 8000cac:	20003300 	.word	0x20003300
 8000cb0:	2000330c 	.word	0x2000330c
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40026488 	.word	0x40026488
 8000cbc:	40010000 	.word	0x40010000
 8000cc0:	20003214 	.word	0x20003214

08000cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <USART2_IRQHandler+0x70>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d026      	beq.n	8000d24 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b0d      	cmp	r3, #13
 8000cda:	d002      	beq.n	8000ce2 <USART2_IRQHandler+0x1e>
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b2e      	cmp	r3, #46	; 0x2e
 8000ce0:	d10e      	bne.n	8000d00 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000ce4:	22ff      	movs	r2, #255	; 0xff
 8000ce6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000cec:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8000cf0:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000cf2:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
			// Reset the counter for the next line
			input.char_counter = 0;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 8000cfe:	e011      	b.n	8000d24 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000d0a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000d10:	4413      	add	r3, r2
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000d18:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <USART2_IRQHandler+0x74>)
 8000d20:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <USART2_IRQHandler+0x78>)
 8000d26:	f004 f959 	bl	8004fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40004400 	.word	0x40004400
 8000d38:	200027b4 	.word	0x200027b4
 8000d3c:	200032bc 	.word	0x200032bc

08000d40 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <DMA2_Stream5_IRQHandler+0x48>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6a1a      	ldr	r2, [r3, #32]
 8000d4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10f      	bne.n	8000d74 <DMA2_Stream5_IRQHandler+0x34>
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <DMA2_Stream5_IRQHandler+0x48>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6a1a      	ldr	r2, [r3, #32]
 8000d5a:	f240 4344 	movw	r3, #1092	; 0x444
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d107      	bne.n	8000d74 <DMA2_Stream5_IRQHandler+0x34>
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <DMA2_Stream5_IRQHandler+0x48>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <DMA2_Stream5_IRQHandler+0x48>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0201 	bic.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <DMA2_Stream5_IRQHandler+0x4c>)
 8000d76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000d7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <DMA2_Stream5_IRQHandler+0x50>)
 8000d7e:	f000 fea3 	bl	8001ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200031cc 	.word	0x200031cc
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	20003214 	.word	0x20003214

08000d94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00a      	b.n	8000dbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da6:	f3af 8000 	nop.w
 8000daa:	4601      	mov	r1, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf0      	blt.n	8000da6 <_read+0x12>
	}

return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e009      	b.n	8000df4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe11 	bl	8000a10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf1      	blt.n	8000de0 <_write+0x12>
	}
	return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_isatty>:

int _isatty(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x50>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x16>
		heap_end = &end;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <_sbrk+0x50>)
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <_sbrk+0x54>)
 8000e84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <_sbrk+0x50>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <_sbrk+0x50>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	466a      	mov	r2, sp
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d907      	bls.n	8000eaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e9a:	f005 fe7f 	bl	8006b9c <__errno>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea8:	e006      	b.n	8000eb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <_sbrk+0x50>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <_sbrk+0x50>)
 8000eb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000279c 	.word	0x2000279c
 8000ec4:	20018080 	.word	0x20018080

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <SystemInit+0x28>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <SystemInit+0x28>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SystemInit+0x28>)
 8000ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ee2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <MX_TIM1_Init+0x9c>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f24:	220b      	movs	r2, #11
 8000f26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f3a:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f3c:	f002 fdf4 	bl	8003b28 <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000f46:	f7ff fd75 	bl	8000a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f58:	f003 fa96 	bl	8004488 <HAL_TIM_ConfigClockSource>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000f62:	f7ff fd67 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <MX_TIM1_Init+0x98>)
 8000f74:	f003 fe92 	bl	8004c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000f7e:	f7ff fd59 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200031cc 	.word	0x200031cc
 8000f90:	40010000 	.word	0x40010000

08000f94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <MX_TIM2_Init+0xcc>)
 8000fb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_TIM2_Init+0xcc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_TIM2_Init+0xcc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <MX_TIM2_Init+0xcc>)
 8000fcc:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000fd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <MX_TIM2_Init+0xcc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_TIM2_Init+0xcc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fde:	4820      	ldr	r0, [pc, #128]	; (8001060 <MX_TIM2_Init+0xcc>)
 8000fe0:	f002 fe5a 	bl	8003c98 <HAL_TIM_PWM_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000fea:	f7ff fd23 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4818      	ldr	r0, [pc, #96]	; (8001060 <MX_TIM2_Init+0xcc>)
 8000ffe:	f003 fe4d 	bl	8004c9c <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001008:	f7ff fd14 	bl	8000a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100c:	2360      	movs	r3, #96	; 0x60
 800100e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001010:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001016:	2302      	movs	r3, #2
 8001018:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2208      	movs	r2, #8
 8001022:	4619      	mov	r1, r3
 8001024:	480e      	ldr	r0, [pc, #56]	; (8001060 <MX_TIM2_Init+0xcc>)
 8001026:	f003 f96d 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001030:	f7ff fd00 	bl	8000a34 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001034:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001038:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	220c      	movs	r2, #12
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_TIM2_Init+0xcc>)
 8001042:	f003 f95f 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800104c:	f7ff fcf2 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <MX_TIM2_Init+0xcc>)
 8001052:	f000 f87f 	bl	8001154 <HAL_TIM_MspPostInit>

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20003274 	.word	0x20003274

08001064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <HAL_TIM_Base_MspInit+0x94>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d13c      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_TIM_Base_MspInit+0x98>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_TIM_Base_MspInit+0x98>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_TIM_Base_MspInit+0x98>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 8001094:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_TIM_Base_MspInit+0xa0>)
 8001096:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 800109a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800109e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010a2:	2240      	movs	r2, #64	; 0x40
 80010a4:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b2:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010cc:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010d6:	f000 fb5f 	bl	8001798 <HAL_DMA_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80010e0:	f7ff fca8 	bl	8000a34 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010e8:	621a      	str	r2, [r3, #32]
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <HAL_TIM_Base_MspInit+0x9c>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40010000 	.word	0x40010000
 80010fc:	40023800 	.word	0x40023800
 8001100:	20003214 	.word	0x20003214
 8001104:	40026488 	.word	0x40026488

08001108 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001118:	d115      	bne.n	8001146 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_TIM_PWM_MspInit+0x48>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <HAL_TIM_PWM_MspInit+0x48>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_TIM_PWM_MspInit+0x48>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	201c      	movs	r0, #28
 800113c:	f000 faf5 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001140:	201c      	movs	r0, #28
 8001142:	f000 fb0e 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001174:	d11e      	bne.n	80011b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_TIM_MspPostInit+0x68>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_TIM_MspPostInit+0x68>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_TIM_MspPostInit+0x68>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001196:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <HAL_TIM_MspPostInit+0x6c>)
 80011b0:	f000 fef4 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MX_USART2_UART_Init+0x50>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011fc:	f003 fdde 	bl	8004dbc <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001206:	f7ff fc15 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200032bc 	.word	0x200032bc
 8001214:	40004400 	.word	0x40004400

08001218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_UART_MspInit+0x94>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d133      	bne.n	80012a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <HAL_UART_MspInit+0x98>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_UART_MspInit+0x98>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_UART_MspInit+0x98>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x98>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_UART_MspInit+0x98>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_UART_MspInit+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001272:	230c      	movs	r3, #12
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001282:	2307      	movs	r3, #7
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_UART_MspInit+0x9c>)
 800128e:	f000 fe85 	bl	8001f9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2026      	movs	r0, #38	; 0x26
 8001298:	f000 fa47 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800129c:	2026      	movs	r0, #38	; 0x26
 800129e:	f000 fa60 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40004400 	.word	0x40004400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012be:	e003      	b.n	80012c8 <LoopCopyDataInit>

080012c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012c6:	3104      	adds	r1, #4

080012c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012d0:	d3f6      	bcc.n	80012c0 <CopyDataInit>
  ldr  r2, =_sbss
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012d4:	e002      	b.n	80012dc <LoopFillZerobss>

080012d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012d8:	f842 3b04 	str.w	r3, [r2], #4

080012dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012e0:	d3f9      	bcc.n	80012d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012e2:	f7ff fdf1 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f005 fc5f 	bl	8006ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fa9d 	bl	8000828 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012f4:	080076a4 	.word	0x080076a4
  ldr  r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012fc:	20002780 	.word	0x20002780
  ldr  r2, =_sbss
 8001300:	20002780 	.word	0x20002780
  ldr  r3, = _ebss
 8001304:	2001807c 	.word	0x2001807c

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>
	...

0800130c <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <UB_VGA_Screen_Init+0x84>)
 8001312:	2200      	movs	r2, #0
 8001314:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <UB_VGA_Screen_Init+0x84>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <UB_VGA_Screen_Init+0x84>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <UB_VGA_Screen_Init+0x88>)
 8001324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001328:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800132a:	481b      	ldr	r0, [pc, #108]	; (8001398 <UB_VGA_Screen_Init+0x8c>)
 800132c:	f002 fc4c 	bl	8003bc8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001330:	210c      	movs	r1, #12
 8001332:	4819      	ldr	r0, [pc, #100]	; (8001398 <UB_VGA_Screen_Init+0x8c>)
 8001334:	f002 fd00 	bl	8003d38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001338:	2108      	movs	r1, #8
 800133a:	4817      	ldr	r0, [pc, #92]	; (8001398 <UB_VGA_Screen_Init+0x8c>)
 800133c:	f002 fdc4 	bl	8003ec8 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <UB_VGA_Screen_Init+0x90>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <UB_VGA_Screen_Init+0x90>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800134e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <UB_VGA_Screen_Init+0x90>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <UB_VGA_Screen_Init+0x90>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001360:	490f      	ldr	r1, [pc, #60]	; (80013a0 <UB_VGA_Screen_Init+0x94>)
 8001362:	f240 1341 	movw	r3, #321	; 0x141
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <UB_VGA_Screen_Init+0x98>)
 8001368:	480f      	ldr	r0, [pc, #60]	; (80013a8 <UB_VGA_Screen_Init+0x9c>)
 800136a:	f000 fac3 	bl	80018f4 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <UB_VGA_Screen_Init+0x9c>)
 8001370:	f000 fa12 	bl	8001798 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <UB_VGA_Screen_Init+0x9c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <UB_VGA_Screen_Init+0x9c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0210 	orr.w	r2, r2, #16
 8001382:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <UB_VGA_Screen_Init+0xa0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a01      	ldr	r2, [pc, #4]	; (8001390 <UB_VGA_Screen_Init+0x84>)
 800138a:	6093      	str	r3, [r2, #8]
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20003300 	.word	0x20003300
 8001394:	40020400 	.word	0x40020400
 8001398:	20003274 	.word	0x20003274
 800139c:	200031cc 	.word	0x200031cc
 80013a0:	2000330c 	.word	0x2000330c
 80013a4:	40021015 	.word	0x40021015
 80013a8:	20003214 	.word	0x20003214
 80013ac:	40026488 	.word	0x40026488

080013b0 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	81bb      	strh	r3, [r7, #12]
 80013be:	e012      	b.n	80013e6 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	81fb      	strh	r3, [r7, #14]
 80013c4:	e008      	b.n	80013d8 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	89b9      	ldrh	r1, [r7, #12]
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f813 	bl	80013f8 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	3301      	adds	r3, #1
 80013d6:	81fb      	strh	r3, [r7, #14]
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013de:	d3f2      	bcc.n	80013c6 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80013e0:	89bb      	ldrh	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	81bb      	strh	r3, [r7, #12]
 80013e6:	89bb      	ldrh	r3, [r7, #12]
 80013e8:	2bef      	cmp	r3, #239	; 0xef
 80013ea:	d9e9      	bls.n	80013c0 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	460b      	mov	r3, r1
 8001404:	80bb      	strh	r3, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001410:	d301      	bcc.n	8001416 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001416:	88bb      	ldrh	r3, [r7, #4]
 8001418:	2bef      	cmp	r3, #239	; 0xef
 800141a:	d901      	bls.n	8001420 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001420:	88ba      	ldrh	r2, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	019b      	lsls	r3, r3, #6
 800142a:	441a      	add	r2, r3
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4413      	add	r3, r2
 8001430:	4904      	ldr	r1, [pc, #16]	; (8001444 <UB_VGA_SetPixel+0x4c>)
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	54ca      	strb	r2, [r1, r3]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000330c 	.word	0x2000330c

08001448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_Init+0x40>)
 8001452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_Init+0x40>)
 800145e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x40>)
 800146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f94f 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001476:	2000      	movs	r0, #0
 8001478:	f000 f808 	bl	800148c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147c:	f7ff fb6a 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023c00 	.word	0x40023c00

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x54>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x58>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f967 	bl	800177e <HAL_SYSTICK_Config>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00e      	b.n	80014d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d80a      	bhi.n	80014d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c8:	f000 f92f 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_InitTick+0x5c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20002710 	.word	0x20002710
 80014e4:	20002718 	.word	0x20002718
 80014e8:	20002714 	.word	0x20002714

080014ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x20>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x24>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_IncTick+0x24>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20002718 	.word	0x20002718
 8001510:	20015ffc 	.word	0x20015ffc

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20015ffc 	.word	0x20015ffc

0800152c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001534:	f7ff ffee 	bl	8001514 <HAL_GetTick>
 8001538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001544:	d005      	beq.n	8001552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_Delay+0x44>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001552:	bf00      	nop
 8001554:	f7ff ffde 	bl	8001514 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d8f7      	bhi.n	8001554 <HAL_Delay+0x28>
  {
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20002718 	.word	0x20002718

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <__NVIC_EnableIRQ+0x38>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e100 	.word	0xe000e100

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f4:	f7ff ff8e 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff29 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff3e 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff8e 	bl	8001668 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5d 	bl	8001614 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff31 	bl	80015d8 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff feb6 	bl	8001514 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e099      	b.n	80018e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d4:	e00f      	b.n	80017f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d6:	f7ff fe9d 	bl	8001514 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d908      	bls.n	80017f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2220      	movs	r2, #32
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e078      	b.n	80018e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e8      	bne.n	80017d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_DMA_Init+0x158>)
 8001810:	4013      	ands	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	2b04      	cmp	r3, #4
 800184e:	d107      	bne.n	8001860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4313      	orrs	r3, r2
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f023 0307 	bic.w	r3, r3, #7
 8001876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	4313      	orrs	r3, r2
 8001880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	2b04      	cmp	r3, #4
 8001888:	d117      	bne.n	80018ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4313      	orrs	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00e      	beq.n	80018ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fb01 	bl	8001ea4 <DMA_CheckFifoParam>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2240      	movs	r2, #64	; 0x40
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018b6:	2301      	movs	r3, #1
 80018b8:	e016      	b.n	80018e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fab8 	bl	8001e38 <DMA_CalcBaseAndBitshift>
 80018c8:	4603      	mov	r3, r0
 80018ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	223f      	movs	r2, #63	; 0x3f
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	f010803f 	.word	0xf010803f

080018f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_DMA_Start_IT+0x26>
 8001916:	2302      	movs	r3, #2
 8001918:	e040      	b.n	800199c <HAL_DMA_Start_IT+0xa8>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d12f      	bne.n	800198e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2202      	movs	r2, #2
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fa4a 	bl	8001ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	223f      	movs	r2, #63	; 0x3f
 800194e:	409a      	lsls	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0216 	orr.w	r2, r2, #22
 8001962:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0208 	orr.w	r2, r2, #8
 800197a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e005      	b.n	800199a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800199a:	7dfb      	ldrb	r3, [r7, #23]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019b2:	f7ff fdaf 	bl	8001514 <HAL_GetTick>
 80019b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d008      	beq.n	80019d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e052      	b.n	8001a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0216 	bic.w	r2, r2, #22
 80019e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d103      	bne.n	8001a06 <HAL_DMA_Abort+0x62>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0208 	bic.w	r2, r2, #8
 8001a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a26:	e013      	b.n	8001a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a28:	f7ff fd74 	bl	8001514 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d90c      	bls.n	8001a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e015      	b.n	8001a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1e4      	bne.n	8001a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	223f      	movs	r2, #63	; 0x3f
 8001a64:	409a      	lsls	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d004      	beq.n	8001aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00c      	b.n	8001abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ad4:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <HAL_DMA_IRQHandler+0x258>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a92      	ldr	r2, [pc, #584]	; (8001d24 <HAL_DMA_IRQHandler+0x25c>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0a9b      	lsrs	r3, r3, #10
 8001ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	2208      	movs	r2, #8
 8001af4:	409a      	lsls	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01a      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0204 	bic.w	r2, r2, #4
 8001b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	2208      	movs	r2, #8
 8001b22:	409a      	lsls	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2201      	movs	r2, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	2201      	movs	r2, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b62:	f043 0202 	orr.w	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2204      	movs	r2, #4
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d012      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	f043 0204 	orr.w	r2, r3, #4
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d043      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03c      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d018      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d108      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d024      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4798      	blx	r3
 8001bf6:	e01f      	b.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
 8001c08:	e016      	b.n	8001c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d107      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0208 	bic.w	r2, r2, #8
 8001c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 808e 	beq.w	8001d66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8086 	beq.w	8001d66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	2220      	movs	r2, #32
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d136      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0216 	bic.w	r2, r2, #22
 8001c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_DMA_IRQHandler+0x1da>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0208 	bic.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	223f      	movs	r2, #63	; 0x3f
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d07d      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
        }
        return;
 8001cde:	e078      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01c      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d108      	bne.n	8001d0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d030      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e02b      	b.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d027      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
 8001d1e:	e022      	b.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
 8001d20:	20002710 	.word	0x20002710
 8001d24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0210 	bic.w	r2, r2, #16
 8001d44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d032      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d022      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2205      	movs	r2, #5
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3301      	adds	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d307      	bcc.n	8001dae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f2      	bne.n	8001d92 <HAL_DMA_IRQHandler+0x2ca>
 8001dac:	e000      	b.n	8001db0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
 8001dd0:	e000      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dd2:	bf00      	nop
    }
  }
}
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop

08001ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b40      	cmp	r3, #64	; 0x40
 8001e08:	d108      	bne.n	8001e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e1a:	e007      	b.n	8001e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3b10      	subs	r3, #16
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <DMA_CalcBaseAndBitshift+0x64>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d909      	bls.n	8001e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e6e:	f023 0303 	bic.w	r3, r3, #3
 8001e72:	1d1a      	adds	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58
 8001e78:	e007      	b.n	8001e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ea0:	08007614 	.word	0x08007614

08001ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11f      	bne.n	8001efe <DMA_CheckFifoParam+0x5a>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d856      	bhi.n	8001f72 <DMA_CheckFifoParam+0xce>
 8001ec4:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <DMA_CheckFifoParam+0x28>)
 8001ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eca:	bf00      	nop
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	08001eef 	.word	0x08001eef
 8001ed4:	08001edd 	.word	0x08001edd
 8001ed8:	08001f73 	.word	0x08001f73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d046      	beq.n	8001f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eec:	e043      	b.n	8001f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ef6:	d140      	bne.n	8001f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efc:	e03d      	b.n	8001f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f06:	d121      	bne.n	8001f4c <DMA_CheckFifoParam+0xa8>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d837      	bhi.n	8001f7e <DMA_CheckFifoParam+0xda>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <DMA_CheckFifoParam+0x70>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f2b 	.word	0x08001f2b
 8001f1c:	08001f25 	.word	0x08001f25
 8001f20:	08001f3d 	.word	0x08001f3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
      break;
 8001f28:	e030      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d025      	beq.n	8001f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3a:	e022      	b.n	8001f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f44:	d11f      	bne.n	8001f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f4a:	e01c      	b.n	8001f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d903      	bls.n	8001f5a <DMA_CheckFifoParam+0xb6>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d003      	beq.n	8001f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f58:	e018      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5e:	e015      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00e      	beq.n	8001f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f70:	e00b      	b.n	8001f8a <DMA_CheckFifoParam+0xe6>
      break;
 8001f72:	bf00      	nop
 8001f74:	e00a      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f76:	bf00      	nop
 8001f78:	e008      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e006      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7e:	bf00      	nop
 8001f80:	e004      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f82:	bf00      	nop
 8001f84:	e002      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f86:	bf00      	nop
 8001f88:	e000      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e16b      	b.n	8002290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 815a 	bne.w	800228a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80b4 	beq.w	800228a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b60      	ldr	r3, [pc, #384]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x314>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_GPIO_Init+0x318>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x222>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x31c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x21e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x320>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x21a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x216>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_GPIO_Init+0x328>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x212>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_GPIO_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x20a>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00e      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021a6:	2308      	movs	r3, #8
 80021a8:	e00c      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00a      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	4935      	ldr	r1, [pc, #212]	; (80022ac <HAL_GPIO_Init+0x310>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_GPIO_Init+0x334>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f ae90 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e264      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e23f      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff f890 	bl	8001514 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff f88c 	bl	8001514 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e204      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff f87c 	bl	8001514 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff f878 	bl	8001514 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1f0      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1c4      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7ff f831 	bl	8001514 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7ff f82d 	bl	8001514 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1a5      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff f810 	bl	8001514 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7ff f80c 	bl	8001514 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e184      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fff0 	bl	8001514 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe ffec 	bl	8001514 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e164      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe ffd9 	bl	8001514 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe ffd5 	bl	8001514 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e14d      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe ff9b 	bl	8001514 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe ff8e 	bl	8001514 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e106      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCC_OscConfig+0x4e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a7a      	ldr	r2, [pc, #488]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b78      	ldr	r3, [pc, #480]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a77      	ldr	r2, [pc, #476]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b75      	ldr	r3, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a74      	ldr	r2, [pc, #464]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b72      	ldr	r3, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a71      	ldr	r2, [pc, #452]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe ff53 	bl	8001514 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe ff4f 	bl	8001514 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0c5      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe ff3d 	bl	8001514 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe ff39 	bl	8001514 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0af      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 809b 	beq.w	8002812 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d05c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d141      	bne.n	8002774 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe ff0d 	bl	8001514 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe ff09 	bl	8001514 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e081      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002710:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	019b      	lsls	r3, r3, #6
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	3b01      	subs	r3, #1
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fee2 	bl	8001514 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fede 	bl	8001514 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e056      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x41c>
 8002772:	e04e      	b.n	8002812 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fecb 	bl	8001514 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002782:	f7fe fec7 	bl	8001514 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03f      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x44a>
 80027a0:	e037      	b.n	8002812 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e032      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d028      	beq.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d121      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d11a      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d111      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d107      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40007000 	.word	0x40007000
 8002820:	40023800 	.word	0x40023800
 8002824:	42470060 	.word	0x42470060

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe fdfc 	bl	8001514 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe fdf8 	bl	8001514 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fd5c 	bl	800148c <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	080075fc 	.word	0x080075fc
 80029ec:	20002710 	.word	0x20002710
 80029f0:	20002714 	.word	0x20002714

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	2300      	movs	r3, #0
 8002a06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0c:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80bd 	bhi.w	8002b98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e0b7      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b61      	ldr	r3, [pc, #388]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a2a:	60bb      	str	r3, [r7, #8]
       break;
 8002a2c:	e0b7      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a30:	60bb      	str	r3, [r7, #8]
      break;
 8002a32:	e0b4      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04d      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b58      	ldr	r3, [pc, #352]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	461a      	mov	r2, r3
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	ea02 0800 	and.w	r8, r2, r0
 8002a62:	ea03 0901 	and.w	r9, r3, r1
 8002a66:	4640      	mov	r0, r8
 8002a68:	4649      	mov	r1, r9
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	014b      	lsls	r3, r1, #5
 8002a74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a78:	0142      	lsls	r2, r0, #5
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	ebb0 0008 	subs.w	r0, r0, r8
 8002a82:	eb61 0109 	sbc.w	r1, r1, r9
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	018b      	lsls	r3, r1, #6
 8002a90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a94:	0182      	lsls	r2, r0, #6
 8002a96:	1a12      	subs	r2, r2, r0
 8002a98:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9c:	f04f 0000 	mov.w	r0, #0
 8002aa0:	f04f 0100 	mov.w	r1, #0
 8002aa4:	00d9      	lsls	r1, r3, #3
 8002aa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aaa:	00d0      	lsls	r0, r2, #3
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	eb12 0208 	adds.w	r2, r2, r8
 8002ab4:	eb43 0309 	adc.w	r3, r3, r9
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	0259      	lsls	r1, r3, #9
 8002ac2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ac6:	0250      	lsls	r0, r2, #9
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f7fd fb76 	bl	80001c8 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e04a      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	461a      	mov	r2, r3
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	ea02 0400 	and.w	r4, r2, r0
 8002afe:	ea03 0501 	and.w	r5, r3, r1
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	014b      	lsls	r3, r1, #5
 8002b10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b14:	0142      	lsls	r2, r0, #5
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	1b00      	subs	r0, r0, r4
 8002b1c:	eb61 0105 	sbc.w	r1, r1, r5
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	018b      	lsls	r3, r1, #6
 8002b2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b2e:	0182      	lsls	r2, r0, #6
 8002b30:	1a12      	subs	r2, r2, r0
 8002b32:	eb63 0301 	sbc.w	r3, r3, r1
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	00d9      	lsls	r1, r3, #3
 8002b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b44:	00d0      	lsls	r0, r2, #3
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	1912      	adds	r2, r2, r4
 8002b4c:	eb45 0303 	adc.w	r3, r5, r3
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	0299      	lsls	r1, r3, #10
 8002b5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b5e:	0290      	lsls	r0, r2, #10
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f7fd fb2a 	bl	80001c8 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	3301      	adds	r3, #1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	60bb      	str	r3, [r7, #8]
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b9a:	60bb      	str	r3, [r7, #8]
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	007a1200 	.word	0x007a1200

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20002710 	.word	0x20002710

08002bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bd4:	f7ff fff0 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0a9b      	lsrs	r3, r3, #10
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	0800760c 	.word	0x0800760c

08002bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bfc:	f7ff ffdc 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	0b5b      	lsrs	r3, r3, #13
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	; (8002c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	0800760c 	.word	0x0800760c

08002c20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e022      	b.n	8002c78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fd ff1d 	bl	8000a84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f814 	bl	8002c80 <HAL_SD_InitCard>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00a      	b.n	8002c78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af04      	add	r7, sp, #16
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002c9c:	2376      	movs	r3, #118	; 0x76
 8002c9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681d      	ldr	r5, [r3, #0]
 8002ca4:	466c      	mov	r4, sp
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f003 f851 	bl	8005d60 <SDIO_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04c      	b.n	8002d6a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_SD_InitCard+0xf4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 f889 	bl	8005df2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_SD_InitCard+0xf4>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fe68 	bl	80039bc <SD_PowerON>
 8002cec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e02e      	b.n	8002d6a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fd89 	bl	8003824 <SD_InitCard>
 8002d12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e01b      	b.n	8002d6a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 f8ec 	bl	8005f18 <SDMMC_CmdBlockLength>
 8002d40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00f      	beq.n	8002d68 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_SD_InitCard+0xf8>)
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdb0      	pop	{r4, r5, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	422580a0 	.word	0x422580a0
 8002d78:	004005ff 	.word	0x004005ff

08002d7c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b092      	sub	sp, #72	; 0x48
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d8a:	f7fe fbc3 	bl	8001514 <HAL_GetTick>
 8002d8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d107      	bne.n	8002dae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e1bd      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	f040 81b0 	bne.w	800311c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d907      	bls.n	8002de0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e1a4      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2203      	movs	r2, #3
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2200      	movs	r2, #0
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d002      	beq.n	8002dfe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	025b      	lsls	r3, r3, #9
 8002dfc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e02:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	025b      	lsls	r3, r3, #9
 8002e08:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002e0a:	2390      	movs	r3, #144	; 0x90
 8002e0c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f107 0214 	add.w	r2, r7, #20
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 f84b 	bl	8005ec0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d90a      	bls.n	8002e46 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2202      	movs	r2, #2
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 f8af 	bl	8005fa0 <SDMMC_CmdReadMultiBlock>
 8002e42:	6478      	str	r0, [r7, #68]	; 0x44
 8002e44:	e009      	b.n	8002e5a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 f882 	bl	8005f5c <SDMMC_CmdReadSingleBlock>
 8002e58:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d012      	beq.n	8002e86 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_SD_ReadBlocks+0x2d4>)
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e151      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002e8a:	e061      	b.n	8002f50 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d03c      	beq.n	8002f14 <HAL_SD_ReadBlocks+0x198>
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d039      	beq.n	8002f14 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ea4:	e033      	b.n	8002f0e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 ff83 	bl	8005db6 <SDIO_ReadFIFO>
 8002eb0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	0c1b      	lsrs	r3, r3, #16
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	3301      	adds	r3, #1
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	0e1b      	lsrs	r3, r3, #24
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	3301      	adds	r3, #1
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f04:	3b01      	subs	r3, #1
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f10:	2b07      	cmp	r3, #7
 8002f12:	d9c8      	bls.n	8002ea6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002f14:	f7fe fafe 	bl	8001514 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d902      	bls.n	8002f2a <HAL_SD_ReadBlocks+0x1ae>
 8002f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d112      	bne.n	8002f50 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a48      	ldr	r2, [pc, #288]	; (8003050 <HAL_SD_ReadBlocks+0x2d4>)
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0ec      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f56:	f240 332a 	movw	r3, #810	; 0x32a
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d095      	beq.n	8002e8c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d022      	beq.n	8002fb4 <HAL_SD_ReadBlocks+0x238>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d91f      	bls.n	8002fb4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f003 f873 	bl	800606c <SDMMC_CmdStopTransfer>
 8002f86:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a2f      	ldr	r2, [pc, #188]	; (8003050 <HAL_SD_ReadBlocks+0x2d4>)
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0ba      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d012      	beq.n	8002fe8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_SD_ReadBlocks+0x2d4>)
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	f043 0208 	orr.w	r2, r3, #8
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0a0      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d012      	beq.n	800301c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <HAL_SD_ReadBlocks+0x2d4>)
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e086      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_SD_ReadBlocks+0x2d4>)
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e06c      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
 8003050:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f002 feac 	bl	8005db6 <SDIO_ReadFIFO>
 800305e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	b2da      	uxtb	r2, r3
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	3301      	adds	r3, #1
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	3b01      	subs	r3, #1
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	b2da      	uxtb	r2, r3
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003080:	3301      	adds	r3, #1
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003086:	3b01      	subs	r3, #1
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	b2da      	uxtb	r2, r3
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	3301      	adds	r3, #1
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309c:	3b01      	subs	r3, #1
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	0e1b      	lsrs	r3, r3, #24
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	3301      	adds	r3, #1
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b2:	3b01      	subs	r3, #1
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80030b6:	f7fe fa2d 	bl	8001514 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d902      	bls.n	80030cc <HAL_SD_ReadBlocks+0x350>
 80030c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d112      	bne.n	80030f2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_SD_ReadBlocks+0x3b8>)
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e01b      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_SD_ReadBlocks+0x38a>
 8003100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1a6      	bne.n	8003054 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f240 523a 	movw	r2, #1338	; 0x53a
 800310e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e006      	b.n	800312a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3748      	adds	r7, #72	; 0x48
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	004005ff 	.word	0x004005ff

08003138 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b092      	sub	sp, #72	; 0x48
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003146:	f7fe f9e5 	bl	8001514 <HAL_GetTick>
 800314a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e166      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	f040 8159 	bne.w	800342a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800317e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	441a      	add	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	429a      	cmp	r2, r3
 800318a:	d907      	bls.n	800319c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e14d      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2203      	movs	r2, #3
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2200      	movs	r2, #0
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d002      	beq.n	80031ba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031be:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	025b      	lsls	r3, r3, #9
 80031c4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80031c6:	2390      	movs	r3, #144	; 0x90
 80031c8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80031d2:	2301      	movs	r3, #1
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f107 0218 	add.w	r2, r7, #24
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f002 fe6d 	bl	8005ec0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d90a      	bls.n	8003202 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f8:	4618      	mov	r0, r3
 80031fa:	f002 ff15 	bl	8006028 <SDMMC_CmdWriteMultiBlock>
 80031fe:	6478      	str	r0, [r7, #68]	; 0x44
 8003200:	e009      	b.n	8003216 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2210      	movs	r2, #16
 8003206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fee8 	bl	8005fe4 <SDMMC_CmdWriteSingleBlock>
 8003214:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a87      	ldr	r2, [pc, #540]	; (8003440 <HAL_SD_WriteBlocks+0x308>)
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0fa      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003246:	e065      	b.n	8003314 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d040      	beq.n	80032d8 <HAL_SD_WriteBlocks+0x1a0>
 8003256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d03d      	beq.n	80032d8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800325c:	2300      	movs	r3, #0
 800325e:	643b      	str	r3, [r7, #64]	; 0x40
 8003260:	e037      	b.n	80032d2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	3301      	adds	r3, #1
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800326e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003270:	3b01      	subs	r3, #1
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	3301      	adds	r3, #1
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003288:	3b01      	subs	r3, #1
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	3301      	adds	r3, #1
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a0:	3b01      	subs	r3, #1
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80032a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	061a      	lsls	r2, r3, #24
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b2:	3301      	adds	r3, #1
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b8:	3b01      	subs	r3, #1
 80032ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f107 0214 	add.w	r2, r7, #20
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fd82 	bl	8005dd0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	3301      	adds	r3, #1
 80032d0:	643b      	str	r3, [r7, #64]	; 0x40
 80032d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d4:	2b07      	cmp	r3, #7
 80032d6:	d9c4      	bls.n	8003262 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80032d8:	f7fe f91c 	bl	8001514 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d902      	bls.n	80032ee <HAL_SD_WriteBlocks+0x1b6>
 80032e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d112      	bne.n	8003314 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a53      	ldr	r2, [pc, #332]	; (8003440 <HAL_SD_WriteBlocks+0x308>)
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e091      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331a:	f240 331a 	movw	r3, #794	; 0x31a
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d091      	beq.n	8003248 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d022      	beq.n	8003378 <HAL_SD_WriteBlocks+0x240>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d91f      	bls.n	8003378 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	2b03      	cmp	r3, #3
 800333e:	d01b      	beq.n	8003378 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f002 fe91 	bl	800606c <SDMMC_CmdStopTransfer>
 800334a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <HAL_SD_WriteBlocks+0x308>)
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e05f      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d012      	beq.n	80033ac <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2d      	ldr	r2, [pc, #180]	; (8003440 <HAL_SD_WriteBlocks+0x308>)
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	f043 0208 	orr.w	r2, r3, #8
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e045      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a20      	ldr	r2, [pc, #128]	; (8003440 <HAL_SD_WriteBlocks+0x308>)
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e02b      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a13      	ldr	r2, [pc, #76]	; (8003440 <HAL_SD_WriteBlocks+0x308>)
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	f043 0210 	orr.w	r2, r3, #16
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e011      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f240 523a 	movw	r2, #1338	; 0x53a
 800341c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e006      	b.n	8003438 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
  }
}
 8003438:	4618      	mov	r0, r3
 800343a:	3748      	adds	r7, #72	; 0x48
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	004005ff 	.word	0x004005ff

08003444 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003452:	0f9b      	lsrs	r3, r3, #30
 8003454:	b2da      	uxtb	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	b2da      	uxtb	r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003470:	0e1b      	lsrs	r3, r3, #24
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	b2da      	uxtb	r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	b2da      	uxtb	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	b2da      	uxtb	r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349a:	b2da      	uxtb	r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a4:	0d1b      	lsrs	r3, r3, #20
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c2:	0bdb      	lsrs	r3, r3, #15
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d4:	0b9b      	lsrs	r3, r3, #14
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e6:	0b5b      	lsrs	r3, r3, #13
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f8:	0b1b      	lsrs	r3, r3, #12
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	2b00      	cmp	r3, #0
 8003512:	d163      	bne.n	80035dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003518:	009a      	lsls	r2, r3, #2
 800351a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800351e:	4013      	ands	r3, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003524:	0f92      	lsrs	r2, r2, #30
 8003526:	431a      	orrs	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003530:	0edb      	lsrs	r3, r3, #27
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	b2da      	uxtb	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003542:	0e1b      	lsrs	r3, r3, #24
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	b2da      	uxtb	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003554:	0d5b      	lsrs	r3, r3, #21
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	b2da      	uxtb	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003566:	0c9b      	lsrs	r3, r3, #18
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	b2da      	uxtb	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003578:	0bdb      	lsrs	r3, r3, #15
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	b2da      	uxtb	r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	7e1b      	ldrb	r3, [r3, #24]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	3302      	adds	r3, #2
 800359c:	2201      	movs	r2, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035a6:	fb02 f203 	mul.w	r2, r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	7a1b      	ldrb	r3, [r3, #8]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	2201      	movs	r2, #1
 80035ba:	409a      	lsls	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80035c8:	0a52      	lsrs	r2, r2, #9
 80035ca:	fb02 f203 	mul.w	r2, r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d8:	661a      	str	r2, [r3, #96]	; 0x60
 80035da:	e031      	b.n	8003640 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d11d      	bne.n	8003620 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	431a      	orrs	r2, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	3301      	adds	r3, #1
 8003600:	029a      	lsls	r2, r3, #10
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003614:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	661a      	str	r2, [r3, #96]	; 0x60
 800361e:	e00f      	b.n	8003640 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_SD_GetCardCSD+0x344>)
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e09d      	b.n	800377c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003644:	0b9b      	lsrs	r3, r3, #14
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	b2da      	uxtb	r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003656:	09db      	lsrs	r3, r3, #7
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800365e:	b2da      	uxtb	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	0fdb      	lsrs	r3, r3, #31
 800367a:	b2da      	uxtb	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	0f5b      	lsrs	r3, r3, #29
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	b2da      	uxtb	r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	0d9b      	lsrs	r3, r3, #22
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	0d5b      	lsrs	r3, r3, #21
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	0bdb      	lsrs	r3, r3, #15
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	0b9b      	lsrs	r3, r3, #14
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	b2da      	uxtb	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	0b5b      	lsrs	r3, r3, #13
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	b2da      	uxtb	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	0b1b      	lsrs	r3, r3, #12
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	0a9b      	lsrs	r3, r3, #10
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	b2da      	uxtb	r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	b2da      	uxtb	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376a:	b2da      	uxtb	r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	004005ff 	.word	0x004005ff

0800378c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80037f0:	f107 030c 	add.w	r3, r7, #12
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f96e 	bl	8003ad8 <SD_SendStatus>
 80037fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	0a5b      	lsrs	r3, r3, #9
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800381a:	693b      	ldr	r3, [r7, #16]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003824:	b5b0      	push	{r4, r5, r7, lr}
 8003826:	b094      	sub	sp, #80	; 0x50
 8003828:	af04      	add	r7, sp, #16
 800382a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800382c:	2301      	movs	r3, #1
 800382e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f002 faeb 	bl	8005e10 <SDIO_GetPowerState>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003840:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003844:	e0b6      	b.n	80039b4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	2b03      	cmp	r3, #3
 800384c:	d02f      	beq.n	80038ae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f002 fcd1 	bl	80061fa <SDMMC_CmdSendCID>
 8003858:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SD_InitCard+0x40>
    {
      return errorstate;
 8003860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003862:	e0a7      	b.n	80039b4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f002 fb15 	bl	8005e9a <SDIO_GetResponse>
 8003870:	4602      	mov	r2, r0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2104      	movs	r1, #4
 800387c:	4618      	mov	r0, r3
 800387e:	f002 fb0c 	bl	8005e9a <SDIO_GetResponse>
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2108      	movs	r1, #8
 800388e:	4618      	mov	r0, r3
 8003890:	f002 fb03 	bl	8005e9a <SDIO_GetResponse>
 8003894:	4602      	mov	r2, r0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	210c      	movs	r1, #12
 80038a0:	4618      	mov	r0, r3
 80038a2:	f002 fafa 	bl	8005e9a <SDIO_GetResponse>
 80038a6:	4602      	mov	r2, r0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d00d      	beq.n	80038d2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f107 020e 	add.w	r2, r7, #14
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 fcd7 	bl	8006274 <SDMMC_CmdSetRelAdd>
 80038c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <SD_InitCard+0xae>
    {
      return errorstate;
 80038ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d0:	e070      	b.n	80039b4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d036      	beq.n	8003948 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80038da:	89fb      	ldrh	r3, [r7, #14]
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f002 fca1 	bl	8006236 <SDMMC_CmdSendCSD>
 80038f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <SD_InitCard+0xdc>
    {
      return errorstate;
 80038fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fe:	e059      	b.n	80039b4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f002 fac7 	bl	8005e9a <SDIO_GetResponse>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2104      	movs	r1, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f002 fabe 	bl	8005e9a <SDIO_GetResponse>
 800391e:	4602      	mov	r2, r0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2108      	movs	r1, #8
 800392a:	4618      	mov	r0, r3
 800392c:	f002 fab5 	bl	8005e9a <SDIO_GetResponse>
 8003930:	4602      	mov	r2, r0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	210c      	movs	r1, #12
 800393c:	4618      	mov	r0, r3
 800393e:	f002 faac 	bl	8005e9a <SDIO_GetResponse>
 8003942:	4602      	mov	r2, r0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2104      	movs	r1, #4
 800394e:	4618      	mov	r0, r3
 8003950:	f002 faa3 	bl	8005e9a <SDIO_GetResponse>
 8003954:	4603      	mov	r3, r0
 8003956:	0d1a      	lsrs	r2, r3, #20
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff fd6e 	bl	8003444 <HAL_SD_GetCardCSD>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800396e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003972:	e01f      	b.n	80039b4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6819      	ldr	r1, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	4608      	mov	r0, r1
 8003986:	f002 fb93 	bl	80060b0 <SDMMC_CmdSelDesel>
 800398a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <SD_InitCard+0x172>
  {
    return errorstate;
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	e00e      	b.n	80039b4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681d      	ldr	r5, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	466c      	mov	r4, sp
 800399e:	f103 0210 	add.w	r2, r3, #16
 80039a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80039a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039a8:	3304      	adds	r3, #4
 80039aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ac:	4628      	mov	r0, r5
 80039ae:	f002 f9d7 	bl	8005d60 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3740      	adds	r7, #64	; 0x40
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bdb0      	pop	{r4, r5, r7, pc}

080039bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f002 fb8e 	bl	80060f6 <SDMMC_CmdGoIdleState>
 80039da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	e072      	b.n	8003acc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f002 fba1 	bl	8006132 <SDMMC_CmdOperCond>
 80039f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f002 fb77 	bl	80060f6 <SDMMC_CmdGoIdleState>
 8003a08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	e05b      	b.n	8003acc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d137      	bne.n	8003a92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f002 fba1 	bl	8006170 <SDMMC_CmdAppCommand>
 8003a2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02d      	beq.n	8003a92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a3a:	e047      	b.n	8003acc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 fb94 	bl	8006170 <SDMMC_CmdAppCommand>
 8003a48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <SD_PowerON+0x98>
    {
      return errorstate;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	e03b      	b.n	8003acc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	491e      	ldr	r1, [pc, #120]	; (8003ad4 <SD_PowerON+0x118>)
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 fbaa 	bl	80061b4 <SDMMC_CmdAppOperCommand>
 8003a60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a6c:	e02e      	b.n	8003acc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f002 fa10 	bl	8005e9a <SDIO_GetResponse>
 8003a7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	0fdb      	lsrs	r3, r3, #31
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <SD_PowerON+0xcc>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <SD_PowerON+0xce>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]

    count++;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d802      	bhi.n	8003aa2 <SD_PowerON+0xe6>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0cc      	beq.n	8003a3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d902      	bls.n	8003ab2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ab0:	e00c      	b.n	8003acc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ac2:	e002      	b.n	8003aca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	c1100000 	.word	0xc1100000

08003ad8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ae8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aec:	e018      	b.n	8003b20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f002 fbdb 	bl	80062b6 <SDMMC_CmdSendStatus>
 8003b00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	e009      	b.n	8003b20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f002 f9c1 	bl	8005e9a <SDIO_GetResponse>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e041      	b.n	8003bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd fa88 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 fd88 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e046      	b.n	8003c6e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a23      	ldr	r2, [pc, #140]	; (8003c7c <HAL_TIM_Base_Start+0xb4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d022      	beq.n	8003c38 <HAL_TIM_Base_Start+0x70>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfa:	d01d      	beq.n	8003c38 <HAL_TIM_Base_Start+0x70>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <HAL_TIM_Base_Start+0xb8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d018      	beq.n	8003c38 <HAL_TIM_Base_Start+0x70>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_TIM_Base_Start+0xbc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d013      	beq.n	8003c38 <HAL_TIM_Base_Start+0x70>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_TIM_Base_Start+0xc0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00e      	beq.n	8003c38 <HAL_TIM_Base_Start+0x70>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_TIM_Base_Start+0xc4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_TIM_Base_Start+0x70>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <HAL_TIM_Base_Start+0xc8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_TIM_Base_Start+0x70>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_TIM_Base_Start+0xcc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d111      	bne.n	8003c5c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d010      	beq.n	8003c6c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5a:	e007      	b.n	8003c6c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40010400 	.word	0x40010400
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40001800 	.word	0x40001800

08003c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e041      	b.n	8003d2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fa22 	bl	8001108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f000 fcd0 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d109      	bne.n	8003d5c <HAL_TIM_PWM_Start+0x24>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e022      	b.n	8003da2 <HAL_TIM_PWM_Start+0x6a>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d109      	bne.n	8003d76 <HAL_TIM_PWM_Start+0x3e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	bf14      	ite	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	2300      	moveq	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	e015      	b.n	8003da2 <HAL_TIM_PWM_Start+0x6a>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d109      	bne.n	8003d90 <HAL_TIM_PWM_Start+0x58>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e008      	b.n	8003da2 <HAL_TIM_PWM_Start+0x6a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07c      	b.n	8003ea4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_PWM_Start+0x82>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db8:	e013      	b.n	8003de2 <HAL_TIM_PWM_Start+0xaa>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_PWM_Start+0x92>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc8:	e00b      	b.n	8003de2 <HAL_TIM_PWM_Start+0xaa>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start+0xa2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd8:	e003      	b.n	8003de2 <HAL_TIM_PWM_Start+0xaa>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2201      	movs	r2, #1
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 ff30 	bl	8004c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <HAL_TIM_PWM_Start+0x174>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_TIM_PWM_Start+0xcc>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <HAL_TIM_PWM_Start+0x178>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_TIM_PWM_Start+0xd0>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_TIM_PWM_Start+0xd2>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_TIM_PWM_Start+0x174>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x136>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e30:	d01d      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x136>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <HAL_TIM_PWM_Start+0x17c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d018      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x136>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <HAL_TIM_PWM_Start+0x180>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x136>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_TIM_PWM_Start+0x184>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x136>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <HAL_TIM_PWM_Start+0x178>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x136>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_TIM_PWM_Start+0x188>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x136>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_TIM_PWM_Start+0x18c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d111      	bne.n	8003e92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b06      	cmp	r3, #6
 8003e7e:	d010      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	e007      	b.n	8003ea2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40010400 	.word	0x40010400
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40000c00 	.word	0x40000c00
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40001800 	.word	0x40001800

08003ec8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_TIM_PWM_Start_IT+0x28>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e022      	b.n	8003f36 <HAL_TIM_PWM_Start_IT+0x6e>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d109      	bne.n	8003f0a <HAL_TIM_PWM_Start_IT+0x42>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	e015      	b.n	8003f36 <HAL_TIM_PWM_Start_IT+0x6e>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d109      	bne.n	8003f24 <HAL_TIM_PWM_Start_IT+0x5c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e008      	b.n	8003f36 <HAL_TIM_PWM_Start_IT+0x6e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0c7      	b.n	80040ce <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <HAL_TIM_PWM_Start_IT+0x86>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f4c:	e013      	b.n	8003f76 <HAL_TIM_PWM_Start_IT+0xae>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_PWM_Start_IT+0x96>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f5c:	e00b      	b.n	8003f76 <HAL_TIM_PWM_Start_IT+0xae>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_PWM_Start_IT+0xa6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f6c:	e003      	b.n	8003f76 <HAL_TIM_PWM_Start_IT+0xae>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	d841      	bhi.n	8004000 <HAL_TIM_PWM_Start_IT+0x138>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08004001 	.word	0x08004001
 8003f8c:	08004001 	.word	0x08004001
 8003f90:	08004001 	.word	0x08004001
 8003f94:	08003fcb 	.word	0x08003fcb
 8003f98:	08004001 	.word	0x08004001
 8003f9c:	08004001 	.word	0x08004001
 8003fa0:	08004001 	.word	0x08004001
 8003fa4:	08003fdd 	.word	0x08003fdd
 8003fa8:	08004001 	.word	0x08004001
 8003fac:	08004001 	.word	0x08004001
 8003fb0:	08004001 	.word	0x08004001
 8003fb4:	08003fef 	.word	0x08003fef
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0202 	orr.w	r2, r2, #2
 8003fc6:	60da      	str	r2, [r3, #12]
      break;
 8003fc8:	e01d      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0204 	orr.w	r2, r2, #4
 8003fd8:	60da      	str	r2, [r3, #12]
      break;
 8003fda:	e014      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	60da      	str	r2, [r3, #12]
      break;
 8003fec:	e00b      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0210 	orr.w	r2, r2, #16
 8003ffc:	60da      	str	r2, [r3, #12]
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      break;
 8004004:	bf00      	nop
  }

  if (status == HAL_OK)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d15f      	bne.n	80040cc <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fe1b 	bl	8004c50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2e      	ldr	r2, [pc, #184]	; (80040d8 <HAL_TIM_PWM_Start_IT+0x210>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIM_PWM_Start_IT+0x166>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <HAL_TIM_PWM_Start_IT+0x214>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_TIM_PWM_Start_IT+0x16a>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_TIM_PWM_Start_IT+0x16c>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004046:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <HAL_TIM_PWM_Start_IT+0x210>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d022      	beq.n	8004098 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405a:	d01d      	beq.n	8004098 <HAL_TIM_PWM_Start_IT+0x1d0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <HAL_TIM_PWM_Start_IT+0x218>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d018      	beq.n	8004098 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_TIM_PWM_Start_IT+0x220>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_TIM_PWM_Start_IT+0x1d0>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_TIM_PWM_Start_IT+0x214>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_TIM_PWM_Start_IT+0x224>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_TIM_PWM_Start_IT+0x1d0>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <HAL_TIM_PWM_Start_IT+0x228>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d111      	bne.n	80040bc <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d010      	beq.n	80040cc <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	e007      	b.n	80040cc <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40001800 	.word	0x40001800

080040f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0202 	mvn.w	r2, #2
 8004120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa81 	bl	800463e <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa73 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa84 	bl	8004652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0204 	mvn.w	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa57 	bl	800463e <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa49 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fa5a 	bl	8004652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0208 	mvn.w	r2, #8
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2204      	movs	r2, #4
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa2d 	bl	800463e <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa1f 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa30 	bl	8004652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2208      	movs	r2, #8
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa03 	bl	800463e <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9f5 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fa06 	bl	8004652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0201 	mvn.w	r2, #1
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9cf 	bl	8004616 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d10e      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d107      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fd82 	bl	8004da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d10e      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d107      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9cb 	bl	8004666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d10e      	bne.n	80042fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d107      	bne.n	80042fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0220 	mvn.w	r2, #32
 80042f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fd4c 	bl	8004d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800431e:	2302      	movs	r3, #2
 8004320:	e0ae      	b.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b0c      	cmp	r3, #12
 800432e:	f200 809f 	bhi.w	8004470 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	0800436d 	.word	0x0800436d
 800433c:	08004471 	.word	0x08004471
 8004340:	08004471 	.word	0x08004471
 8004344:	08004471 	.word	0x08004471
 8004348:	080043ad 	.word	0x080043ad
 800434c:	08004471 	.word	0x08004471
 8004350:	08004471 	.word	0x08004471
 8004354:	08004471 	.word	0x08004471
 8004358:	080043ef 	.word	0x080043ef
 800435c:	08004471 	.word	0x08004471
 8004360:	08004471 	.word	0x08004471
 8004364:	08004471 	.word	0x08004471
 8004368:	0800442f 	.word	0x0800442f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fa22 	bl	80047bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0208 	orr.w	r2, r2, #8
 8004386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
      break;
 80043aa:	e064      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fa72 	bl	800489c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6999      	ldr	r1, [r3, #24]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	619a      	str	r2, [r3, #24]
      break;
 80043ec:	e043      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fac7 	bl	8004988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0208 	orr.w	r2, r2, #8
 8004408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0204 	bic.w	r2, r2, #4
 8004418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69d9      	ldr	r1, [r3, #28]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	61da      	str	r2, [r3, #28]
      break;
 800442c:	e023      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fb1b 	bl	8004a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69d9      	ldr	r1, [r3, #28]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	61da      	str	r2, [r3, #28]
      break;
 800446e:	e002      	b.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75fb      	strb	r3, [r7, #23]
      break;
 8004474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800447e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0b4      	b.n	800460e <HAL_TIM_ConfigClockSource+0x186>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044dc:	d03e      	beq.n	800455c <HAL_TIM_ConfigClockSource+0xd4>
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e2:	f200 8087 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	f000 8086 	beq.w	80045fa <HAL_TIM_ConfigClockSource+0x172>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	d87f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b70      	cmp	r3, #112	; 0x70
 80044f6:	d01a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0xa6>
 80044f8:	2b70      	cmp	r3, #112	; 0x70
 80044fa:	d87b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b60      	cmp	r3, #96	; 0x60
 80044fe:	d050      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004500:	2b60      	cmp	r3, #96	; 0x60
 8004502:	d877      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b50      	cmp	r3, #80	; 0x50
 8004506:	d03c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0xfa>
 8004508:	2b50      	cmp	r3, #80	; 0x50
 800450a:	d873      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d058      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d86f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d064      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004518:	2b30      	cmp	r3, #48	; 0x30
 800451a:	d86b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d060      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d867      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05c      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004528:	2b10      	cmp	r3, #16
 800452a:	d05a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15a>
 800452c:	e062      	b.n	80045f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6899      	ldr	r1, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f000 fb67 	bl	8004c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]
      break;
 800455a:	e04f      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6899      	ldr	r1, [r3, #8]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f000 fb50 	bl	8004c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800457e:	609a      	str	r2, [r3, #8]
      break;
 8004580:	e03c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	461a      	mov	r2, r3
 8004590:	f000 fac4 	bl	8004b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2150      	movs	r1, #80	; 0x50
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fb1d 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80045a0:	e02c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 fae3 	bl	8004b7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2160      	movs	r1, #96	; 0x60
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fb0d 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80045c0:	e01c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 faa4 	bl	8004b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fafd 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80045e0:	e00c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 faf4 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80045f2:	e003      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      break;
 80045f8:	e000      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a40      	ldr	r2, [pc, #256]	; (8004790 <TIM_Base_SetConfig+0x114>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469a:	d00f      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3d      	ldr	r2, [pc, #244]	; (8004794 <TIM_Base_SetConfig+0x118>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00b      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <TIM_Base_SetConfig+0x11c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3b      	ldr	r2, [pc, #236]	; (800479c <TIM_Base_SetConfig+0x120>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3a      	ldr	r2, [pc, #232]	; (80047a0 <TIM_Base_SetConfig+0x124>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d108      	bne.n	80046ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a2f      	ldr	r2, [pc, #188]	; (8004790 <TIM_Base_SetConfig+0x114>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d027      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <TIM_Base_SetConfig+0x118>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d023      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2b      	ldr	r2, [pc, #172]	; (8004798 <TIM_Base_SetConfig+0x11c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01f      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2a      	ldr	r2, [pc, #168]	; (800479c <TIM_Base_SetConfig+0x120>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a29      	ldr	r2, [pc, #164]	; (80047a0 <TIM_Base_SetConfig+0x124>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d017      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <TIM_Base_SetConfig+0x128>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <TIM_Base_SetConfig+0x12c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a26      	ldr	r2, [pc, #152]	; (80047ac <TIM_Base_SetConfig+0x130>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a25      	ldr	r2, [pc, #148]	; (80047b0 <TIM_Base_SetConfig+0x134>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a24      	ldr	r2, [pc, #144]	; (80047b4 <TIM_Base_SetConfig+0x138>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <TIM_Base_SetConfig+0x13c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <TIM_Base_SetConfig+0x114>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0xf8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <TIM_Base_SetConfig+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d103      	bne.n	800477c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	615a      	str	r2, [r3, #20]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800
 80047b0:	40001800 	.word	0x40001800
 80047b4:	40001c00 	.word	0x40001c00
 80047b8:	40002000 	.word	0x40002000

080047bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f023 0302 	bic.w	r3, r3, #2
 8004804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a20      	ldr	r2, [pc, #128]	; (8004894 <TIM_OC1_SetConfig+0xd8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_OC1_SetConfig+0x64>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a1f      	ldr	r2, [pc, #124]	; (8004898 <TIM_OC1_SetConfig+0xdc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10c      	bne.n	800483a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0308 	bic.w	r3, r3, #8
 8004826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a15      	ldr	r2, [pc, #84]	; (8004894 <TIM_OC1_SetConfig+0xd8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_OC1_SetConfig+0x8e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a14      	ldr	r2, [pc, #80]	; (8004898 <TIM_OC1_SetConfig+0xdc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d111      	bne.n	800486e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	621a      	str	r2, [r3, #32]
}
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40010000 	.word	0x40010000
 8004898:	40010400 	.word	0x40010400

0800489c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0210 	bic.w	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0320 	bic.w	r3, r3, #32
 80048e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a22      	ldr	r2, [pc, #136]	; (8004980 <TIM_OC2_SetConfig+0xe4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_OC2_SetConfig+0x68>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a21      	ldr	r2, [pc, #132]	; (8004984 <TIM_OC2_SetConfig+0xe8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10d      	bne.n	8004920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800490a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a17      	ldr	r2, [pc, #92]	; (8004980 <TIM_OC2_SetConfig+0xe4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC2_SetConfig+0x94>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <TIM_OC2_SetConfig+0xe8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d113      	bne.n	8004958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	40010400 	.word	0x40010400

08004988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a21      	ldr	r2, [pc, #132]	; (8004a68 <TIM_OC3_SetConfig+0xe0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_OC3_SetConfig+0x66>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a20      	ldr	r2, [pc, #128]	; (8004a6c <TIM_OC3_SetConfig+0xe4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d10d      	bne.n	8004a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <TIM_OC3_SetConfig+0xe0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC3_SetConfig+0x92>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <TIM_OC3_SetConfig+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d113      	bne.n	8004a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40010400 	.word	0x40010400

08004a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	031b      	lsls	r3, r3, #12
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <TIM_OC4_SetConfig+0xa4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC4_SetConfig+0x68>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <TIM_OC4_SetConfig+0xa8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d109      	bne.n	8004aec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400

08004b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 030a 	bic.w	r3, r3, #10
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b087      	sub	sp, #28
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	031b      	lsls	r3, r3, #12
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f043 0307 	orr.w	r3, r3, #7
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	609a      	str	r2, [r3, #8]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2201      	movs	r2, #1
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a1a      	ldr	r2, [r3, #32]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1a      	ldr	r2, [r3, #32]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	fa01 f303 	lsl.w	r3, r1, r3
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e05a      	b.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d01d      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10c      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	40010400 	.word	0x40010400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40001800 	.word	0x40001800

08004d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e03f      	b.n	8004e4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc fa18 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fde5 	bl	80059d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b08a      	sub	sp, #40	; 0x28
 8004e5a:	af02      	add	r7, sp, #8
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d17c      	bne.n	8004f70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_UART_Transmit+0x2c>
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e075      	b.n	8004f72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_UART_Transmit+0x3e>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e06e      	b.n	8004f72 <HAL_UART_Transmit+0x11c>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2221      	movs	r2, #33	; 0x21
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eaa:	f7fc fb33 	bl	8001514 <HAL_GetTick>
 8004eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	88fa      	ldrh	r2, [r7, #6]
 8004eb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	88fa      	ldrh	r2, [r7, #6]
 8004eba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec4:	d108      	bne.n	8004ed8 <HAL_UART_Transmit+0x82>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d104      	bne.n	8004ed8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	e003      	b.n	8004ee0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ee8:	e02a      	b.n	8004f40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2180      	movs	r1, #128	; 0x80
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fb29 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e036      	b.n	8004f72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e007      	b.n	8004f32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1cf      	bne.n	8004eea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2200      	movs	r2, #0
 8004f52:	2140      	movs	r1, #64	; 0x40
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 faf9 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e000      	b.n	8004f72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	4613      	mov	r3, r2
 8004f86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d11d      	bne.n	8004fd0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_UART_Receive_IT+0x26>
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e016      	b.n	8004fd2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Receive_IT+0x38>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e00f      	b.n	8004fd2 <HAL_UART_Receive_IT+0x58>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fb2e 	bl	8005628 <UART_Start_Receive_IT>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	e000      	b.n	8004fd2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b0ba      	sub	sp, #232	; 0xe8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005002:	2300      	movs	r3, #0
 8005004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800501a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_UART_IRQHandler+0x66>
 800502e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fc0d 	bl	800585a <UART_Receive_IT>
      return;
 8005040:	e256      	b.n	80054f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80de 	beq.w	8005208 <HAL_UART_IRQHandler+0x22c>
 800504c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80d1 	beq.w	8005208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <HAL_UART_IRQHandler+0xae>
 8005072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f043 0201 	orr.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xd2>
 8005096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f043 0202 	orr.w	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_UART_IRQHandler+0xf6>
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f043 0204 	orr.w	r2, r3, #4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d011      	beq.n	8005102 <HAL_UART_IRQHandler+0x126>
 80050de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0208 	orr.w	r2, r3, #8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 81ed 	beq.w	80054e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800510c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_UART_IRQHandler+0x14e>
 8005118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fb98 	bl	800585a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d103      	bne.n	8005156 <HAL_UART_IRQHandler+0x17a>
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d04f      	beq.n	80051f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 faa0 	bl	800569c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d141      	bne.n	80051ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3314      	adds	r3, #20
 8005170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3314      	adds	r3, #20
 8005192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005196:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800519a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1d9      	bne.n	800516a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d013      	beq.n	80051e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	4a7d      	ldr	r2, [pc, #500]	; (80053b8 <HAL_UART_IRQHandler+0x3dc>)
 80051c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fc fc5a 	bl	8001a84 <HAL_DMA_Abort_IT>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e0:	4610      	mov	r0, r2
 80051e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	e00e      	b.n	8005204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f99a 	bl	8005520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ec:	e00a      	b.n	8005204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f996 	bl	8005520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	e006      	b.n	8005204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f992 	bl	8005520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005202:	e170      	b.n	80054e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005204:	bf00      	nop
    return;
 8005206:	e16e      	b.n	80054e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	2b01      	cmp	r3, #1
 800520e:	f040 814a 	bne.w	80054a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8143 	beq.w	80054a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 813c 	beq.w	80054a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800522e:	2300      	movs	r3, #0
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	f040 80b4 	bne.w	80053bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8140 	beq.w	80054ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800526e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005272:	429a      	cmp	r2, r3
 8005274:	f080 8139 	bcs.w	80054ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800527e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528a:	f000 8088 	beq.w	800539e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1d9      	bne.n	800528e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3314      	adds	r3, #20
 80052fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005302:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005306:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e1      	bne.n	80052da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3314      	adds	r3, #20
 8005336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800533a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800533c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005340:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e3      	bne.n	8005316 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800536c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536e:	f023 0310 	bic.w	r3, r3, #16
 8005372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005380:	65ba      	str	r2, [r7, #88]	; 0x58
 8005382:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005386:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800538e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e3      	bne.n	800535c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	4618      	mov	r0, r3
 800539a:	f7fc fb03 	bl	80019a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8c0 	bl	8005534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053b4:	e099      	b.n	80054ea <HAL_UART_IRQHandler+0x50e>
 80053b6:	bf00      	nop
 80053b8:	08005763 	.word	0x08005763
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 808b 	beq.w	80054ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8086 	beq.w	80054ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005406:	647a      	str	r2, [r7, #68]	; 0x44
 8005408:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800540c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e3      	bne.n	80053e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3314      	adds	r3, #20
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	623b      	str	r3, [r7, #32]
   return(result);
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3314      	adds	r3, #20
 800543a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800543e:	633a      	str	r2, [r7, #48]	; 0x30
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e3      	bne.n	800541a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0310 	bic.w	r3, r3, #16
 8005476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	330c      	adds	r3, #12
 8005480:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005484:	61fa      	str	r2, [r7, #28]
 8005486:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	617b      	str	r3, [r7, #20]
   return(result);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e3      	bne.n	8005460 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f848 	bl	8005534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054a4:	e023      	b.n	80054ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <HAL_UART_IRQHandler+0x4ea>
 80054b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f963 	bl	800578a <UART_Transmit_IT>
    return;
 80054c4:	e014      	b.n	80054f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00e      	beq.n	80054f0 <HAL_UART_IRQHandler+0x514>
 80054d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9a3 	bl	800582a <UART_EndTransmit_IT>
    return;
 80054e4:	e004      	b.n	80054f0 <HAL_UART_IRQHandler+0x514>
    return;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <HAL_UART_IRQHandler+0x514>
      return;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <HAL_UART_IRQHandler+0x514>
      return;
 80054ee:	bf00      	nop
  }
}
 80054f0:	37e8      	adds	r7, #232	; 0xe8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop

080054f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b090      	sub	sp, #64	; 0x40
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	e050      	b.n	8005600 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005564:	d04c      	beq.n	8005600 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <UART_WaitOnFlagUntilTimeout+0x30>
 800556c:	f7fb ffd2 	bl	8001514 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005578:	429a      	cmp	r2, r3
 800557a:	d241      	bcs.n	8005600 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800559c:	637a      	str	r2, [r7, #52]	; 0x34
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3314      	adds	r3, #20
 80055b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	613b      	str	r3, [r7, #16]
   return(result);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055d0:	623a      	str	r2, [r7, #32]
 80055d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	69f9      	ldr	r1, [r7, #28]
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e5      	bne.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e00f      	b.n	8005620 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4013      	ands	r3, r2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	79fb      	ldrb	r3, [r7, #7]
 800561a:	429a      	cmp	r2, r3
 800561c:	d09f      	beq.n	800555e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3740      	adds	r7, #64	; 0x40
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2222      	movs	r2, #34	; 0x22
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0201 	orr.w	r2, r2, #1
 800567c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0220 	orr.w	r2, r2, #32
 800568c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b095      	sub	sp, #84	; 0x54
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056c4:	643a      	str	r2, [r7, #64]	; 0x40
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e5      	bne.n	80056a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	2b01      	cmp	r3, #1
 8005712:	d119      	bne.n	8005748 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	60bb      	str	r3, [r7, #8]
   return(result);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f023 0310 	bic.w	r3, r3, #16
 800572a:	647b      	str	r3, [r7, #68]	; 0x44
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	330c      	adds	r3, #12
 8005732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005734:	61ba      	str	r2, [r7, #24]
 8005736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	613b      	str	r3, [r7, #16]
   return(result);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e5      	bne.n	8005714 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005756:	bf00      	nop
 8005758:	3754      	adds	r7, #84	; 0x54
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fecf 	bl	8005520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b21      	cmp	r3, #33	; 0x21
 800579c:	d13e      	bne.n	800581c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a6:	d114      	bne.n	80057d2 <UART_Transmit_IT+0x48>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d110      	bne.n	80057d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	621a      	str	r2, [r3, #32]
 80057d0:	e008      	b.n	80057e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	1c59      	adds	r1, r3, #1
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6211      	str	r1, [r2, #32]
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4619      	mov	r1, r3
 80057f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10f      	bne.n	8005818 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005806:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005816:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005840:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fe54 	bl	80054f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b08c      	sub	sp, #48	; 0x30
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b22      	cmp	r3, #34	; 0x22
 800586c:	f040 80ab 	bne.w	80059c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005878:	d117      	bne.n	80058aa <UART_Receive_IT+0x50>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d113      	bne.n	80058aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005898:	b29a      	uxth	r2, r3
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	1c9a      	adds	r2, r3, #2
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
 80058a8:	e026      	b.n	80058f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058bc:	d007      	beq.n	80058ce <UART_Receive_IT+0x74>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <UART_Receive_IT+0x82>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e008      	b.n	80058ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29b      	uxth	r3, r3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4619      	mov	r1, r3
 8005906:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005908:	2b00      	cmp	r3, #0
 800590a:	d15a      	bne.n	80059c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0220 	bic.w	r2, r2, #32
 800591a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800592a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695a      	ldr	r2, [r3, #20]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	2b01      	cmp	r3, #1
 800594a:	d135      	bne.n	80059b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	613b      	str	r3, [r7, #16]
   return(result);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f023 0310 	bic.w	r3, r3, #16
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	623a      	str	r2, [r7, #32]
 8005974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e5      	bne.n	8005952 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b10      	cmp	r3, #16
 8005992:	d10a      	bne.n	80059aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff fdbf 	bl	8005534 <HAL_UARTEx_RxEventCallback>
 80059b6:	e002      	b.n	80059be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff fda7 	bl	800550c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	e002      	b.n	80059c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e000      	b.n	80059c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
  }
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3730      	adds	r7, #48	; 0x30
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	b09f      	sub	sp, #124	; 0x7c
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e6:	68d9      	ldr	r1, [r3, #12]
 80059e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	ea40 0301 	orr.w	r3, r0, r1
 80059f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a14:	f021 010c 	bic.w	r1, r1, #12
 8005a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2e:	6999      	ldr	r1, [r3, #24]
 8005a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	ea40 0301 	orr.w	r3, r0, r1
 8005a38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4bc5      	ldr	r3, [pc, #788]	; (8005d54 <UART_SetConfig+0x384>)
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d004      	beq.n	8005a4e <UART_SetConfig+0x7e>
 8005a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4bc3      	ldr	r3, [pc, #780]	; (8005d58 <UART_SetConfig+0x388>)
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d103      	bne.n	8005a56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a4e:	f7fd f8d3 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 8005a52:	6778      	str	r0, [r7, #116]	; 0x74
 8005a54:	e002      	b.n	8005a5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a56:	f7fd f8bb 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8005a5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a64:	f040 80b6 	bne.w	8005bd4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a6a:	461c      	mov	r4, r3
 8005a6c:	f04f 0500 	mov.w	r5, #0
 8005a70:	4622      	mov	r2, r4
 8005a72:	462b      	mov	r3, r5
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	6439      	str	r1, [r7, #64]	; 0x40
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a80:	1912      	adds	r2, r2, r4
 8005a82:	eb45 0303 	adc.w	r3, r5, r3
 8005a86:	f04f 0000 	mov.w	r0, #0
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	00d9      	lsls	r1, r3, #3
 8005a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a94:	00d0      	lsls	r0, r2, #3
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	1911      	adds	r1, r2, r4
 8005a9c:	6639      	str	r1, [r7, #96]	; 0x60
 8005a9e:	416b      	adcs	r3, r5
 8005aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8005aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	1891      	adds	r1, r2, r2
 8005aae:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ab8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005abc:	f7fa fb84 	bl	80001c8 <__aeabi_uldivmod>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4ba5      	ldr	r3, [pc, #660]	; (8005d5c <UART_SetConfig+0x38c>)
 8005ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	011e      	lsls	r6, r3, #4
 8005ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad0:	461c      	mov	r4, r3
 8005ad2:	f04f 0500 	mov.w	r5, #0
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	1891      	adds	r1, r2, r2
 8005adc:	6339      	str	r1, [r7, #48]	; 0x30
 8005ade:	415b      	adcs	r3, r3
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ae6:	1912      	adds	r2, r2, r4
 8005ae8:	eb45 0303 	adc.w	r3, r5, r3
 8005aec:	f04f 0000 	mov.w	r0, #0
 8005af0:	f04f 0100 	mov.w	r1, #0
 8005af4:	00d9      	lsls	r1, r3, #3
 8005af6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005afa:	00d0      	lsls	r0, r2, #3
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	1911      	adds	r1, r2, r4
 8005b02:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b04:	416b      	adcs	r3, r5
 8005b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	1891      	adds	r1, r2, r2
 8005b14:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b16:	415b      	adcs	r3, r3
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b22:	f7fa fb51 	bl	80001c8 <__aeabi_uldivmod>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4b8c      	ldr	r3, [pc, #560]	; (8005d5c <UART_SetConfig+0x38c>)
 8005b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	2164      	movs	r1, #100	; 0x64
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	3332      	adds	r3, #50	; 0x32
 8005b3e:	4a87      	ldr	r2, [pc, #540]	; (8005d5c <UART_SetConfig+0x38c>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b4c:	441e      	add	r6, r3
 8005b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b50:	4618      	mov	r0, r3
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	1894      	adds	r4, r2, r2
 8005b5c:	623c      	str	r4, [r7, #32]
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b66:	1812      	adds	r2, r2, r0
 8005b68:	eb41 0303 	adc.w	r3, r1, r3
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	f04f 0500 	mov.w	r5, #0
 8005b74:	00dd      	lsls	r5, r3, #3
 8005b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b7a:	00d4      	lsls	r4, r2, #3
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	462b      	mov	r3, r5
 8005b80:	1814      	adds	r4, r2, r0
 8005b82:	653c      	str	r4, [r7, #80]	; 0x50
 8005b84:	414b      	adcs	r3, r1
 8005b86:	657b      	str	r3, [r7, #84]	; 0x54
 8005b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	1891      	adds	r1, r2, r2
 8005b94:	61b9      	str	r1, [r7, #24]
 8005b96:	415b      	adcs	r3, r3
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ba2:	f7fa fb11 	bl	80001c8 <__aeabi_uldivmod>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4b6c      	ldr	r3, [pc, #432]	; (8005d5c <UART_SetConfig+0x38c>)
 8005bac:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	2164      	movs	r1, #100	; 0x64
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	3332      	adds	r3, #50	; 0x32
 8005bbe:	4a67      	ldr	r2, [pc, #412]	; (8005d5c <UART_SetConfig+0x38c>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	f003 0207 	and.w	r2, r3, #7
 8005bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4432      	add	r2, r6
 8005bd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bd2:	e0b9      	b.n	8005d48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd6:	461c      	mov	r4, r3
 8005bd8:	f04f 0500 	mov.w	r5, #0
 8005bdc:	4622      	mov	r2, r4
 8005bde:	462b      	mov	r3, r5
 8005be0:	1891      	adds	r1, r2, r2
 8005be2:	6139      	str	r1, [r7, #16]
 8005be4:	415b      	adcs	r3, r3
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bec:	1912      	adds	r2, r2, r4
 8005bee:	eb45 0303 	adc.w	r3, r5, r3
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f04f 0100 	mov.w	r1, #0
 8005bfa:	00d9      	lsls	r1, r3, #3
 8005bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c00:	00d0      	lsls	r0, r2, #3
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	eb12 0804 	adds.w	r8, r2, r4
 8005c0a:	eb43 0905 	adc.w	r9, r3, r5
 8005c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	008b      	lsls	r3, r1, #2
 8005c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c26:	0082      	lsls	r2, r0, #2
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	f7fa facc 	bl	80001c8 <__aeabi_uldivmod>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4b49      	ldr	r3, [pc, #292]	; (8005d5c <UART_SetConfig+0x38c>)
 8005c36:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	011e      	lsls	r6, r3, #4
 8005c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c40:	4618      	mov	r0, r3
 8005c42:	f04f 0100 	mov.w	r1, #0
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	1894      	adds	r4, r2, r2
 8005c4c:	60bc      	str	r4, [r7, #8]
 8005c4e:	415b      	adcs	r3, r3
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c56:	1812      	adds	r2, r2, r0
 8005c58:	eb41 0303 	adc.w	r3, r1, r3
 8005c5c:	f04f 0400 	mov.w	r4, #0
 8005c60:	f04f 0500 	mov.w	r5, #0
 8005c64:	00dd      	lsls	r5, r3, #3
 8005c66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c6a:	00d4      	lsls	r4, r2, #3
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	462b      	mov	r3, r5
 8005c70:	1814      	adds	r4, r2, r0
 8005c72:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c74:	414b      	adcs	r3, r1
 8005c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	008b      	lsls	r3, r1, #2
 8005c8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c90:	0082      	lsls	r2, r0, #2
 8005c92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c96:	f7fa fa97 	bl	80001c8 <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	; (8005d5c <UART_SetConfig+0x38c>)
 8005ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	2164      	movs	r1, #100	; 0x64
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	3332      	adds	r3, #50	; 0x32
 8005cb2:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <UART_SetConfig+0x38c>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cbe:	441e      	add	r6, r3
 8005cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f04f 0100 	mov.w	r1, #0
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	1894      	adds	r4, r2, r2
 8005cce:	603c      	str	r4, [r7, #0]
 8005cd0:	415b      	adcs	r3, r3
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd8:	1812      	adds	r2, r2, r0
 8005cda:	eb41 0303 	adc.w	r3, r1, r3
 8005cde:	f04f 0400 	mov.w	r4, #0
 8005ce2:	f04f 0500 	mov.w	r5, #0
 8005ce6:	00dd      	lsls	r5, r3, #3
 8005ce8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cec:	00d4      	lsls	r4, r2, #3
 8005cee:	4622      	mov	r2, r4
 8005cf0:	462b      	mov	r3, r5
 8005cf2:	eb12 0a00 	adds.w	sl, r2, r0
 8005cf6:	eb43 0b01 	adc.w	fp, r3, r1
 8005cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f04f 0100 	mov.w	r1, #0
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	008b      	lsls	r3, r1, #2
 8005d0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d12:	0082      	lsls	r2, r0, #2
 8005d14:	4650      	mov	r0, sl
 8005d16:	4659      	mov	r1, fp
 8005d18:	f7fa fa56 	bl	80001c8 <__aeabi_uldivmod>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <UART_SetConfig+0x38c>)
 8005d22:	fba3 1302 	umull	r1, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2164      	movs	r1, #100	; 0x64
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	3332      	adds	r3, #50	; 0x32
 8005d34:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <UART_SetConfig+0x38c>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4432      	add	r2, r6
 8005d46:	609a      	str	r2, [r3, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	377c      	adds	r7, #124	; 0x7c
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d52:	bf00      	nop
 8005d54:	40011000 	.word	0x40011000
 8005d58:	40011400 	.word	0x40011400
 8005d5c:	51eb851f 	.word	0x51eb851f

08005d60 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005d60:	b084      	sub	sp, #16
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	f107 001c 	add.w	r0, r7, #28
 8005d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005d76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005d78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005d7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005d7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005d82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005d86:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005d8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005d9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	b004      	add	sp, #16
 8005db4:	4770      	bx	lr

08005db6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005e00:	2002      	movs	r0, #2
 8005e02:	f7fb fb93 	bl	800152c <HAL_Delay>
  
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005e50:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005e56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e66:	f023 030f 	bic.w	r3, r3, #15
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	b2db      	uxtb	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
}  
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ee6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005eec:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ef2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0

}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f26:	2310      	movs	r3, #16
 8005f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f2a:	2340      	movs	r3, #64	; 0x40
 8005f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f38:	f107 0308 	add.w	r3, r7, #8
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ff74 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f48:	2110      	movs	r1, #16
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa02 	bl	8006354 <SDMMC_GetCmdResp1>
 8005f50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f52:	69fb      	ldr	r3, [r7, #28]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005f6a:	2311      	movs	r3, #17
 8005f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f6e:	2340      	movs	r3, #64	; 0x40
 8005f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f7c:	f107 0308 	add.w	r3, r7, #8
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff ff52 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	2111      	movs	r1, #17
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f9e0 	bl	8006354 <SDMMC_GetCmdResp1>
 8005f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f96:	69fb      	ldr	r3, [r7, #28]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3720      	adds	r7, #32
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005fae:	2312      	movs	r3, #18
 8005fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fb2:	2340      	movs	r3, #64	; 0x40
 8005fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fc0:	f107 0308 	add.w	r3, r7, #8
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff ff30 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd0:	2112      	movs	r1, #18
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9be 	bl	8006354 <SDMMC_GetCmdResp1>
 8005fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fda:	69fb      	ldr	r3, [r7, #28]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005ff2:	2318      	movs	r3, #24
 8005ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006002:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006004:	f107 0308 	add.w	r3, r7, #8
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ff0e 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006010:	f241 3288 	movw	r2, #5000	; 0x1388
 8006014:	2118      	movs	r1, #24
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f99c 	bl	8006354 <SDMMC_GetCmdResp1>
 800601c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800601e:	69fb      	ldr	r3, [r7, #28]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006036:	2319      	movs	r3, #25
 8006038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800603a:	2340      	movs	r3, #64	; 0x40
 800603c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006046:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff feec 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006054:	f241 3288 	movw	r2, #5000	; 0x1388
 8006058:	2119      	movs	r1, #25
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f97a 	bl	8006354 <SDMMC_GetCmdResp1>
 8006060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006062:	69fb      	ldr	r3, [r7, #28]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006078:	230c      	movs	r3, #12
 800607a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800607c:	2340      	movs	r3, #64	; 0x40
 800607e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006088:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fecb 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006096:	4a05      	ldr	r2, [pc, #20]	; (80060ac <SDMMC_CmdStopTransfer+0x40>)
 8006098:	210c      	movs	r1, #12
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f95a 	bl	8006354 <SDMMC_GetCmdResp1>
 80060a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060a2:	69fb      	ldr	r3, [r7, #28]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	05f5e100 	.word	0x05f5e100

080060b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	; 0x28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80060c0:	2307      	movs	r3, #7
 80060c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060d2:	f107 0310 	add.w	r3, r7, #16
 80060d6:	4619      	mov	r1, r3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fea7 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80060de:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e2:	2107      	movs	r1, #7
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f935 	bl	8006354 <SDMMC_GetCmdResp1>
 80060ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3728      	adds	r7, #40	; 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b088      	sub	sp, #32
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800610e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006112:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006114:	f107 0308 	add.w	r3, r7, #8
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fe86 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8eb 	bl	80062fc <SDMMC_GetCmdError>
 8006126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006128:	69fb      	ldr	r3, [r7, #28]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3720      	adds	r7, #32
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b088      	sub	sp, #32
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800613a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800613e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006140:	2308      	movs	r3, #8
 8006142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800614c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006150:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff fe67 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fae2 	bl	8006728 <SDMMC_GetCmdResp7>
 8006164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006166:	69fb      	ldr	r3, [r7, #28]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800617e:	2337      	movs	r3, #55	; 0x37
 8006180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006182:	2340      	movs	r3, #64	; 0x40
 8006184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800618a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fe48 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800619c:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a0:	2137      	movs	r1, #55	; 0x37
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8d6 	bl	8006354 <SDMMC_GetCmdResp1>
 80061a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061aa:	69fb      	ldr	r3, [r7, #28]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80061ca:	2329      	movs	r3, #41	; 0x29
 80061cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fe22 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f9e9 	bl	80065c0 <SDMMC_GetCmdResp3>
 80061ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061f0:	69fb      	ldr	r3, [r7, #28]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b088      	sub	sp, #32
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006206:	2302      	movs	r3, #2
 8006208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800620a:	23c0      	movs	r3, #192	; 0xc0
 800620c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fe04 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f983 	bl	8006530 <SDMMC_GetCmdResp2>
 800622a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800622c:	69fb      	ldr	r3, [r7, #28]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b088      	sub	sp, #32
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006244:	2309      	movs	r3, #9
 8006246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006248:	23c0      	movs	r3, #192	; 0xc0
 800624a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006254:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006256:	f107 0308 	add.w	r3, r7, #8
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fde5 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f964 	bl	8006530 <SDMMC_GetCmdResp2>
 8006268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800626a:	69fb      	ldr	r3, [r7, #28]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006282:	2303      	movs	r3, #3
 8006284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006286:	2340      	movs	r3, #64	; 0x40
 8006288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800628e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006294:	f107 0308 	add.w	r3, r7, #8
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff fdc6 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	2103      	movs	r1, #3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f9c9 	bl	800663c <SDMMC_GetCmdResp6>
 80062aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062ac:	69fb      	ldr	r3, [r7, #28]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b088      	sub	sp, #32
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80062c4:	230d      	movs	r3, #13
 80062c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062c8:	2340      	movs	r3, #64	; 0x40
 80062ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062d6:	f107 0308 	add.w	r3, r7, #8
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff fda5 	bl	8005e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80062e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e6:	210d      	movs	r1, #13
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f833 	bl	8006354 <SDMMC_GetCmdResp1>
 80062ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062f0:	69fb      	ldr	r3, [r7, #28]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <SDMMC_GetCmdError+0x50>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a11      	ldr	r2, [pc, #68]	; (8006350 <SDMMC_GetCmdError+0x54>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	0a5b      	lsrs	r3, r3, #9
 8006310:	f241 3288 	movw	r2, #5000	; 0x1388
 8006314:	fb02 f303 	mul.w	r3, r2, r3
 8006318:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	1e5a      	subs	r2, r3, #1
 800631e:	60fa      	str	r2, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d102      	bne.n	800632a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006328:	e009      	b.n	800633e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0f1      	beq.n	800631a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	22c5      	movs	r2, #197	; 0xc5
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20002710 	.word	0x20002710
 8006350:	10624dd3 	.word	0x10624dd3

08006354 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	460b      	mov	r3, r1
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006362:	4b70      	ldr	r3, [pc, #448]	; (8006524 <SDMMC_GetCmdResp1+0x1d0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a70      	ldr	r2, [pc, #448]	; (8006528 <SDMMC_GetCmdResp1+0x1d4>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	0a5a      	lsrs	r2, r3, #9
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	fb02 f303 	mul.w	r3, r2, r3
 8006374:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	1e5a      	subs	r2, r3, #1
 800637a:	61fa      	str	r2, [r7, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006380:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006384:	e0c9      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ef      	beq.n	8006376 <SDMMC_GetCmdResp1+0x22>
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1ea      	bne.n	8006376 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2204      	movs	r2, #4
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063b2:	2304      	movs	r3, #4
 80063b4:	e0b1      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0a6      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	22c5      	movs	r2, #197	; 0xc5
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7ff fd54 	bl	8005e80 <SDIO_GetCommandResponse>
 80063d8:	4603      	mov	r3, r0
 80063da:	461a      	mov	r2, r3
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	4293      	cmp	r3, r2
 80063e0:	d001      	beq.n	80063e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e099      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80063e6:	2100      	movs	r1, #0
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff fd56 	bl	8005e9a <SDIO_GetResponse>
 80063ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4b4e      	ldr	r3, [pc, #312]	; (800652c <SDMMC_GetCmdResp1+0x1d8>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e08d      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	da02      	bge.n	800640a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006408:	e087      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006414:	2340      	movs	r3, #64	; 0x40
 8006416:	e080      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006422:	2380      	movs	r3, #128	; 0x80
 8006424:	e079      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006434:	e071      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006444:	e069      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006454:	e061      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006464:	e059      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006474:	e051      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006484:	e049      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006494:	e041      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80064a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a4:	e039      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80064b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064b4:	e031      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80064c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064c4:	e029      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80064d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80064d4:	e021      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80064e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80064e4:	e019      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80064f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064f4:	e011      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006500:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006504:	e009      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006510:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006514:	e001      	b.n	800651a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20002710 	.word	0x20002710
 8006528:	10624dd3 	.word	0x10624dd3
 800652c:	fdffe008 	.word	0xfdffe008

08006530 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006538:	4b1f      	ldr	r3, [pc, #124]	; (80065b8 <SDMMC_GetCmdResp2+0x88>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1f      	ldr	r2, [pc, #124]	; (80065bc <SDMMC_GetCmdResp2+0x8c>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	0a5b      	lsrs	r3, r3, #9
 8006544:	f241 3288 	movw	r2, #5000	; 0x1388
 8006548:	fb02 f303 	mul.w	r3, r2, r3
 800654c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1e5a      	subs	r2, r3, #1
 8006552:	60fa      	str	r2, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800655c:	e026      	b.n	80065ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0ef      	beq.n	800654e <SDMMC_GetCmdResp2+0x1e>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1ea      	bne.n	800654e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2204      	movs	r2, #4
 8006588:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800658a:	2304      	movs	r3, #4
 800658c:	e00e      	b.n	80065ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e003      	b.n	80065ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	22c5      	movs	r2, #197	; 0xc5
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	20002710 	.word	0x20002710
 80065bc:	10624dd3 	.word	0x10624dd3

080065c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <SDMMC_GetCmdResp3+0x74>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <SDMMC_GetCmdResp3+0x78>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	0a5b      	lsrs	r3, r3, #9
 80065d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d8:	fb02 f303 	mul.w	r3, r2, r3
 80065dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1e5a      	subs	r2, r3, #1
 80065e2:	60fa      	str	r2, [r7, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d102      	bne.n	80065ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065ec:	e01b      	b.n	8006626 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0ef      	beq.n	80065de <SDMMC_GetCmdResp3+0x1e>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1ea      	bne.n	80065de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2204      	movs	r2, #4
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800661a:	2304      	movs	r3, #4
 800661c:	e003      	b.n	8006626 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	22c5      	movs	r2, #197	; 0xc5
 8006622:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20002710 	.word	0x20002710
 8006638:	10624dd3 	.word	0x10624dd3

0800663c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	460b      	mov	r3, r1
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800664a:	4b35      	ldr	r3, [pc, #212]	; (8006720 <SDMMC_GetCmdResp6+0xe4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a35      	ldr	r2, [pc, #212]	; (8006724 <SDMMC_GetCmdResp6+0xe8>)
 8006650:	fba2 2303 	umull	r2, r3, r2, r3
 8006654:	0a5b      	lsrs	r3, r3, #9
 8006656:	f241 3288 	movw	r2, #5000	; 0x1388
 800665a:	fb02 f303 	mul.w	r3, r2, r3
 800665e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	1e5a      	subs	r2, r3, #1
 8006664:	61fa      	str	r2, [r7, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800666a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800666e:	e052      	b.n	8006716 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006674:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0ef      	beq.n	8006660 <SDMMC_GetCmdResp6+0x24>
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1ea      	bne.n	8006660 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2204      	movs	r2, #4
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800669c:	2304      	movs	r3, #4
 800669e:	e03a      	b.n	8006716 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e02f      	b.n	8006716 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff fbe2 	bl	8005e80 <SDIO_GetCommandResponse>
 80066bc:	4603      	mov	r3, r0
 80066be:	461a      	mov	r2, r3
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d001      	beq.n	80066ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e025      	b.n	8006716 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	22c5      	movs	r2, #197	; 0xc5
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066d0:	2100      	movs	r1, #0
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff fbe1 	bl	8005e9a <SDIO_GetResponse>
 80066d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	0c1b      	lsrs	r3, r3, #16
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e011      	b.n	8006716 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80066fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006700:	e009      	b.n	8006716 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800670c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006710:	e001      	b.n	8006716 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006716:	4618      	mov	r0, r3
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20002710 	.word	0x20002710
 8006724:	10624dd3 	.word	0x10624dd3

08006728 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006730:	4b22      	ldr	r3, [pc, #136]	; (80067bc <SDMMC_GetCmdResp7+0x94>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <SDMMC_GetCmdResp7+0x98>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	0a5b      	lsrs	r3, r3, #9
 800673c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1e5a      	subs	r2, r3, #1
 800674a:	60fa      	str	r2, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006754:	e02c      	b.n	80067b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0ef      	beq.n	8006746 <SDMMC_GetCmdResp7+0x1e>
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1ea      	bne.n	8006746 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2204      	movs	r2, #4
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006782:	2304      	movs	r3, #4
 8006784:	e014      	b.n	80067b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006798:	2301      	movs	r3, #1
 800679a:	e009      	b.n	80067b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2240      	movs	r2, #64	; 0x40
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80067ae:	2300      	movs	r3, #0
  
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	20002710 	.word	0x20002710
 80067c0:	10624dd3 	.word	0x10624dd3

080067c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80067c8:	4904      	ldr	r1, [pc, #16]	; (80067dc <MX_FATFS_Init+0x18>)
 80067ca:	4805      	ldr	r0, [pc, #20]	; (80067e0 <MX_FATFS_Init+0x1c>)
 80067cc:	f000 f9d6 	bl	8006b7c <FATFS_LinkDriver>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <MX_FATFS_Init+0x20>)
 80067d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80067d8:	bf00      	nop
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20016004 	.word	0x20016004
 80067e0:	0800761c 	.word	0x0800761c
 80067e4:	20016000 	.word	0x20016000

080067e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80067f2:	f000 f86b 	bl	80068cc <BSP_SD_IsDetected>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d001      	beq.n	8006800 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e005      	b.n	800680c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006800:	4804      	ldr	r0, [pc, #16]	; (8006814 <BSP_SD_Init+0x2c>)
 8006802:	f7fc fa0d 	bl	8002c20 <HAL_SD_Init>
 8006806:	4603      	mov	r3, r0
 8006808:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800680a:	79fb      	ldrb	r3, [r7, #7]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20003148 	.word	0x20003148

08006818 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	68f9      	ldr	r1, [r7, #12]
 8006834:	4806      	ldr	r0, [pc, #24]	; (8006850 <BSP_SD_ReadBlocks+0x38>)
 8006836:	f7fc faa1 	bl	8002d7c <HAL_SD_ReadBlocks>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006844:	7dfb      	ldrb	r3, [r7, #23]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20003148 	.word	0x20003148

08006854 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	4806      	ldr	r0, [pc, #24]	; (800688c <BSP_SD_WriteBlocks+0x38>)
 8006872:	f7fc fc61 	bl	8003138 <HAL_SD_WriteBlocks>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20003148 	.word	0x20003148

08006890 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006894:	4805      	ldr	r0, [pc, #20]	; (80068ac <BSP_SD_GetCardState+0x1c>)
 8006896:	f7fc ffa5 	bl	80037e4 <HAL_SD_GetCardState>
 800689a:	4603      	mov	r3, r0
 800689c:	2b04      	cmp	r3, #4
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20003148 	.word	0x20003148

080068b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4803      	ldr	r0, [pc, #12]	; (80068c8 <BSP_SD_GetCardInfo+0x18>)
 80068bc:	f7fc ff66 	bl	800378c <HAL_SD_GetCardInfo>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20003148 	.word	0x20003148

080068cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80068d2:	2301      	movs	r3, #1
 80068d4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80068d6:	f000 f80b 	bl	80068f0 <BSP_PlatformIsDetected>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80068e0:	2300      	movs	r3, #0
 80068e2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	b2db      	uxtb	r3, r3
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80068f6:	2301      	movs	r3, #1
 80068f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80068fa:	2102      	movs	r1, #2
 80068fc:	4806      	ldr	r0, [pc, #24]	; (8006918 <BSP_PlatformIsDetected+0x28>)
 80068fe:	f7fb fce9 	bl	80022d4 <HAL_GPIO_ReadPin>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006908:	2300      	movs	r3, #0
 800690a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800690c:	79fb      	ldrb	r3, [r7, #7]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40020000 	.word	0x40020000

0800691c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <SD_CheckStatus+0x38>)
 8006928:	2201      	movs	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800692c:	f7ff ffb0 	bl	8006890 <BSP_SD_GetCardState>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d107      	bne.n	8006946 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006936:	4b07      	ldr	r3, [pc, #28]	; (8006954 <SD_CheckStatus+0x38>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	b2da      	uxtb	r2, r3
 8006942:	4b04      	ldr	r3, [pc, #16]	; (8006954 <SD_CheckStatus+0x38>)
 8006944:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006946:	4b03      	ldr	r3, [pc, #12]	; (8006954 <SD_CheckStatus+0x38>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b2db      	uxtb	r3, r3
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20002719 	.word	0x20002719

08006958 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <SD_initialize+0x38>)
 8006964:	2201      	movs	r2, #1
 8006966:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006968:	f7ff ff3e 	bl	80067e8 <BSP_SD_Init>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d107      	bne.n	8006982 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff ffd1 	bl	800691c <SD_CheckStatus>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <SD_initialize+0x38>)
 8006980:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006982:	4b03      	ldr	r3, [pc, #12]	; (8006990 <SD_initialize+0x38>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b2db      	uxtb	r3, r3
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20002719 	.word	0x20002719

08006994 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff ffbb 	bl	800691c <SD_CheckStatus>
 80069a6:	4603      	mov	r3, r0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80069c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	68b8      	ldr	r0, [r7, #8]
 80069ce:	f7ff ff23 	bl	8006818 <BSP_SD_ReadBlocks>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d107      	bne.n	80069e8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80069d8:	bf00      	nop
 80069da:	f7ff ff59 	bl	8006890 <BSP_SD_GetCardState>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1fa      	bne.n	80069da <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b086      	sub	sp, #24
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	68b8      	ldr	r0, [r7, #8]
 8006a10:	f7ff ff20 	bl	8006854 <BSP_SD_WriteBlocks>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d107      	bne.n	8006a2a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006a1a:	bf00      	nop
 8006a1c:	f7ff ff38 	bl	8006890 <BSP_SD_GetCardState>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1fa      	bne.n	8006a1c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	; 0x30
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	603a      	str	r2, [r7, #0]
 8006a3e:	71fb      	strb	r3, [r7, #7]
 8006a40:	460b      	mov	r3, r1
 8006a42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006a4a:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <SD_ioctl+0xac>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <SD_ioctl+0x28>
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e03c      	b.n	8006ad6 <SD_ioctl+0xa2>

  switch (cmd)
 8006a5c:	79bb      	ldrb	r3, [r7, #6]
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d834      	bhi.n	8006acc <SD_ioctl+0x98>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <SD_ioctl+0x34>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a81 	.word	0x08006a81
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006ab3 	.word	0x08006ab3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a7e:	e028      	b.n	8006ad2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a80:	f107 030c 	add.w	r3, r7, #12
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff ff13 	bl	80068b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a96:	e01c      	b.n	8006ad2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a98:	f107 030c 	add.w	r3, r7, #12
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff ff07 	bl	80068b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006ab0:	e00f      	b.n	8006ad2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006ab2:	f107 030c 	add.w	r3, r7, #12
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fefa 	bl	80068b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	0a5a      	lsrs	r2, r3, #9
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006aca:	e002      	b.n	8006ad2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3730      	adds	r7, #48	; 0x30
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20002719 	.word	0x20002719

08006ae4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4613      	mov	r3, r2
 8006af0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006af2:	2301      	movs	r3, #1
 8006af4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006afa:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006afc:	7a5b      	ldrb	r3, [r3, #9]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d131      	bne.n	8006b68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006b04:	4b1c      	ldr	r3, [pc, #112]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006b06:	7a5b      	ldrb	r3, [r3, #9]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006b0e:	2100      	movs	r1, #0
 8006b10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006b12:	4b19      	ldr	r3, [pc, #100]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006b14:	7a5b      	ldrb	r3, [r3, #9]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006b24:	7a5b      	ldrb	r3, [r3, #9]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006b2c:	4413      	add	r3, r2
 8006b2e:	79fa      	ldrb	r2, [r7, #7]
 8006b30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006b32:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006b34:	7a5b      	ldrb	r3, [r3, #9]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	b2d1      	uxtb	r1, r2
 8006b3c:	4a0e      	ldr	r2, [pc, #56]	; (8006b78 <FATFS_LinkDriverEx+0x94>)
 8006b3e:	7251      	strb	r1, [r2, #9]
 8006b40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006b42:	7dbb      	ldrb	r3, [r7, #22]
 8006b44:	3330      	adds	r3, #48	; 0x30
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	223a      	movs	r2, #58	; 0x3a
 8006b52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3302      	adds	r3, #2
 8006b58:	222f      	movs	r2, #47	; 0x2f
 8006b5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	3303      	adds	r3, #3
 8006b60:	2200      	movs	r2, #0
 8006b62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	200027a0 	.word	0x200027a0

08006b7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006b86:	2200      	movs	r2, #0
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff ffaa 	bl	8006ae4 <FATFS_LinkDriverEx>
 8006b90:	4603      	mov	r3, r0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <__errno>:
 8006b9c:	4b01      	ldr	r3, [pc, #4]	; (8006ba4 <__errno+0x8>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	2000271c 	.word	0x2000271c

08006ba8 <__libc_init_array>:
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	4d0d      	ldr	r5, [pc, #52]	; (8006be0 <__libc_init_array+0x38>)
 8006bac:	4c0d      	ldr	r4, [pc, #52]	; (8006be4 <__libc_init_array+0x3c>)
 8006bae:	1b64      	subs	r4, r4, r5
 8006bb0:	10a4      	asrs	r4, r4, #2
 8006bb2:	2600      	movs	r6, #0
 8006bb4:	42a6      	cmp	r6, r4
 8006bb6:	d109      	bne.n	8006bcc <__libc_init_array+0x24>
 8006bb8:	4d0b      	ldr	r5, [pc, #44]	; (8006be8 <__libc_init_array+0x40>)
 8006bba:	4c0c      	ldr	r4, [pc, #48]	; (8006bec <__libc_init_array+0x44>)
 8006bbc:	f000 fcf4 	bl	80075a8 <_init>
 8006bc0:	1b64      	subs	r4, r4, r5
 8006bc2:	10a4      	asrs	r4, r4, #2
 8006bc4:	2600      	movs	r6, #0
 8006bc6:	42a6      	cmp	r6, r4
 8006bc8:	d105      	bne.n	8006bd6 <__libc_init_array+0x2e>
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd0:	4798      	blx	r3
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	e7ee      	b.n	8006bb4 <__libc_init_array+0xc>
 8006bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bda:	4798      	blx	r3
 8006bdc:	3601      	adds	r6, #1
 8006bde:	e7f2      	b.n	8006bc6 <__libc_init_array+0x1e>
 8006be0:	0800769c 	.word	0x0800769c
 8006be4:	0800769c 	.word	0x0800769c
 8006be8:	0800769c 	.word	0x0800769c
 8006bec:	080076a0 	.word	0x080076a0

08006bf0 <memcpy>:
 8006bf0:	440a      	add	r2, r1
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006bf8:	d100      	bne.n	8006bfc <memcpy+0xc>
 8006bfa:	4770      	bx	lr
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c06:	4291      	cmp	r1, r2
 8006c08:	d1f9      	bne.n	8006bfe <memcpy+0xe>
 8006c0a:	bd10      	pop	{r4, pc}

08006c0c <memset>:
 8006c0c:	4402      	add	r2, r0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d100      	bne.n	8006c16 <memset+0xa>
 8006c14:	4770      	bx	lr
 8006c16:	f803 1b01 	strb.w	r1, [r3], #1
 8006c1a:	e7f9      	b.n	8006c10 <memset+0x4>

08006c1c <_puts_r>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	460e      	mov	r6, r1
 8006c20:	4605      	mov	r5, r0
 8006c22:	b118      	cbz	r0, 8006c2c <_puts_r+0x10>
 8006c24:	6983      	ldr	r3, [r0, #24]
 8006c26:	b90b      	cbnz	r3, 8006c2c <_puts_r+0x10>
 8006c28:	f000 fa48 	bl	80070bc <__sinit>
 8006c2c:	69ab      	ldr	r3, [r5, #24]
 8006c2e:	68ac      	ldr	r4, [r5, #8]
 8006c30:	b913      	cbnz	r3, 8006c38 <_puts_r+0x1c>
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 fa42 	bl	80070bc <__sinit>
 8006c38:	4b2c      	ldr	r3, [pc, #176]	; (8006cec <_puts_r+0xd0>)
 8006c3a:	429c      	cmp	r4, r3
 8006c3c:	d120      	bne.n	8006c80 <_puts_r+0x64>
 8006c3e:	686c      	ldr	r4, [r5, #4]
 8006c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c42:	07db      	lsls	r3, r3, #31
 8006c44:	d405      	bmi.n	8006c52 <_puts_r+0x36>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	0598      	lsls	r0, r3, #22
 8006c4a:	d402      	bmi.n	8006c52 <_puts_r+0x36>
 8006c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c4e:	f000 fad3 	bl	80071f8 <__retarget_lock_acquire_recursive>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	0719      	lsls	r1, r3, #28
 8006c56:	d51d      	bpl.n	8006c94 <_puts_r+0x78>
 8006c58:	6923      	ldr	r3, [r4, #16]
 8006c5a:	b1db      	cbz	r3, 8006c94 <_puts_r+0x78>
 8006c5c:	3e01      	subs	r6, #1
 8006c5e:	68a3      	ldr	r3, [r4, #8]
 8006c60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c64:	3b01      	subs	r3, #1
 8006c66:	60a3      	str	r3, [r4, #8]
 8006c68:	bb39      	cbnz	r1, 8006cba <_puts_r+0x9e>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da38      	bge.n	8006ce0 <_puts_r+0xc4>
 8006c6e:	4622      	mov	r2, r4
 8006c70:	210a      	movs	r1, #10
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f848 	bl	8006d08 <__swbuf_r>
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d011      	beq.n	8006ca0 <_puts_r+0x84>
 8006c7c:	250a      	movs	r5, #10
 8006c7e:	e011      	b.n	8006ca4 <_puts_r+0x88>
 8006c80:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <_puts_r+0xd4>)
 8006c82:	429c      	cmp	r4, r3
 8006c84:	d101      	bne.n	8006c8a <_puts_r+0x6e>
 8006c86:	68ac      	ldr	r4, [r5, #8]
 8006c88:	e7da      	b.n	8006c40 <_puts_r+0x24>
 8006c8a:	4b1a      	ldr	r3, [pc, #104]	; (8006cf4 <_puts_r+0xd8>)
 8006c8c:	429c      	cmp	r4, r3
 8006c8e:	bf08      	it	eq
 8006c90:	68ec      	ldreq	r4, [r5, #12]
 8006c92:	e7d5      	b.n	8006c40 <_puts_r+0x24>
 8006c94:	4621      	mov	r1, r4
 8006c96:	4628      	mov	r0, r5
 8006c98:	f000 f888 	bl	8006dac <__swsetup_r>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d0dd      	beq.n	8006c5c <_puts_r+0x40>
 8006ca0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ca6:	07da      	lsls	r2, r3, #31
 8006ca8:	d405      	bmi.n	8006cb6 <_puts_r+0x9a>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	059b      	lsls	r3, r3, #22
 8006cae:	d402      	bmi.n	8006cb6 <_puts_r+0x9a>
 8006cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cb2:	f000 faa2 	bl	80071fa <__retarget_lock_release_recursive>
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	bd70      	pop	{r4, r5, r6, pc}
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da04      	bge.n	8006cc8 <_puts_r+0xac>
 8006cbe:	69a2      	ldr	r2, [r4, #24]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	dc06      	bgt.n	8006cd2 <_puts_r+0xb6>
 8006cc4:	290a      	cmp	r1, #10
 8006cc6:	d004      	beq.n	8006cd2 <_puts_r+0xb6>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	6022      	str	r2, [r4, #0]
 8006cce:	7019      	strb	r1, [r3, #0]
 8006cd0:	e7c5      	b.n	8006c5e <_puts_r+0x42>
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	f000 f817 	bl	8006d08 <__swbuf_r>
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d1bf      	bne.n	8006c5e <_puts_r+0x42>
 8006cde:	e7df      	b.n	8006ca0 <_puts_r+0x84>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	250a      	movs	r5, #10
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	6022      	str	r2, [r4, #0]
 8006ce8:	701d      	strb	r5, [r3, #0]
 8006cea:	e7db      	b.n	8006ca4 <_puts_r+0x88>
 8006cec:	08007654 	.word	0x08007654
 8006cf0:	08007674 	.word	0x08007674
 8006cf4:	08007634 	.word	0x08007634

08006cf8 <puts>:
 8006cf8:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <puts+0xc>)
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	f7ff bf8d 	b.w	8006c1c <_puts_r>
 8006d02:	bf00      	nop
 8006d04:	2000271c 	.word	0x2000271c

08006d08 <__swbuf_r>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	460e      	mov	r6, r1
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	4605      	mov	r5, r0
 8006d10:	b118      	cbz	r0, 8006d1a <__swbuf_r+0x12>
 8006d12:	6983      	ldr	r3, [r0, #24]
 8006d14:	b90b      	cbnz	r3, 8006d1a <__swbuf_r+0x12>
 8006d16:	f000 f9d1 	bl	80070bc <__sinit>
 8006d1a:	4b21      	ldr	r3, [pc, #132]	; (8006da0 <__swbuf_r+0x98>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d12b      	bne.n	8006d78 <__swbuf_r+0x70>
 8006d20:	686c      	ldr	r4, [r5, #4]
 8006d22:	69a3      	ldr	r3, [r4, #24]
 8006d24:	60a3      	str	r3, [r4, #8]
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	071a      	lsls	r2, r3, #28
 8006d2a:	d52f      	bpl.n	8006d8c <__swbuf_r+0x84>
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	b36b      	cbz	r3, 8006d8c <__swbuf_r+0x84>
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	6820      	ldr	r0, [r4, #0]
 8006d34:	1ac0      	subs	r0, r0, r3
 8006d36:	6963      	ldr	r3, [r4, #20]
 8006d38:	b2f6      	uxtb	r6, r6
 8006d3a:	4283      	cmp	r3, r0
 8006d3c:	4637      	mov	r7, r6
 8006d3e:	dc04      	bgt.n	8006d4a <__swbuf_r+0x42>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 f926 	bl	8006f94 <_fflush_r>
 8006d48:	bb30      	cbnz	r0, 8006d98 <__swbuf_r+0x90>
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	6022      	str	r2, [r4, #0]
 8006d56:	701e      	strb	r6, [r3, #0]
 8006d58:	6963      	ldr	r3, [r4, #20]
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	4283      	cmp	r3, r0
 8006d5e:	d004      	beq.n	8006d6a <__swbuf_r+0x62>
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	07db      	lsls	r3, r3, #31
 8006d64:	d506      	bpl.n	8006d74 <__swbuf_r+0x6c>
 8006d66:	2e0a      	cmp	r6, #10
 8006d68:	d104      	bne.n	8006d74 <__swbuf_r+0x6c>
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 f911 	bl	8006f94 <_fflush_r>
 8006d72:	b988      	cbnz	r0, 8006d98 <__swbuf_r+0x90>
 8006d74:	4638      	mov	r0, r7
 8006d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <__swbuf_r+0x9c>)
 8006d7a:	429c      	cmp	r4, r3
 8006d7c:	d101      	bne.n	8006d82 <__swbuf_r+0x7a>
 8006d7e:	68ac      	ldr	r4, [r5, #8]
 8006d80:	e7cf      	b.n	8006d22 <__swbuf_r+0x1a>
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <__swbuf_r+0xa0>)
 8006d84:	429c      	cmp	r4, r3
 8006d86:	bf08      	it	eq
 8006d88:	68ec      	ldreq	r4, [r5, #12]
 8006d8a:	e7ca      	b.n	8006d22 <__swbuf_r+0x1a>
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f000 f80c 	bl	8006dac <__swsetup_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d0cb      	beq.n	8006d30 <__swbuf_r+0x28>
 8006d98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d9c:	e7ea      	b.n	8006d74 <__swbuf_r+0x6c>
 8006d9e:	bf00      	nop
 8006da0:	08007654 	.word	0x08007654
 8006da4:	08007674 	.word	0x08007674
 8006da8:	08007634 	.word	0x08007634

08006dac <__swsetup_r>:
 8006dac:	4b32      	ldr	r3, [pc, #200]	; (8006e78 <__swsetup_r+0xcc>)
 8006dae:	b570      	push	{r4, r5, r6, lr}
 8006db0:	681d      	ldr	r5, [r3, #0]
 8006db2:	4606      	mov	r6, r0
 8006db4:	460c      	mov	r4, r1
 8006db6:	b125      	cbz	r5, 8006dc2 <__swsetup_r+0x16>
 8006db8:	69ab      	ldr	r3, [r5, #24]
 8006dba:	b913      	cbnz	r3, 8006dc2 <__swsetup_r+0x16>
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 f97d 	bl	80070bc <__sinit>
 8006dc2:	4b2e      	ldr	r3, [pc, #184]	; (8006e7c <__swsetup_r+0xd0>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	d10f      	bne.n	8006de8 <__swsetup_r+0x3c>
 8006dc8:	686c      	ldr	r4, [r5, #4]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd0:	0719      	lsls	r1, r3, #28
 8006dd2:	d42c      	bmi.n	8006e2e <__swsetup_r+0x82>
 8006dd4:	06dd      	lsls	r5, r3, #27
 8006dd6:	d411      	bmi.n	8006dfc <__swsetup_r+0x50>
 8006dd8:	2309      	movs	r3, #9
 8006dda:	6033      	str	r3, [r6, #0]
 8006ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de6:	e03e      	b.n	8006e66 <__swsetup_r+0xba>
 8006de8:	4b25      	ldr	r3, [pc, #148]	; (8006e80 <__swsetup_r+0xd4>)
 8006dea:	429c      	cmp	r4, r3
 8006dec:	d101      	bne.n	8006df2 <__swsetup_r+0x46>
 8006dee:	68ac      	ldr	r4, [r5, #8]
 8006df0:	e7eb      	b.n	8006dca <__swsetup_r+0x1e>
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <__swsetup_r+0xd8>)
 8006df4:	429c      	cmp	r4, r3
 8006df6:	bf08      	it	eq
 8006df8:	68ec      	ldreq	r4, [r5, #12]
 8006dfa:	e7e6      	b.n	8006dca <__swsetup_r+0x1e>
 8006dfc:	0758      	lsls	r0, r3, #29
 8006dfe:	d512      	bpl.n	8006e26 <__swsetup_r+0x7a>
 8006e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e02:	b141      	cbz	r1, 8006e16 <__swsetup_r+0x6a>
 8006e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	d002      	beq.n	8006e12 <__swsetup_r+0x66>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f000 fa59 	bl	80072c4 <_free_r>
 8006e12:	2300      	movs	r3, #0
 8006e14:	6363      	str	r3, [r4, #52]	; 0x34
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	f043 0308 	orr.w	r3, r3, #8
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	b94b      	cbnz	r3, 8006e46 <__swsetup_r+0x9a>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3c:	d003      	beq.n	8006e46 <__swsetup_r+0x9a>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4630      	mov	r0, r6
 8006e42:	f000 f9ff 	bl	8007244 <__smakebuf_r>
 8006e46:	89a0      	ldrh	r0, [r4, #12]
 8006e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e4c:	f010 0301 	ands.w	r3, r0, #1
 8006e50:	d00a      	beq.n	8006e68 <__swsetup_r+0xbc>
 8006e52:	2300      	movs	r3, #0
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	6963      	ldr	r3, [r4, #20]
 8006e58:	425b      	negs	r3, r3
 8006e5a:	61a3      	str	r3, [r4, #24]
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	b943      	cbnz	r3, 8006e72 <__swsetup_r+0xc6>
 8006e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e64:	d1ba      	bne.n	8006ddc <__swsetup_r+0x30>
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	0781      	lsls	r1, r0, #30
 8006e6a:	bf58      	it	pl
 8006e6c:	6963      	ldrpl	r3, [r4, #20]
 8006e6e:	60a3      	str	r3, [r4, #8]
 8006e70:	e7f4      	b.n	8006e5c <__swsetup_r+0xb0>
 8006e72:	2000      	movs	r0, #0
 8006e74:	e7f7      	b.n	8006e66 <__swsetup_r+0xba>
 8006e76:	bf00      	nop
 8006e78:	2000271c 	.word	0x2000271c
 8006e7c:	08007654 	.word	0x08007654
 8006e80:	08007674 	.word	0x08007674
 8006e84:	08007634 	.word	0x08007634

08006e88 <__sflush_r>:
 8006e88:	898a      	ldrh	r2, [r1, #12]
 8006e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8e:	4605      	mov	r5, r0
 8006e90:	0710      	lsls	r0, r2, #28
 8006e92:	460c      	mov	r4, r1
 8006e94:	d458      	bmi.n	8006f48 <__sflush_r+0xc0>
 8006e96:	684b      	ldr	r3, [r1, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc05      	bgt.n	8006ea8 <__sflush_r+0x20>
 8006e9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dc02      	bgt.n	8006ea8 <__sflush_r+0x20>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d0f9      	beq.n	8006ea2 <__sflush_r+0x1a>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006eb4:	682f      	ldr	r7, [r5, #0]
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	d032      	beq.n	8006f20 <__sflush_r+0x98>
 8006eba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	075a      	lsls	r2, r3, #29
 8006ec0:	d505      	bpl.n	8006ece <__sflush_r+0x46>
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	1ac0      	subs	r0, r0, r3
 8006ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ec8:	b10b      	cbz	r3, 8006ece <__sflush_r+0x46>
 8006eca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ecc:	1ac0      	subs	r0, r0, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ed4:	6a21      	ldr	r1, [r4, #32]
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b0      	blx	r6
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	d106      	bne.n	8006eee <__sflush_r+0x66>
 8006ee0:	6829      	ldr	r1, [r5, #0]
 8006ee2:	291d      	cmp	r1, #29
 8006ee4:	d82c      	bhi.n	8006f40 <__sflush_r+0xb8>
 8006ee6:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <__sflush_r+0x108>)
 8006ee8:	40ca      	lsrs	r2, r1
 8006eea:	07d6      	lsls	r6, r2, #31
 8006eec:	d528      	bpl.n	8006f40 <__sflush_r+0xb8>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	6062      	str	r2, [r4, #4]
 8006ef2:	04d9      	lsls	r1, r3, #19
 8006ef4:	6922      	ldr	r2, [r4, #16]
 8006ef6:	6022      	str	r2, [r4, #0]
 8006ef8:	d504      	bpl.n	8006f04 <__sflush_r+0x7c>
 8006efa:	1c42      	adds	r2, r0, #1
 8006efc:	d101      	bne.n	8006f02 <__sflush_r+0x7a>
 8006efe:	682b      	ldr	r3, [r5, #0]
 8006f00:	b903      	cbnz	r3, 8006f04 <__sflush_r+0x7c>
 8006f02:	6560      	str	r0, [r4, #84]	; 0x54
 8006f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f06:	602f      	str	r7, [r5, #0]
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	d0ca      	beq.n	8006ea2 <__sflush_r+0x1a>
 8006f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f10:	4299      	cmp	r1, r3
 8006f12:	d002      	beq.n	8006f1a <__sflush_r+0x92>
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f9d5 	bl	80072c4 <_free_r>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	6360      	str	r0, [r4, #52]	; 0x34
 8006f1e:	e7c1      	b.n	8006ea4 <__sflush_r+0x1c>
 8006f20:	6a21      	ldr	r1, [r4, #32]
 8006f22:	2301      	movs	r3, #1
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b0      	blx	r6
 8006f28:	1c41      	adds	r1, r0, #1
 8006f2a:	d1c7      	bne.n	8006ebc <__sflush_r+0x34>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0c4      	beq.n	8006ebc <__sflush_r+0x34>
 8006f32:	2b1d      	cmp	r3, #29
 8006f34:	d001      	beq.n	8006f3a <__sflush_r+0xb2>
 8006f36:	2b16      	cmp	r3, #22
 8006f38:	d101      	bne.n	8006f3e <__sflush_r+0xb6>
 8006f3a:	602f      	str	r7, [r5, #0]
 8006f3c:	e7b1      	b.n	8006ea2 <__sflush_r+0x1a>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	e7ad      	b.n	8006ea4 <__sflush_r+0x1c>
 8006f48:	690f      	ldr	r7, [r1, #16]
 8006f4a:	2f00      	cmp	r7, #0
 8006f4c:	d0a9      	beq.n	8006ea2 <__sflush_r+0x1a>
 8006f4e:	0793      	lsls	r3, r2, #30
 8006f50:	680e      	ldr	r6, [r1, #0]
 8006f52:	bf08      	it	eq
 8006f54:	694b      	ldreq	r3, [r1, #20]
 8006f56:	600f      	str	r7, [r1, #0]
 8006f58:	bf18      	it	ne
 8006f5a:	2300      	movne	r3, #0
 8006f5c:	eba6 0807 	sub.w	r8, r6, r7
 8006f60:	608b      	str	r3, [r1, #8]
 8006f62:	f1b8 0f00 	cmp.w	r8, #0
 8006f66:	dd9c      	ble.n	8006ea2 <__sflush_r+0x1a>
 8006f68:	6a21      	ldr	r1, [r4, #32]
 8006f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f6c:	4643      	mov	r3, r8
 8006f6e:	463a      	mov	r2, r7
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b0      	blx	r6
 8006f74:	2800      	cmp	r0, #0
 8006f76:	dc06      	bgt.n	8006f86 <__sflush_r+0xfe>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f84:	e78e      	b.n	8006ea4 <__sflush_r+0x1c>
 8006f86:	4407      	add	r7, r0
 8006f88:	eba8 0800 	sub.w	r8, r8, r0
 8006f8c:	e7e9      	b.n	8006f62 <__sflush_r+0xda>
 8006f8e:	bf00      	nop
 8006f90:	20400001 	.word	0x20400001

08006f94 <_fflush_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	690b      	ldr	r3, [r1, #16]
 8006f98:	4605      	mov	r5, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	b913      	cbnz	r3, 8006fa4 <_fflush_r+0x10>
 8006f9e:	2500      	movs	r5, #0
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	b118      	cbz	r0, 8006fae <_fflush_r+0x1a>
 8006fa6:	6983      	ldr	r3, [r0, #24]
 8006fa8:	b90b      	cbnz	r3, 8006fae <_fflush_r+0x1a>
 8006faa:	f000 f887 	bl	80070bc <__sinit>
 8006fae:	4b14      	ldr	r3, [pc, #80]	; (8007000 <_fflush_r+0x6c>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	d11b      	bne.n	8006fec <_fflush_r+0x58>
 8006fb4:	686c      	ldr	r4, [r5, #4]
 8006fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0ef      	beq.n	8006f9e <_fflush_r+0xa>
 8006fbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fc0:	07d0      	lsls	r0, r2, #31
 8006fc2:	d404      	bmi.n	8006fce <_fflush_r+0x3a>
 8006fc4:	0599      	lsls	r1, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_fflush_r+0x3a>
 8006fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fca:	f000 f915 	bl	80071f8 <__retarget_lock_acquire_recursive>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	f7ff ff59 	bl	8006e88 <__sflush_r>
 8006fd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fd8:	07da      	lsls	r2, r3, #31
 8006fda:	4605      	mov	r5, r0
 8006fdc:	d4e0      	bmi.n	8006fa0 <_fflush_r+0xc>
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	059b      	lsls	r3, r3, #22
 8006fe2:	d4dd      	bmi.n	8006fa0 <_fflush_r+0xc>
 8006fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fe6:	f000 f908 	bl	80071fa <__retarget_lock_release_recursive>
 8006fea:	e7d9      	b.n	8006fa0 <_fflush_r+0xc>
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <_fflush_r+0x70>)
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d101      	bne.n	8006ff6 <_fflush_r+0x62>
 8006ff2:	68ac      	ldr	r4, [r5, #8]
 8006ff4:	e7df      	b.n	8006fb6 <_fflush_r+0x22>
 8006ff6:	4b04      	ldr	r3, [pc, #16]	; (8007008 <_fflush_r+0x74>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	bf08      	it	eq
 8006ffc:	68ec      	ldreq	r4, [r5, #12]
 8006ffe:	e7da      	b.n	8006fb6 <_fflush_r+0x22>
 8007000:	08007654 	.word	0x08007654
 8007004:	08007674 	.word	0x08007674
 8007008:	08007634 	.word	0x08007634

0800700c <std>:
 800700c:	2300      	movs	r3, #0
 800700e:	b510      	push	{r4, lr}
 8007010:	4604      	mov	r4, r0
 8007012:	e9c0 3300 	strd	r3, r3, [r0]
 8007016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800701a:	6083      	str	r3, [r0, #8]
 800701c:	8181      	strh	r1, [r0, #12]
 800701e:	6643      	str	r3, [r0, #100]	; 0x64
 8007020:	81c2      	strh	r2, [r0, #14]
 8007022:	6183      	str	r3, [r0, #24]
 8007024:	4619      	mov	r1, r3
 8007026:	2208      	movs	r2, #8
 8007028:	305c      	adds	r0, #92	; 0x5c
 800702a:	f7ff fdef 	bl	8006c0c <memset>
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <std+0x38>)
 8007030:	6263      	str	r3, [r4, #36]	; 0x24
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <std+0x3c>)
 8007034:	62a3      	str	r3, [r4, #40]	; 0x28
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <std+0x40>)
 8007038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800703a:	4b05      	ldr	r3, [pc, #20]	; (8007050 <std+0x44>)
 800703c:	6224      	str	r4, [r4, #32]
 800703e:	6323      	str	r3, [r4, #48]	; 0x30
 8007040:	bd10      	pop	{r4, pc}
 8007042:	bf00      	nop
 8007044:	08007439 	.word	0x08007439
 8007048:	0800745b 	.word	0x0800745b
 800704c:	08007493 	.word	0x08007493
 8007050:	080074b7 	.word	0x080074b7

08007054 <_cleanup_r>:
 8007054:	4901      	ldr	r1, [pc, #4]	; (800705c <_cleanup_r+0x8>)
 8007056:	f000 b8af 	b.w	80071b8 <_fwalk_reent>
 800705a:	bf00      	nop
 800705c:	08006f95 	.word	0x08006f95

08007060 <__sfmoreglue>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	1e4a      	subs	r2, r1, #1
 8007064:	2568      	movs	r5, #104	; 0x68
 8007066:	4355      	muls	r5, r2
 8007068:	460e      	mov	r6, r1
 800706a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800706e:	f000 f979 	bl	8007364 <_malloc_r>
 8007072:	4604      	mov	r4, r0
 8007074:	b140      	cbz	r0, 8007088 <__sfmoreglue+0x28>
 8007076:	2100      	movs	r1, #0
 8007078:	e9c0 1600 	strd	r1, r6, [r0]
 800707c:	300c      	adds	r0, #12
 800707e:	60a0      	str	r0, [r4, #8]
 8007080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007084:	f7ff fdc2 	bl	8006c0c <memset>
 8007088:	4620      	mov	r0, r4
 800708a:	bd70      	pop	{r4, r5, r6, pc}

0800708c <__sfp_lock_acquire>:
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <__sfp_lock_acquire+0x8>)
 800708e:	f000 b8b3 	b.w	80071f8 <__retarget_lock_acquire_recursive>
 8007092:	bf00      	nop
 8007094:	20018074 	.word	0x20018074

08007098 <__sfp_lock_release>:
 8007098:	4801      	ldr	r0, [pc, #4]	; (80070a0 <__sfp_lock_release+0x8>)
 800709a:	f000 b8ae 	b.w	80071fa <__retarget_lock_release_recursive>
 800709e:	bf00      	nop
 80070a0:	20018074 	.word	0x20018074

080070a4 <__sinit_lock_acquire>:
 80070a4:	4801      	ldr	r0, [pc, #4]	; (80070ac <__sinit_lock_acquire+0x8>)
 80070a6:	f000 b8a7 	b.w	80071f8 <__retarget_lock_acquire_recursive>
 80070aa:	bf00      	nop
 80070ac:	2001806f 	.word	0x2001806f

080070b0 <__sinit_lock_release>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__sinit_lock_release+0x8>)
 80070b2:	f000 b8a2 	b.w	80071fa <__retarget_lock_release_recursive>
 80070b6:	bf00      	nop
 80070b8:	2001806f 	.word	0x2001806f

080070bc <__sinit>:
 80070bc:	b510      	push	{r4, lr}
 80070be:	4604      	mov	r4, r0
 80070c0:	f7ff fff0 	bl	80070a4 <__sinit_lock_acquire>
 80070c4:	69a3      	ldr	r3, [r4, #24]
 80070c6:	b11b      	cbz	r3, 80070d0 <__sinit+0x14>
 80070c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070cc:	f7ff bff0 	b.w	80070b0 <__sinit_lock_release>
 80070d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070d4:	6523      	str	r3, [r4, #80]	; 0x50
 80070d6:	4b13      	ldr	r3, [pc, #76]	; (8007124 <__sinit+0x68>)
 80070d8:	4a13      	ldr	r2, [pc, #76]	; (8007128 <__sinit+0x6c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80070de:	42a3      	cmp	r3, r4
 80070e0:	bf04      	itt	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	61a3      	streq	r3, [r4, #24]
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 f820 	bl	800712c <__sfp>
 80070ec:	6060      	str	r0, [r4, #4]
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 f81c 	bl	800712c <__sfp>
 80070f4:	60a0      	str	r0, [r4, #8]
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 f818 	bl	800712c <__sfp>
 80070fc:	2200      	movs	r2, #0
 80070fe:	60e0      	str	r0, [r4, #12]
 8007100:	2104      	movs	r1, #4
 8007102:	6860      	ldr	r0, [r4, #4]
 8007104:	f7ff ff82 	bl	800700c <std>
 8007108:	68a0      	ldr	r0, [r4, #8]
 800710a:	2201      	movs	r2, #1
 800710c:	2109      	movs	r1, #9
 800710e:	f7ff ff7d 	bl	800700c <std>
 8007112:	68e0      	ldr	r0, [r4, #12]
 8007114:	2202      	movs	r2, #2
 8007116:	2112      	movs	r1, #18
 8007118:	f7ff ff78 	bl	800700c <std>
 800711c:	2301      	movs	r3, #1
 800711e:	61a3      	str	r3, [r4, #24]
 8007120:	e7d2      	b.n	80070c8 <__sinit+0xc>
 8007122:	bf00      	nop
 8007124:	08007630 	.word	0x08007630
 8007128:	08007055 	.word	0x08007055

0800712c <__sfp>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	4607      	mov	r7, r0
 8007130:	f7ff ffac 	bl	800708c <__sfp_lock_acquire>
 8007134:	4b1e      	ldr	r3, [pc, #120]	; (80071b0 <__sfp+0x84>)
 8007136:	681e      	ldr	r6, [r3, #0]
 8007138:	69b3      	ldr	r3, [r6, #24]
 800713a:	b913      	cbnz	r3, 8007142 <__sfp+0x16>
 800713c:	4630      	mov	r0, r6
 800713e:	f7ff ffbd 	bl	80070bc <__sinit>
 8007142:	3648      	adds	r6, #72	; 0x48
 8007144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007148:	3b01      	subs	r3, #1
 800714a:	d503      	bpl.n	8007154 <__sfp+0x28>
 800714c:	6833      	ldr	r3, [r6, #0]
 800714e:	b30b      	cbz	r3, 8007194 <__sfp+0x68>
 8007150:	6836      	ldr	r6, [r6, #0]
 8007152:	e7f7      	b.n	8007144 <__sfp+0x18>
 8007154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007158:	b9d5      	cbnz	r5, 8007190 <__sfp+0x64>
 800715a:	4b16      	ldr	r3, [pc, #88]	; (80071b4 <__sfp+0x88>)
 800715c:	60e3      	str	r3, [r4, #12]
 800715e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007162:	6665      	str	r5, [r4, #100]	; 0x64
 8007164:	f000 f847 	bl	80071f6 <__retarget_lock_init_recursive>
 8007168:	f7ff ff96 	bl	8007098 <__sfp_lock_release>
 800716c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007174:	6025      	str	r5, [r4, #0]
 8007176:	61a5      	str	r5, [r4, #24]
 8007178:	2208      	movs	r2, #8
 800717a:	4629      	mov	r1, r5
 800717c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007180:	f7ff fd44 	bl	8006c0c <memset>
 8007184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800718c:	4620      	mov	r0, r4
 800718e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007190:	3468      	adds	r4, #104	; 0x68
 8007192:	e7d9      	b.n	8007148 <__sfp+0x1c>
 8007194:	2104      	movs	r1, #4
 8007196:	4638      	mov	r0, r7
 8007198:	f7ff ff62 	bl	8007060 <__sfmoreglue>
 800719c:	4604      	mov	r4, r0
 800719e:	6030      	str	r0, [r6, #0]
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d1d5      	bne.n	8007150 <__sfp+0x24>
 80071a4:	f7ff ff78 	bl	8007098 <__sfp_lock_release>
 80071a8:	230c      	movs	r3, #12
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	e7ee      	b.n	800718c <__sfp+0x60>
 80071ae:	bf00      	nop
 80071b0:	08007630 	.word	0x08007630
 80071b4:	ffff0001 	.word	0xffff0001

080071b8 <_fwalk_reent>:
 80071b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071bc:	4606      	mov	r6, r0
 80071be:	4688      	mov	r8, r1
 80071c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071c4:	2700      	movs	r7, #0
 80071c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071ca:	f1b9 0901 	subs.w	r9, r9, #1
 80071ce:	d505      	bpl.n	80071dc <_fwalk_reent+0x24>
 80071d0:	6824      	ldr	r4, [r4, #0]
 80071d2:	2c00      	cmp	r4, #0
 80071d4:	d1f7      	bne.n	80071c6 <_fwalk_reent+0xe>
 80071d6:	4638      	mov	r0, r7
 80071d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071dc:	89ab      	ldrh	r3, [r5, #12]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d907      	bls.n	80071f2 <_fwalk_reent+0x3a>
 80071e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071e6:	3301      	adds	r3, #1
 80071e8:	d003      	beq.n	80071f2 <_fwalk_reent+0x3a>
 80071ea:	4629      	mov	r1, r5
 80071ec:	4630      	mov	r0, r6
 80071ee:	47c0      	blx	r8
 80071f0:	4307      	orrs	r7, r0
 80071f2:	3568      	adds	r5, #104	; 0x68
 80071f4:	e7e9      	b.n	80071ca <_fwalk_reent+0x12>

080071f6 <__retarget_lock_init_recursive>:
 80071f6:	4770      	bx	lr

080071f8 <__retarget_lock_acquire_recursive>:
 80071f8:	4770      	bx	lr

080071fa <__retarget_lock_release_recursive>:
 80071fa:	4770      	bx	lr

080071fc <__swhatbuf_r>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	460e      	mov	r6, r1
 8007200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007204:	2900      	cmp	r1, #0
 8007206:	b096      	sub	sp, #88	; 0x58
 8007208:	4614      	mov	r4, r2
 800720a:	461d      	mov	r5, r3
 800720c:	da07      	bge.n	800721e <__swhatbuf_r+0x22>
 800720e:	2300      	movs	r3, #0
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	89b3      	ldrh	r3, [r6, #12]
 8007214:	061a      	lsls	r2, r3, #24
 8007216:	d410      	bmi.n	800723a <__swhatbuf_r+0x3e>
 8007218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800721c:	e00e      	b.n	800723c <__swhatbuf_r+0x40>
 800721e:	466a      	mov	r2, sp
 8007220:	f000 f970 	bl	8007504 <_fstat_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	dbf2      	blt.n	800720e <__swhatbuf_r+0x12>
 8007228:	9a01      	ldr	r2, [sp, #4]
 800722a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800722e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007232:	425a      	negs	r2, r3
 8007234:	415a      	adcs	r2, r3
 8007236:	602a      	str	r2, [r5, #0]
 8007238:	e7ee      	b.n	8007218 <__swhatbuf_r+0x1c>
 800723a:	2340      	movs	r3, #64	; 0x40
 800723c:	2000      	movs	r0, #0
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	b016      	add	sp, #88	; 0x58
 8007242:	bd70      	pop	{r4, r5, r6, pc}

08007244 <__smakebuf_r>:
 8007244:	898b      	ldrh	r3, [r1, #12]
 8007246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007248:	079d      	lsls	r5, r3, #30
 800724a:	4606      	mov	r6, r0
 800724c:	460c      	mov	r4, r1
 800724e:	d507      	bpl.n	8007260 <__smakebuf_r+0x1c>
 8007250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	6123      	str	r3, [r4, #16]
 8007258:	2301      	movs	r3, #1
 800725a:	6163      	str	r3, [r4, #20]
 800725c:	b002      	add	sp, #8
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	ab01      	add	r3, sp, #4
 8007262:	466a      	mov	r2, sp
 8007264:	f7ff ffca 	bl	80071fc <__swhatbuf_r>
 8007268:	9900      	ldr	r1, [sp, #0]
 800726a:	4605      	mov	r5, r0
 800726c:	4630      	mov	r0, r6
 800726e:	f000 f879 	bl	8007364 <_malloc_r>
 8007272:	b948      	cbnz	r0, 8007288 <__smakebuf_r+0x44>
 8007274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007278:	059a      	lsls	r2, r3, #22
 800727a:	d4ef      	bmi.n	800725c <__smakebuf_r+0x18>
 800727c:	f023 0303 	bic.w	r3, r3, #3
 8007280:	f043 0302 	orr.w	r3, r3, #2
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	e7e3      	b.n	8007250 <__smakebuf_r+0xc>
 8007288:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <__smakebuf_r+0x7c>)
 800728a:	62b3      	str	r3, [r6, #40]	; 0x28
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	6020      	str	r0, [r4, #0]
 8007290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007294:	81a3      	strh	r3, [r4, #12]
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	6163      	str	r3, [r4, #20]
 800729a:	9b01      	ldr	r3, [sp, #4]
 800729c:	6120      	str	r0, [r4, #16]
 800729e:	b15b      	cbz	r3, 80072b8 <__smakebuf_r+0x74>
 80072a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a4:	4630      	mov	r0, r6
 80072a6:	f000 f93f 	bl	8007528 <_isatty_r>
 80072aa:	b128      	cbz	r0, 80072b8 <__smakebuf_r+0x74>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f023 0303 	bic.w	r3, r3, #3
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	89a0      	ldrh	r0, [r4, #12]
 80072ba:	4305      	orrs	r5, r0
 80072bc:	81a5      	strh	r5, [r4, #12]
 80072be:	e7cd      	b.n	800725c <__smakebuf_r+0x18>
 80072c0:	08007055 	.word	0x08007055

080072c4 <_free_r>:
 80072c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072c6:	2900      	cmp	r1, #0
 80072c8:	d048      	beq.n	800735c <_free_r+0x98>
 80072ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ce:	9001      	str	r0, [sp, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f1a1 0404 	sub.w	r4, r1, #4
 80072d6:	bfb8      	it	lt
 80072d8:	18e4      	addlt	r4, r4, r3
 80072da:	f000 f947 	bl	800756c <__malloc_lock>
 80072de:	4a20      	ldr	r2, [pc, #128]	; (8007360 <_free_r+0x9c>)
 80072e0:	9801      	ldr	r0, [sp, #4]
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	4615      	mov	r5, r2
 80072e6:	b933      	cbnz	r3, 80072f6 <_free_r+0x32>
 80072e8:	6063      	str	r3, [r4, #4]
 80072ea:	6014      	str	r4, [r2, #0]
 80072ec:	b003      	add	sp, #12
 80072ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f2:	f000 b941 	b.w	8007578 <__malloc_unlock>
 80072f6:	42a3      	cmp	r3, r4
 80072f8:	d90b      	bls.n	8007312 <_free_r+0x4e>
 80072fa:	6821      	ldr	r1, [r4, #0]
 80072fc:	1862      	adds	r2, r4, r1
 80072fe:	4293      	cmp	r3, r2
 8007300:	bf04      	itt	eq
 8007302:	681a      	ldreq	r2, [r3, #0]
 8007304:	685b      	ldreq	r3, [r3, #4]
 8007306:	6063      	str	r3, [r4, #4]
 8007308:	bf04      	itt	eq
 800730a:	1852      	addeq	r2, r2, r1
 800730c:	6022      	streq	r2, [r4, #0]
 800730e:	602c      	str	r4, [r5, #0]
 8007310:	e7ec      	b.n	80072ec <_free_r+0x28>
 8007312:	461a      	mov	r2, r3
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	b10b      	cbz	r3, 800731c <_free_r+0x58>
 8007318:	42a3      	cmp	r3, r4
 800731a:	d9fa      	bls.n	8007312 <_free_r+0x4e>
 800731c:	6811      	ldr	r1, [r2, #0]
 800731e:	1855      	adds	r5, r2, r1
 8007320:	42a5      	cmp	r5, r4
 8007322:	d10b      	bne.n	800733c <_free_r+0x78>
 8007324:	6824      	ldr	r4, [r4, #0]
 8007326:	4421      	add	r1, r4
 8007328:	1854      	adds	r4, r2, r1
 800732a:	42a3      	cmp	r3, r4
 800732c:	6011      	str	r1, [r2, #0]
 800732e:	d1dd      	bne.n	80072ec <_free_r+0x28>
 8007330:	681c      	ldr	r4, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	6053      	str	r3, [r2, #4]
 8007336:	4421      	add	r1, r4
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	e7d7      	b.n	80072ec <_free_r+0x28>
 800733c:	d902      	bls.n	8007344 <_free_r+0x80>
 800733e:	230c      	movs	r3, #12
 8007340:	6003      	str	r3, [r0, #0]
 8007342:	e7d3      	b.n	80072ec <_free_r+0x28>
 8007344:	6825      	ldr	r5, [r4, #0]
 8007346:	1961      	adds	r1, r4, r5
 8007348:	428b      	cmp	r3, r1
 800734a:	bf04      	itt	eq
 800734c:	6819      	ldreq	r1, [r3, #0]
 800734e:	685b      	ldreq	r3, [r3, #4]
 8007350:	6063      	str	r3, [r4, #4]
 8007352:	bf04      	itt	eq
 8007354:	1949      	addeq	r1, r1, r5
 8007356:	6021      	streq	r1, [r4, #0]
 8007358:	6054      	str	r4, [r2, #4]
 800735a:	e7c7      	b.n	80072ec <_free_r+0x28>
 800735c:	b003      	add	sp, #12
 800735e:	bd30      	pop	{r4, r5, pc}
 8007360:	200027ac 	.word	0x200027ac

08007364 <_malloc_r>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	1ccd      	adds	r5, r1, #3
 8007368:	f025 0503 	bic.w	r5, r5, #3
 800736c:	3508      	adds	r5, #8
 800736e:	2d0c      	cmp	r5, #12
 8007370:	bf38      	it	cc
 8007372:	250c      	movcc	r5, #12
 8007374:	2d00      	cmp	r5, #0
 8007376:	4606      	mov	r6, r0
 8007378:	db01      	blt.n	800737e <_malloc_r+0x1a>
 800737a:	42a9      	cmp	r1, r5
 800737c:	d903      	bls.n	8007386 <_malloc_r+0x22>
 800737e:	230c      	movs	r3, #12
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	2000      	movs	r0, #0
 8007384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007386:	f000 f8f1 	bl	800756c <__malloc_lock>
 800738a:	4921      	ldr	r1, [pc, #132]	; (8007410 <_malloc_r+0xac>)
 800738c:	680a      	ldr	r2, [r1, #0]
 800738e:	4614      	mov	r4, r2
 8007390:	b99c      	cbnz	r4, 80073ba <_malloc_r+0x56>
 8007392:	4f20      	ldr	r7, [pc, #128]	; (8007414 <_malloc_r+0xb0>)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	b923      	cbnz	r3, 80073a2 <_malloc_r+0x3e>
 8007398:	4621      	mov	r1, r4
 800739a:	4630      	mov	r0, r6
 800739c:	f000 f83c 	bl	8007418 <_sbrk_r>
 80073a0:	6038      	str	r0, [r7, #0]
 80073a2:	4629      	mov	r1, r5
 80073a4:	4630      	mov	r0, r6
 80073a6:	f000 f837 	bl	8007418 <_sbrk_r>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d123      	bne.n	80073f6 <_malloc_r+0x92>
 80073ae:	230c      	movs	r3, #12
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 f8e0 	bl	8007578 <__malloc_unlock>
 80073b8:	e7e3      	b.n	8007382 <_malloc_r+0x1e>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	1b5b      	subs	r3, r3, r5
 80073be:	d417      	bmi.n	80073f0 <_malloc_r+0x8c>
 80073c0:	2b0b      	cmp	r3, #11
 80073c2:	d903      	bls.n	80073cc <_malloc_r+0x68>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	441c      	add	r4, r3
 80073c8:	6025      	str	r5, [r4, #0]
 80073ca:	e004      	b.n	80073d6 <_malloc_r+0x72>
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	42a2      	cmp	r2, r4
 80073d0:	bf0c      	ite	eq
 80073d2:	600b      	streq	r3, [r1, #0]
 80073d4:	6053      	strne	r3, [r2, #4]
 80073d6:	4630      	mov	r0, r6
 80073d8:	f000 f8ce 	bl	8007578 <__malloc_unlock>
 80073dc:	f104 000b 	add.w	r0, r4, #11
 80073e0:	1d23      	adds	r3, r4, #4
 80073e2:	f020 0007 	bic.w	r0, r0, #7
 80073e6:	1ac2      	subs	r2, r0, r3
 80073e8:	d0cc      	beq.n	8007384 <_malloc_r+0x20>
 80073ea:	1a1b      	subs	r3, r3, r0
 80073ec:	50a3      	str	r3, [r4, r2]
 80073ee:	e7c9      	b.n	8007384 <_malloc_r+0x20>
 80073f0:	4622      	mov	r2, r4
 80073f2:	6864      	ldr	r4, [r4, #4]
 80073f4:	e7cc      	b.n	8007390 <_malloc_r+0x2c>
 80073f6:	1cc4      	adds	r4, r0, #3
 80073f8:	f024 0403 	bic.w	r4, r4, #3
 80073fc:	42a0      	cmp	r0, r4
 80073fe:	d0e3      	beq.n	80073c8 <_malloc_r+0x64>
 8007400:	1a21      	subs	r1, r4, r0
 8007402:	4630      	mov	r0, r6
 8007404:	f000 f808 	bl	8007418 <_sbrk_r>
 8007408:	3001      	adds	r0, #1
 800740a:	d1dd      	bne.n	80073c8 <_malloc_r+0x64>
 800740c:	e7cf      	b.n	80073ae <_malloc_r+0x4a>
 800740e:	bf00      	nop
 8007410:	200027ac 	.word	0x200027ac
 8007414:	200027b0 	.word	0x200027b0

08007418 <_sbrk_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d06      	ldr	r5, [pc, #24]	; (8007434 <_sbrk_r+0x1c>)
 800741c:	2300      	movs	r3, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	602b      	str	r3, [r5, #0]
 8007424:	f7f9 fd24 	bl	8000e70 <_sbrk>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_sbrk_r+0x1a>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_sbrk_r+0x1a>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	20018078 	.word	0x20018078

08007438 <__sread>:
 8007438:	b510      	push	{r4, lr}
 800743a:	460c      	mov	r4, r1
 800743c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007440:	f000 f8a0 	bl	8007584 <_read_r>
 8007444:	2800      	cmp	r0, #0
 8007446:	bfab      	itete	ge
 8007448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800744a:	89a3      	ldrhlt	r3, [r4, #12]
 800744c:	181b      	addge	r3, r3, r0
 800744e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007452:	bfac      	ite	ge
 8007454:	6563      	strge	r3, [r4, #84]	; 0x54
 8007456:	81a3      	strhlt	r3, [r4, #12]
 8007458:	bd10      	pop	{r4, pc}

0800745a <__swrite>:
 800745a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745e:	461f      	mov	r7, r3
 8007460:	898b      	ldrh	r3, [r1, #12]
 8007462:	05db      	lsls	r3, r3, #23
 8007464:	4605      	mov	r5, r0
 8007466:	460c      	mov	r4, r1
 8007468:	4616      	mov	r6, r2
 800746a:	d505      	bpl.n	8007478 <__swrite+0x1e>
 800746c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007470:	2302      	movs	r3, #2
 8007472:	2200      	movs	r2, #0
 8007474:	f000 f868 	bl	8007548 <_lseek_r>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800747e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	4632      	mov	r2, r6
 8007486:	463b      	mov	r3, r7
 8007488:	4628      	mov	r0, r5
 800748a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800748e:	f000 b817 	b.w	80074c0 <_write_r>

08007492 <__sseek>:
 8007492:	b510      	push	{r4, lr}
 8007494:	460c      	mov	r4, r1
 8007496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800749a:	f000 f855 	bl	8007548 <_lseek_r>
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	bf15      	itete	ne
 80074a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074ae:	81a3      	strheq	r3, [r4, #12]
 80074b0:	bf18      	it	ne
 80074b2:	81a3      	strhne	r3, [r4, #12]
 80074b4:	bd10      	pop	{r4, pc}

080074b6 <__sclose>:
 80074b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ba:	f000 b813 	b.w	80074e4 <_close_r>
	...

080074c0 <_write_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d07      	ldr	r5, [pc, #28]	; (80074e0 <_write_r+0x20>)
 80074c4:	4604      	mov	r4, r0
 80074c6:	4608      	mov	r0, r1
 80074c8:	4611      	mov	r1, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7f9 fc7d 	bl	8000dce <_write>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_write_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_write_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20018078 	.word	0x20018078

080074e4 <_close_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d06      	ldr	r5, [pc, #24]	; (8007500 <_close_r+0x1c>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7f9 fc89 	bl	8000e06 <_close>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_close_r+0x1a>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_close_r+0x1a>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	20018078 	.word	0x20018078

08007504 <_fstat_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d07      	ldr	r5, [pc, #28]	; (8007524 <_fstat_r+0x20>)
 8007508:	2300      	movs	r3, #0
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	4611      	mov	r1, r2
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	f7f9 fc84 	bl	8000e1e <_fstat>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	d102      	bne.n	8007520 <_fstat_r+0x1c>
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	b103      	cbz	r3, 8007520 <_fstat_r+0x1c>
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	bd38      	pop	{r3, r4, r5, pc}
 8007522:	bf00      	nop
 8007524:	20018078 	.word	0x20018078

08007528 <_isatty_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	; (8007544 <_isatty_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7f9 fc83 	bl	8000e3e <_isatty>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_isatty_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_isatty_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20018078 	.word	0x20018078

08007548 <_lseek_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d07      	ldr	r5, [pc, #28]	; (8007568 <_lseek_r+0x20>)
 800754c:	4604      	mov	r4, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	2200      	movs	r2, #0
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7f9 fc7c 	bl	8000e54 <_lseek>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_lseek_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_lseek_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20018078 	.word	0x20018078

0800756c <__malloc_lock>:
 800756c:	4801      	ldr	r0, [pc, #4]	; (8007574 <__malloc_lock+0x8>)
 800756e:	f7ff be43 	b.w	80071f8 <__retarget_lock_acquire_recursive>
 8007572:	bf00      	nop
 8007574:	20018070 	.word	0x20018070

08007578 <__malloc_unlock>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__malloc_unlock+0x8>)
 800757a:	f7ff be3e 	b.w	80071fa <__retarget_lock_release_recursive>
 800757e:	bf00      	nop
 8007580:	20018070 	.word	0x20018070

08007584 <_read_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d07      	ldr	r5, [pc, #28]	; (80075a4 <_read_r+0x20>)
 8007588:	4604      	mov	r4, r0
 800758a:	4608      	mov	r0, r1
 800758c:	4611      	mov	r1, r2
 800758e:	2200      	movs	r2, #0
 8007590:	602a      	str	r2, [r5, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	f7f9 fbfe 	bl	8000d94 <_read>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_read_r+0x1e>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_read_r+0x1e>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	20018078 	.word	0x20018078

080075a8 <_init>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	bf00      	nop
 80075ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ae:	bc08      	pop	{r3}
 80075b0:	469e      	mov	lr, r3
 80075b2:	4770      	bx	lr

080075b4 <_fini>:
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	bf00      	nop
 80075b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ba:	bc08      	pop	{r3}
 80075bc:	469e      	mov	lr, r3
 80075be:	4770      	bx	lr
