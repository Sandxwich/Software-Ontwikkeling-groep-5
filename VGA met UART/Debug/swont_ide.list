
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800501c  0800501c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005024  08005024  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800502c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013670  20000070  0800509c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200136e0  0800509c  000236e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001381c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbf  00000000  00000000  000338bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00036480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00037198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002361c  00000000  00000000  00037d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f961  00000000  00000000  0005b394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb82a  00000000  00000000  0006acf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013651f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b84  00000000  00000000  00136574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f7c 	.word	0x08004f7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004f7c 	.word	0x08004f7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x3c>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x3c>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x3c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2044      	movs	r0, #68	; 0x44
 80004e8:	f000 ff63 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80004ec:	2044      	movs	r0, #68	; 0x44
 80004ee:	f000 ff7c 	bl	80013ea <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b32      	ldr	r3, [pc, #200]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a31      	ldr	r2, [pc, #196]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2a      	ldr	r2, [pc, #168]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000558:	f043 0310 	orr.w	r3, r3, #16
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0310 	and.w	r3, r3, #16
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800058e:	f001 fc75 	bl	8001e7c <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <MX_GPIO_Init+0xec>)
 800059a:	f001 fc6f 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800059e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80005a2:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_GPIO_Init+0xe8>)
 80005b8:	f001 fac4 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_GPIO_Init+0xec>)
 80005d6:	f001 fab5 	bl	8001b44 <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40020400 	.word	0x40020400

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fd8f 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f88f 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f7ff ff7f 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f7ff ff5d 	bl	80004c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000606:	f000 fadd 	bl	8000bc4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800060a:	f000 fb2b 	bl	8000c64 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800060e:	f000 fc41 	bl	8000e94 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000612:	f000 fce3 	bl	8000fdc <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	f000 fd32 	bl	8001080 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 800061c:	220a      	movs	r2, #10
 800061e:	210a      	movs	r1, #10
 8000620:	200a      	movs	r0, #10
 8000622:	f000 fd51 	bl	80010c8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fd4c 	bl	80010c8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	f240 103f 	movw	r0, #319	; 0x13f
 8000638:	f000 fd46 	bl	80010c8 <UB_VGA_SetPixel>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e008      	b.n	8000654 <main+0x64>
	  input.line_rx_buffer[i] = 0;
 8000642:	4a33      	ldr	r2, [pc, #204]	; (8000710 <main+0x120>)
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	3301      	adds	r3, #1
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800065a:	dbf2      	blt.n	8000642 <main+0x52>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800065c:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <main+0x120>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000662:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <main+0x120>)
 8000664:	2200      	movs	r2, #0
 8000666:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <main+0x120>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000672:	2201      	movs	r2, #1
 8000674:	4926      	ldr	r1, [pc, #152]	; (8000710 <main+0x120>)
 8000676:	4827      	ldr	r0, [pc, #156]	; (8000714 <main+0x124>)
 8000678:	f003 f90c 	bl	8003894 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 800067c:	23ff      	movs	r3, #255	; 0xff
 800067e:	72fb      	strb	r3, [r7, #11]
  unsigned int j =0;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <main+0x120>)
 8000686:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800068a:	2bff      	cmp	r3, #255	; 0xff
 800068c:	d1fa      	bne.n	8000684 <main+0x94>
	  {
		  // Do some stuff
		  printf("yes\n");
 800068e:	4822      	ldr	r0, [pc, #136]	; (8000718 <main+0x128>)
 8000690:	f004 f81c 	bl	80046cc <puts>
		  switch (j++)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	2b07      	cmp	r3, #7
 800069c:	d82a      	bhi.n	80006f4 <main+0x104>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <main+0xb4>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	080006c5 	.word	0x080006c5
 80006a8:	080006cb 	.word	0x080006cb
 80006ac:	080006d1 	.word	0x080006d1
 80006b0:	080006d7 	.word	0x080006d7
 80006b4:	080006dd 	.word	0x080006dd
 80006b8:	080006e3 	.word	0x080006e3
 80006bc:	080006e9 	.word	0x080006e9
 80006c0:	080006ef 	.word	0x080006ef
		  {
		  case 0:
		  {
			  colorTest=VGA_COL_BLACK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	72fb      	strb	r3, [r7, #11]
			  break;
 80006c8:	e014      	b.n	80006f4 <main+0x104>
		  }

		  case 1: colorTest=VGA_COL_BLUE; break;
 80006ca:	2303      	movs	r3, #3
 80006cc:	72fb      	strb	r3, [r7, #11]
 80006ce:	e011      	b.n	80006f4 <main+0x104>

		  case 2: colorTest=VGA_COL_GREEN; break;
 80006d0:	231c      	movs	r3, #28
 80006d2:	72fb      	strb	r3, [r7, #11]
 80006d4:	e00e      	b.n	80006f4 <main+0x104>

		  case 3: colorTest=VGA_COL_RED; break;
 80006d6:	23e0      	movs	r3, #224	; 0xe0
 80006d8:	72fb      	strb	r3, [r7, #11]
 80006da:	e00b      	b.n	80006f4 <main+0x104>

		  case 4: colorTest=VGA_COL_WHITE; break;
 80006dc:	23ff      	movs	r3, #255	; 0xff
 80006de:	72fb      	strb	r3, [r7, #11]
 80006e0:	e008      	b.n	80006f4 <main+0x104>

		  case 5: colorTest=VGA_COL_CYAN; break;
 80006e2:	231f      	movs	r3, #31
 80006e4:	72fb      	strb	r3, [r7, #11]
 80006e6:	e005      	b.n	80006f4 <main+0x104>

		  case 6: colorTest=VGA_COL_MAGENTA; break;
 80006e8:	23e3      	movs	r3, #227	; 0xe3
 80006ea:	72fb      	strb	r3, [r7, #11]
 80006ec:	e002      	b.n	80006f4 <main+0x104>

		  case 7: colorTest=VGA_COL_YELLOW; break;
 80006ee:	23fc      	movs	r3, #252	; 0xfc
 80006f0:	72fb      	strb	r3, [r7, #11]
 80006f2:	bf00      	nop

		  }
		  UB_VGA_FillScreen(colorTest);
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fcc2 	bl	8001080 <UB_VGA_FillScreen>
		  if (j==7) j = 0;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b07      	cmp	r3, #7
 8000700:	d101      	bne.n	8000706 <main+0x116>
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000706:	4b02      	ldr	r3, [pc, #8]	; (8000710 <main+0x120>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 800070e:	e7b9      	b.n	8000684 <main+0x94>
 8000710:	20000098 	.word	0x20000098
 8000714:	20000990 	.word	0x20000990
 8000718:	08004f94 	.word	0x08004f94

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f003 ff58 	bl	80045e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd0>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000790:	23a8      	movs	r3, #168	; 0xa8
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fb85 	bl	8001eb0 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 f832 	bl	8000814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2105      	movs	r1, #5
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fdde 	bl	8002390 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007da:	f000 f81b 	bl	8000814 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80007f8:	1d39      	adds	r1, r7, #4
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	2201      	movs	r2, #1
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <__io_putchar+0x20>)
 8000802:	f002 ffae 	bl	8003762 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000806:	687b      	ldr	r3, [r7, #4]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000990 	.word	0x20000990

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 fc78 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008d4:	4828      	ldr	r0, [pc, #160]	; (8000978 <TIM2_IRQHandler+0xa8>)
 80008d6:	f002 f893 	bl	8002a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <TIM2_IRQHandler+0xa8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f06f 0208 	mvn.w	r2, #8
 80008e2:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <TIM2_IRQHandler+0xac>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <TIM2_IRQHandler+0xac>)
 80008ee:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <TIM2_IRQHandler+0xac>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80008f8:	d905      	bls.n	8000906 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <TIM2_IRQHandler+0xac>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000900:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <TIM2_IRQHandler+0xb0>)
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <TIM2_IRQHandler+0xac>)
 8000904:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <TIM2_IRQHandler+0xac>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d802      	bhi.n	8000914 <TIM2_IRQHandler+0x44>
 800090e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000912:	e001      	b.n	8000918 <TIM2_IRQHandler+0x48>
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <TIM2_IRQHandler+0xb4>)
 800091a:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <TIM2_IRQHandler+0xac>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	2b23      	cmp	r3, #35	; 0x23
 8000922:	d927      	bls.n	8000974 <TIM2_IRQHandler+0xa4>
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <TIM2_IRQHandler+0xac>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	f240 2202 	movw	r2, #514	; 0x202
 800092c:	4293      	cmp	r3, r2
 800092e:	d821      	bhi.n	8000974 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000930:	4a15      	ldr	r2, [pc, #84]	; (8000988 <TIM2_IRQHandler+0xb8>)
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <TIM2_IRQHandler+0xac>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <TIM2_IRQHandler+0xb8>)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <TIM2_IRQHandler+0xac>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <TIM2_IRQHandler+0xbc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <TIM2_IRQHandler+0xbc>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <TIM2_IRQHandler+0xc0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <TIM2_IRQHandler+0xc0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f042 0201 	orr.w	r2, r2, #1
 800095a:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <TIM2_IRQHandler+0xac>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <TIM2_IRQHandler+0xac>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000970:	4a02      	ldr	r2, [pc, #8]	; (800097c <TIM2_IRQHandler+0xac>)
 8000972:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000950 	.word	0x20000950
 800097c:	200009d0 	.word	0x200009d0
 8000980:	200009dc 	.word	0x200009dc
 8000984:	40020400 	.word	0x40020400
 8000988:	40026488 	.word	0x40026488
 800098c:	40010000 	.word	0x40010000
 8000990:	200008f0 	.word	0x200008f0

08000994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <USART2_IRQHandler+0x70>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b0a      	cmp	r3, #10
 80009a4:	d026      	beq.n	80009f4 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b0d      	cmp	r3, #13
 80009aa:	d002      	beq.n	80009b2 <USART2_IRQHandler+0x1e>
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b2e      	cmp	r3, #46	; 0x2e
 80009b0:	d10e      	bne.n	80009d0 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009b4:	22ff      	movs	r2, #255	; 0xff
 80009b6:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80009c0:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009c2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80009ce:	e011      	b.n	80009f4 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009e0:	4413      	add	r3, r2
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <USART2_IRQHandler+0x74>)
 80009f0:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <USART2_IRQHandler+0x78>)
 80009f6:	f002 ffa3 	bl	8003940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40004400 	.word	0x40004400
 8000a08:	20000098 	.word	0x20000098
 8000a0c:	20000990 	.word	0x20000990

08000a10 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <DMA2_Stream5_IRQHandler+0x48>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6a1a      	ldr	r2, [r3, #32]
 8000a1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000a1e:	4013      	ands	r3, r2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10f      	bne.n	8000a44 <DMA2_Stream5_IRQHandler+0x34>
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <DMA2_Stream5_IRQHandler+0x48>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6a1a      	ldr	r2, [r3, #32]
 8000a2a:	f240 4344 	movw	r3, #1092	; 0x444
 8000a2e:	4013      	ands	r3, r2
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d107      	bne.n	8000a44 <DMA2_Stream5_IRQHandler+0x34>
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <DMA2_Stream5_IRQHandler+0x48>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <DMA2_Stream5_IRQHandler+0x48>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f022 0201 	bic.w	r2, r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <DMA2_Stream5_IRQHandler+0x4c>)
 8000a46:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <DMA2_Stream5_IRQHandler+0x50>)
 8000a4e:	f000 fe0f 	bl	8001670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200008b0 	.word	0x200008b0
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	200008f0 	.word	0x200008f0

08000a64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e00a      	b.n	8000a8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf0      	blt.n	8000a76 <_read+0x12>
	}

return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	e009      	b.n	8000ac4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fe99 	bl	80007f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf1      	blt.n	8000ab0 <_write+0x12>
	}
	return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_close>:

int _close(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afe:	605a      	str	r2, [r3, #4]
	return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_isatty>:

int _isatty(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
	return 1;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x50>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x16>
		heap_end = &end;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <_sbrk+0x50>)
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <_sbrk+0x54>)
 8000b54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <_sbrk+0x50>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <_sbrk+0x50>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	466a      	mov	r2, sp
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d907      	bls.n	8000b7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b6a:	f003 fd0f 	bl	800458c <__errno>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	220c      	movs	r2, #12
 8000b72:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b78:	e006      	b.n	8000b88 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <_sbrk+0x50>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <_sbrk+0x50>)
 8000b84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000008c 	.word	0x2000008c
 8000b94:	200136e0 	.word	0x200136e0

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <SystemInit+0x28>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <SystemInit+0x28>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SystemInit+0x28>)
 8000bae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000be4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000bf4:	220b      	movs	r2, #11
 8000bf6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000c0c:	f001 fdbc 	bl	8002788 <HAL_TIM_Base_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000c16:	f7ff fdfd 	bl	8000814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4619      	mov	r1, r3
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000c28:	f002 f8b8 	bl	8002d9c <HAL_TIM_ConfigClockSource>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000c32:	f7ff fdef 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_TIM1_Init+0x98>)
 8000c44:	f002 fcb0 	bl	80035a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f7ff fde1 	bl	8000814 <Error_Handler>
  }

}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200008b0 	.word	0x200008b0
 8000c60:	40010000 	.word	0x40010000

08000c64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000c9c:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000ca0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cae:	4820      	ldr	r0, [pc, #128]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000cb0:	f001 fdb9 	bl	8002826 <HAL_TIM_PWM_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cba:	f7ff fdab 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4818      	ldr	r0, [pc, #96]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000cce:	f002 fc6b 	bl	80035a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000cd8:	f7ff fd9c 	bl	8000814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cdc:	2360      	movs	r3, #96	; 0x60
 8000cde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000ce0:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480e      	ldr	r0, [pc, #56]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000cf6:	f001 ff8b 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d00:	f7ff fd88 	bl	8000814 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000d04:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	220c      	movs	r2, #12
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000d12:	f001 ff7d 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000d1c:	f7ff fd7a 	bl	8000814 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <MX_TIM2_Init+0xcc>)
 8000d22:	f000 f87f 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000950 	.word	0x20000950

08000d34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_TIM_Base_MspInit+0x94>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d13c      	bne.n	8000dc0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_TIM_Base_MspInit+0x98>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <HAL_TIM_Base_MspInit+0x98>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_TIM_Base_MspInit+0x98>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d66:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d6a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d72:	2240      	movs	r2, #64	; 0x40
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d82:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d9c:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000da6:	f000 fb3b 	bl	8001420 <HAL_DMA_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000db0:	f7ff fd30 	bl	8000814 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000db8:	621a      	str	r2, [r3, #32]
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <HAL_TIM_Base_MspInit+0x9c>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	200008f0 	.word	0x200008f0
 8000dd4:	40026488 	.word	0x40026488

08000dd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de8:	d115      	bne.n	8000e16 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_TIM_PWM_MspInit+0x48>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_TIM_PWM_MspInit+0x48>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_TIM_PWM_MspInit+0x48>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	201c      	movs	r0, #28
 8000e0c:	f000 fad1 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e10:	201c      	movs	r0, #28
 8000e12:	f000 faea 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e44:	d11e      	bne.n	8000e84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_TIM_MspPostInit+0x68>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_TIM_MspPostInit+0x68>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_TIM_MspPostInit+0x68>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <HAL_TIM_MspPostInit+0x6c>)
 8000e80:	f000 fe60 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	3720      	adds	r7, #32
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400

08000e94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <MX_USART2_UART_Init+0x50>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	f002 fbfc 	bl	80036c8 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ed6:	f7ff fc9d 	bl	8000814 <Error_Handler>
  }

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000990 	.word	0x20000990
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_UART_MspInit+0x94>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d133      	bne.n	8000f72 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_UART_MspInit+0x98>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_UART_MspInit+0x98>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_UART_MspInit+0x98>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_UART_MspInit+0x98>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <HAL_UART_MspInit+0x98>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_UART_MspInit+0x98>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f42:	230c      	movs	r3, #12
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f52:	2307      	movs	r3, #7
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <HAL_UART_MspInit+0x9c>)
 8000f5e:	f000 fdf1 	bl	8001b44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2026      	movs	r0, #38	; 0x26
 8000f68:	f000 fa23 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f6c:	2026      	movs	r0, #38	; 0x26
 8000f6e:	f000 fa3c 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40004400 	.word	0x40004400
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000

08000f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f8e:	e003      	b.n	8000f98 <LoopCopyDataInit>

08000f90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f96:	3104      	adds	r1, #4

08000f98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fa0:	d3f6      	bcc.n	8000f90 <CopyDataInit>
  ldr  r2, =_sbss
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fa4:	e002      	b.n	8000fac <LoopFillZerobss>

08000fa6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fa8:	f842 3b04 	str.w	r3, [r2], #4

08000fac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fb0:	d3f9      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fb2:	f7ff fdf1 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f003 faef 	bl	8004598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fb19 	bl	80005f0 <main>
  bx  lr    
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fc4:	0800502c 	.word	0x0800502c
  ldr  r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fcc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000fd0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000fd4:	200136e0 	.word	0x200136e0

08000fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC_IRQHandler>
	...

08000fdc <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <UB_VGA_Screen_Init+0x84>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <UB_VGA_Screen_Init+0x84>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <UB_VGA_Screen_Init+0x84>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <UB_VGA_Screen_Init+0x88>)
 8000ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff8:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8000ffa:	481b      	ldr	r0, [pc, #108]	; (8001068 <UB_VGA_Screen_Init+0x8c>)
 8000ffc:	f001 fbef 	bl	80027de <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001000:	210c      	movs	r1, #12
 8001002:	4819      	ldr	r0, [pc, #100]	; (8001068 <UB_VGA_Screen_Init+0x8c>)
 8001004:	f001 fc3a 	bl	800287c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001008:	2108      	movs	r1, #8
 800100a:	4817      	ldr	r0, [pc, #92]	; (8001068 <UB_VGA_Screen_Init+0x8c>)
 800100c:	f001 fc74 	bl	80028f8 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <UB_VGA_Screen_Init+0x90>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <UB_VGA_Screen_Init+0x90>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <UB_VGA_Screen_Init+0x90>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <UB_VGA_Screen_Init+0x90>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001030:	490f      	ldr	r1, [pc, #60]	; (8001070 <UB_VGA_Screen_Init+0x94>)
 8001032:	f240 1341 	movw	r3, #321	; 0x141
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <UB_VGA_Screen_Init+0x98>)
 8001038:	480f      	ldr	r0, [pc, #60]	; (8001078 <UB_VGA_Screen_Init+0x9c>)
 800103a:	f000 fa9f 	bl	800157c <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800103e:	480e      	ldr	r0, [pc, #56]	; (8001078 <UB_VGA_Screen_Init+0x9c>)
 8001040:	f000 f9ee 	bl	8001420 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <UB_VGA_Screen_Init+0x9c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <UB_VGA_Screen_Init+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0210 	orr.w	r2, r2, #16
 8001052:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <UB_VGA_Screen_Init+0xa0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a01      	ldr	r2, [pc, #4]	; (8001060 <UB_VGA_Screen_Init+0x84>)
 800105a:	6093      	str	r3, [r2, #8]
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200009d0 	.word	0x200009d0
 8001064:	40020400 	.word	0x40020400
 8001068:	20000950 	.word	0x20000950
 800106c:	200008b0 	.word	0x200008b0
 8001070:	200009dc 	.word	0x200009dc
 8001074:	40021015 	.word	0x40021015
 8001078:	200008f0 	.word	0x200008f0
 800107c:	40026488 	.word	0x40026488

08001080 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800108a:	2300      	movs	r3, #0
 800108c:	81bb      	strh	r3, [r7, #12]
 800108e:	e012      	b.n	80010b6 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001090:	2300      	movs	r3, #0
 8001092:	81fb      	strh	r3, [r7, #14]
 8001094:	e008      	b.n	80010a8 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	89b9      	ldrh	r1, [r7, #12]
 800109a:	89fb      	ldrh	r3, [r7, #14]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f813 	bl	80010c8 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	3301      	adds	r3, #1
 80010a6:	81fb      	strh	r3, [r7, #14]
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010ae:	d3f2      	bcc.n	8001096 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80010b0:	89bb      	ldrh	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	81bb      	strh	r3, [r7, #12]
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	2bef      	cmp	r3, #239	; 0xef
 80010ba:	d9e9      	bls.n	8001090 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	80bb      	strh	r3, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010e0:	d301      	bcc.n	80010e6 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	2bef      	cmp	r3, #239	; 0xef
 80010ea:	d901      	bls.n	80010f0 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	441a      	add	r2, r3
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4413      	add	r3, r2
 8001100:	4904      	ldr	r1, [pc, #16]	; (8001114 <UB_VGA_SetPixel+0x4c>)
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	54ca      	strb	r2, [r1, r3]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	200009dc 	.word	0x200009dc

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_Init+0x40>)
 8001122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_Init+0x40>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x40>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f92b 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f808 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fb6a 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x58>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f943 	bl	8001406 <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001198:	f000 f90b 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_InitTick+0x5c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	200136cc 	.word	0x200136cc

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200136cc 	.word	0x200136cc

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff feda 	bl	80011e4 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e099      	b.n	8001570 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145c:	e00f      	b.n	800147e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145e:	f7ff fec1 	bl	80011e4 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b05      	cmp	r3, #5
 800146a:	d908      	bls.n	800147e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e078      	b.n	8001570 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e8      	bne.n	800145e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_DMA_Init+0x158>)
 8001498:	4013      	ands	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d107      	bne.n	80014e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4313      	orrs	r3, r2
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f023 0307 	bic.w	r3, r3, #7
 80014fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	2b04      	cmp	r3, #4
 8001510:	d117      	bne.n	8001542 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fa91 	bl	8001a4c <DMA_CheckFifoParam>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2240      	movs	r2, #64	; 0x40
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800153e:	2301      	movs	r3, #1
 8001540:	e016      	b.n	8001570 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fa48 	bl	80019e0 <DMA_CalcBaseAndBitshift>
 8001550:	4603      	mov	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	223f      	movs	r2, #63	; 0x3f
 800155a:	409a      	lsls	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	f010803f 	.word	0xf010803f

0800157c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_DMA_Start_IT+0x26>
 800159e:	2302      	movs	r3, #2
 80015a0:	e040      	b.n	8001624 <HAL_DMA_Start_IT+0xa8>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d12f      	bne.n	8001616 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2202      	movs	r2, #2
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f9da 	bl	8001984 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	223f      	movs	r2, #63	; 0x3f
 80015d6:	409a      	lsls	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0216 	orr.w	r2, r2, #22
 80015ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0208 	orr.w	r2, r2, #8
 8001602:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e005      	b.n	8001622 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800161e:	2302      	movs	r3, #2
 8001620:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001622:	7dfb      	ldrb	r3, [r7, #23]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d004      	beq.n	800164a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00c      	b.n	8001664 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2205      	movs	r2, #5
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800167c:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_DMA_IRQHandler+0x258>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a92      	ldr	r2, [pc, #584]	; (80018cc <HAL_DMA_IRQHandler+0x25c>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0a9b      	lsrs	r3, r3, #10
 8001688:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2208      	movs	r2, #8
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01a      	beq.n	80016dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0204 	bic.w	r2, r2, #4
 80016c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	2208      	movs	r2, #8
 80016ca:	409a      	lsls	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	2201      	movs	r2, #1
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d012      	beq.n	8001712 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2201      	movs	r2, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	f043 0202 	orr.w	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	2204      	movs	r2, #4
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d012      	beq.n	8001748 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	2204      	movs	r2, #4
 8001736:	409a      	lsls	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	2210      	movs	r2, #16
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d043      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03c      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2210      	movs	r2, #16
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d018      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d108      	bne.n	80017a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d024      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	4798      	blx	r3
 800179e:	e01f      	b.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01b      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
 80017b0:	e016      	b.n	80017e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0208 	bic.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	2220      	movs	r2, #32
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 808e 	beq.w	800190e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8086 	beq.w	800190e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2220      	movs	r2, #32
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b05      	cmp	r3, #5
 8001818:	d136      	bne.n	8001888 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0216 	bic.w	r2, r2, #22
 8001828:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001838:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <HAL_DMA_IRQHandler+0x1da>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0208 	bic.w	r2, r2, #8
 8001858:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	223f      	movs	r2, #63	; 0x3f
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187a:	2b00      	cmp	r3, #0
 800187c:	d07d      	beq.n	800197a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
        }
        return;
 8001886:	e078      	b.n	800197a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01c      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d108      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d030      	beq.n	800190e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	e02b      	b.n	800190e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d027      	beq.n	800190e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
 80018c6:	e022      	b.n	800190e <HAL_DMA_IRQHandler+0x29e>
 80018c8:	20000000 	.word	0x20000000
 80018cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0210 	bic.w	r2, r2, #16
 80018ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	2b00      	cmp	r3, #0
 8001914:	d032      	beq.n	800197c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d022      	beq.n	8001968 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3301      	adds	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	429a      	cmp	r2, r3
 8001944:	d307      	bcc.n	8001956 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f2      	bne.n	800193a <HAL_DMA_IRQHandler+0x2ca>
 8001954:	e000      	b.n	8001958 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001956:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
 8001978:	e000      	b.n	800197c <HAL_DMA_IRQHandler+0x30c>
        return;
 800197a:	bf00      	nop
    }
  }
}
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop

08001984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d108      	bne.n	80019c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019c2:	e007      	b.n	80019d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3b10      	subs	r3, #16
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <DMA_CalcBaseAndBitshift+0x64>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019fa:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <DMA_CalcBaseAndBitshift+0x68>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d909      	bls.n	8001a22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	1d1a      	adds	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a20:	e007      	b.n	8001a32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	aaaaaaab 	.word	0xaaaaaaab
 8001a48:	08004fb0 	.word	0x08004fb0

08001a4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d11f      	bne.n	8001aa6 <DMA_CheckFifoParam+0x5a>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d856      	bhi.n	8001b1a <DMA_CheckFifoParam+0xce>
 8001a6c:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <DMA_CheckFifoParam+0x28>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a97 	.word	0x08001a97
 8001a7c:	08001a85 	.word	0x08001a85
 8001a80:	08001b1b 	.word	0x08001b1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d046      	beq.n	8001b1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a94:	e043      	b.n	8001b1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a9e:	d140      	bne.n	8001b22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa4:	e03d      	b.n	8001b22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aae:	d121      	bne.n	8001af4 <DMA_CheckFifoParam+0xa8>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d837      	bhi.n	8001b26 <DMA_CheckFifoParam+0xda>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <DMA_CheckFifoParam+0x70>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001ad3 	.word	0x08001ad3
 8001ac4:	08001acd 	.word	0x08001acd
 8001ac8:	08001ae5 	.word	0x08001ae5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad0:	e030      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d025      	beq.n	8001b2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae2:	e022      	b.n	8001b2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aec:	d11f      	bne.n	8001b2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001af2:	e01c      	b.n	8001b2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d903      	bls.n	8001b02 <DMA_CheckFifoParam+0xb6>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d003      	beq.n	8001b08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b00:	e018      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
      break;
 8001b06:	e015      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
      break;
 8001b18:	e00b      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;
 8001b1a:	bf00      	nop
 8001b1c:	e00a      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b1e:	bf00      	nop
 8001b20:	e008      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b22:	bf00      	nop
 8001b24:	e006      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b26:	bf00      	nop
 8001b28:	e004      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e002      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b2e:	bf00      	nop
 8001b30:	e000      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
    }
  } 
  
  return status; 
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e16b      	b.n	8001e38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 815a 	bne.w	8001e32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d00b      	beq.n	8001b9e <HAL_GPIO_Init+0x5a>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b92:	2b11      	cmp	r3, #17
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0xfc>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80b4 	beq.w	8001e32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a5f      	ldr	r2, [pc, #380]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a5b      	ldr	r2, [pc, #364]	; (8001e54 <HAL_GPIO_Init+0x310>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_GPIO_Init+0x314>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x226>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_GPIO_Init+0x318>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x222>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <HAL_GPIO_Init+0x31c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x21e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4f      	ldr	r2, [pc, #316]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <HAL_GPIO_Init+0x328>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x32c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x20a>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e00e      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d4e:	2308      	movs	r3, #8
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d7c:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_GPIO_Init+0x310>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dae:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001db4:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e2c:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	f67f ae90 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40021400 	.word	0x40021400
 8001e70:	40021800 	.word	0x40021800
 8001e74:	40021c00 	.word	0x40021c00
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e98:	e003      	b.n	8001ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	041a      	lsls	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e25b      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d075      	beq.n	8001fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	4ba3      	ldr	r3, [pc, #652]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4ba0      	ldr	r3, [pc, #640]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b9d      	ldr	r3, [pc, #628]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	4b99      	ldr	r3, [pc, #612]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d05b      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x108>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d157      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e236      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_OscConfig+0x74>
 8001f16:	4b91      	ldr	r3, [pc, #580]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a90      	ldr	r2, [pc, #576]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e01d      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f2e:	4b8b      	ldr	r3, [pc, #556]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a8a      	ldr	r2, [pc, #552]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a87      	ldr	r2, [pc, #540]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
 8001f48:	4b84      	ldr	r3, [pc, #528]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a83      	ldr	r2, [pc, #524]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b81      	ldr	r3, [pc, #516]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a80      	ldr	r2, [pc, #512]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff f93c 	bl	80011e4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f938 	bl	80011e4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1fb      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0xc0>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff f928 	bl	80011e4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff f924 	bl	80011e4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1e7      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	4b6c      	ldr	r3, [pc, #432]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0xe8>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d063      	beq.n	800208e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd2:	4b62      	ldr	r3, [pc, #392]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d11c      	bne.n	8002018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fde:	4b5f      	ldr	r3, [pc, #380]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d116      	bne.n	8002018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	4b5c      	ldr	r3, [pc, #368]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x152>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1bb      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4952      	ldr	r1, [pc, #328]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	e03a      	b.n	800208e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002020:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <HAL_RCC_OscConfig+0x2b0>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff f8dd 	bl	80011e4 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff f8d9 	bl	80011e4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e19c      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	4b46      	ldr	r3, [pc, #280]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4940      	ldr	r1, [pc, #256]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002062:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <HAL_RCC_OscConfig+0x2b0>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff f8bc 	bl	80011e4 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002070:	f7ff f8b8 	bl	80011e4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e17b      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d030      	beq.n	80020fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCC_OscConfig+0x2b4>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff f89c 	bl	80011e4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b0:	f7ff f898 	bl	80011e4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e15b      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x200>
 80020ce:	e015      	b.n	80020fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x2b4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f885 	bl	80011e4 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020de:	f7ff f881 	bl	80011e4 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e144      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a0 	beq.w	800224a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x2b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d121      	bne.n	800218a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_RCC_OscConfig+0x2b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_RCC_OscConfig+0x2b8>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7ff f847 	bl	80011e4 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	e011      	b.n	800217e <HAL_RCC_OscConfig+0x2ce>
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	42470000 	.word	0x42470000
 8002164:	42470e80 	.word	0x42470e80
 8002168:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216c:	f7ff f83a 	bl	80011e4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0fd      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_OscConfig+0x4d4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
 8002192:	4b7d      	ldr	r3, [pc, #500]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a7c      	ldr	r2, [pc, #496]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	e01c      	b.n	80021da <HAL_RCC_OscConfig+0x32a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x312>
 80021a8:	4b77      	ldr	r3, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a76      	ldr	r2, [pc, #472]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b74      	ldr	r3, [pc, #464]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a73      	ldr	r2, [pc, #460]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	e00b      	b.n	80021da <HAL_RCC_OscConfig+0x32a>
 80021c2:	4b71      	ldr	r3, [pc, #452]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a70      	ldr	r2, [pc, #448]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	4b6e      	ldr	r3, [pc, #440]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a6d      	ldr	r2, [pc, #436]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d015      	beq.n	800220e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7fe ffff 	bl	80011e4 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7fe fffb 	bl	80011e4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0bc      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b61      	ldr	r3, [pc, #388]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ee      	beq.n	80021ea <HAL_RCC_OscConfig+0x33a>
 800220c:	e014      	b.n	8002238 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe ffe9 	bl	80011e4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe ffe5 	bl	80011e4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0a6      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	4b56      	ldr	r3, [pc, #344]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b52      	ldr	r3, [pc, #328]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a51      	ldr	r2, [pc, #324]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 8002244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8092 	beq.w	8002378 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002254:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d05c      	beq.n	800231a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d141      	bne.n	80022ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b48      	ldr	r3, [pc, #288]	; (800238c <HAL_RCC_OscConfig+0x4dc>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe ffb9 	bl	80011e4 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe ffb5 	bl	80011e4 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e078      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002288:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	019b      	lsls	r3, r3, #6
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	061b      	lsls	r3, r3, #24
 80022b8:	4933      	ldr	r1, [pc, #204]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCC_OscConfig+0x4dc>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe ff8e 	bl	80011e4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe ff8a 	bl	80011e4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e04d      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x41c>
 80022ea:	e045      	b.n	8002378 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x4dc>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe ff77 	bl	80011e4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe ff73 	bl	80011e4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e036      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230c:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x44a>
 8002318:	e02e      	b.n	8002378 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e029      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_RCC_OscConfig+0x4d8>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	429a      	cmp	r2, r3
 8002338:	d11c      	bne.n	8002374 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d115      	bne.n	8002374 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800234e:	4013      	ands	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002354:	4293      	cmp	r3, r2
 8002356:	d10d      	bne.n	8002374 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d106      	bne.n	8002374 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40007000 	.word	0x40007000
 8002388:	40023800 	.word	0x40023800
 800238c:	42470060 	.word	0x42470060

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0cc      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90c      	bls.n	80023cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe feb0 	bl	80011e4 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe feac 	bl	80011e4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fe10 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00
 800254c:	40023800 	.word	0x40023800
 8002550:	08004f98 	.word	0x08004f98
 8002554:	20000000 	.word	0x20000000
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	2300      	movs	r3, #0
 800256e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002574:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d00d      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002580:	2b08      	cmp	r3, #8
 8002582:	f200 80bd 	bhi.w	8002700 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x3a>
 800258e:	e0b7      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b61      	ldr	r3, [pc, #388]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002592:	60bb      	str	r3, [r7, #8]
       break;
 8002594:	e0b7      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002596:	4b61      	ldr	r3, [pc, #388]	; (800271c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002598:	60bb      	str	r3, [r7, #8]
      break;
 800259a:	e0b4      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a6:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04d      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b58      	ldr	r3, [pc, #352]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	461a      	mov	r2, r3
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	ea02 0800 	and.w	r8, r2, r0
 80025ca:	ea03 0901 	and.w	r9, r3, r1
 80025ce:	4640      	mov	r0, r8
 80025d0:	4649      	mov	r1, r9
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	014b      	lsls	r3, r1, #5
 80025dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025e0:	0142      	lsls	r2, r0, #5
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	ebb0 0008 	subs.w	r0, r0, r8
 80025ea:	eb61 0109 	sbc.w	r1, r1, r9
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	018b      	lsls	r3, r1, #6
 80025f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025fc:	0182      	lsls	r2, r0, #6
 80025fe:	1a12      	subs	r2, r2, r0
 8002600:	eb63 0301 	sbc.w	r3, r3, r1
 8002604:	f04f 0000 	mov.w	r0, #0
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	00d9      	lsls	r1, r3, #3
 800260e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002612:	00d0      	lsls	r0, r2, #3
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	eb12 0208 	adds.w	r2, r2, r8
 800261c:	eb43 0309 	adc.w	r3, r3, r9
 8002620:	f04f 0000 	mov.w	r0, #0
 8002624:	f04f 0100 	mov.w	r1, #0
 8002628:	0259      	lsls	r1, r3, #9
 800262a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800262e:	0250      	lsls	r0, r2, #9
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	461a      	mov	r2, r3
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	f7fd fdc2 	bl	80001c8 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4613      	mov	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e04a      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	461a      	mov	r2, r3
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800265e:	f04f 0100 	mov.w	r1, #0
 8002662:	ea02 0400 	and.w	r4, r2, r0
 8002666:	ea03 0501 	and.w	r5, r3, r1
 800266a:	4620      	mov	r0, r4
 800266c:	4629      	mov	r1, r5
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	014b      	lsls	r3, r1, #5
 8002678:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800267c:	0142      	lsls	r2, r0, #5
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	1b00      	subs	r0, r0, r4
 8002684:	eb61 0105 	sbc.w	r1, r1, r5
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	018b      	lsls	r3, r1, #6
 8002692:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002696:	0182      	lsls	r2, r0, #6
 8002698:	1a12      	subs	r2, r2, r0
 800269a:	eb63 0301 	sbc.w	r3, r3, r1
 800269e:	f04f 0000 	mov.w	r0, #0
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	00d9      	lsls	r1, r3, #3
 80026a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ac:	00d0      	lsls	r0, r2, #3
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	1912      	adds	r2, r2, r4
 80026b4:	eb45 0303 	adc.w	r3, r5, r3
 80026b8:	f04f 0000 	mov.w	r0, #0
 80026bc:	f04f 0100 	mov.w	r1, #0
 80026c0:	0299      	lsls	r1, r3, #10
 80026c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026c6:	0290      	lsls	r0, r2, #10
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	f7fd fd76 	bl	80001c8 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	3301      	adds	r3, #1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	60bb      	str	r3, [r7, #8]
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002702:	60bb      	str	r3, [r7, #8]
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	68bb      	ldr	r3, [r7, #8]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	00f42400 	.word	0x00f42400
 800271c:	007a1200 	.word	0x007a1200

08002720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_RCC_GetHCLKFreq+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000000 	.word	0x20000000

08002738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800273c:	f7ff fff0 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0a9b      	lsrs	r3, r3, #10
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCC_GetPCLK1Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	08004fa8 	.word	0x08004fa8

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002764:	f7ff ffdc 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0b5b      	lsrs	r3, r3, #13
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	08004fa8 	.word	0x08004fa8

08002788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e01d      	b.n	80027d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fac0 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f000 fbde 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d007      	beq.n	8002810 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e01d      	b.n	8002874 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7fe fac3 	bl	8000dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f000 fb8f 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	6839      	ldr	r1, [r7, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fe64 	bl	800355c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <HAL_TIM_PWM_Start+0x74>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_TIM_PWM_Start+0x2c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_TIM_PWM_Start+0x78>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_TIM_PWM_Start+0x30>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_TIM_PWM_Start+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	d007      	beq.n	80028e4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010400 	.word	0x40010400

080028f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d841      	bhi.n	800298c <HAL_TIM_PWM_Start_IT+0x94>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <HAL_TIM_PWM_Start_IT+0x18>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002945 	.word	0x08002945
 8002914:	0800298d 	.word	0x0800298d
 8002918:	0800298d 	.word	0x0800298d
 800291c:	0800298d 	.word	0x0800298d
 8002920:	08002957 	.word	0x08002957
 8002924:	0800298d 	.word	0x0800298d
 8002928:	0800298d 	.word	0x0800298d
 800292c:	0800298d 	.word	0x0800298d
 8002930:	08002969 	.word	0x08002969
 8002934:	0800298d 	.word	0x0800298d
 8002938:	0800298d 	.word	0x0800298d
 800293c:	0800298d 	.word	0x0800298d
 8002940:	0800297b 	.word	0x0800297b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0202 	orr.w	r2, r2, #2
 8002952:	60da      	str	r2, [r3, #12]
      break;
 8002954:	e01b      	b.n	800298e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0204 	orr.w	r2, r2, #4
 8002964:	60da      	str	r2, [r3, #12]
      break;
 8002966:	e012      	b.n	800298e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0208 	orr.w	r2, r2, #8
 8002976:	60da      	str	r2, [r3, #12]
      break;
 8002978:	e009      	b.n	800298e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0210 	orr.w	r2, r2, #16
 8002988:	60da      	str	r2, [r3, #12]
      break;
 800298a:	e000      	b.n	800298e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800298c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fde0 	bl	800355c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <HAL_TIM_PWM_Start_IT+0x100>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_TIM_PWM_Start_IT+0xb8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_TIM_PWM_Start_IT+0x104>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_TIM_PWM_Start_IT+0xbc>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_TIM_PWM_Start_IT+0xbe>
 80029b4:	2300      	movs	r3, #0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d007      	beq.n	80029ec <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40010400 	.word	0x40010400

08002a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d122      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d11b      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0202 	mvn.w	r2, #2
 8002a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa82 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa74 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa85 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0204 	mvn.w	r2, #4
 8002a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa58 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa4a 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fa5b 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d122      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d11b      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0208 	mvn.w	r2, #8
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa2e 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa20 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fa31 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d122      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0210 	mvn.w	r2, #16
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fa04 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9f6 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa07 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0201 	mvn.w	r2, #1
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9d0 	bl	8002f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8e:	2b80      	cmp	r3, #128	; 0x80
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d107      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fd82 	bl	80036b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d10e      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d107      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9cc 	bl	8002f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d10e      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d107      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0220 	mvn.w	r2, #32
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fd4c 	bl	80036a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e0b4      	b.n	8002d94 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	f200 809f 	bhi.w	8002d80 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c7d 	.word	0x08002c7d
 8002c4c:	08002d81 	.word	0x08002d81
 8002c50:	08002d81 	.word	0x08002d81
 8002c54:	08002d81 	.word	0x08002d81
 8002c58:	08002cbd 	.word	0x08002cbd
 8002c5c:	08002d81 	.word	0x08002d81
 8002c60:	08002d81 	.word	0x08002d81
 8002c64:	08002d81 	.word	0x08002d81
 8002c68:	08002cff 	.word	0x08002cff
 8002c6c:	08002d81 	.word	0x08002d81
 8002c70:	08002d81 	.word	0x08002d81
 8002c74:	08002d81 	.word	0x08002d81
 8002c78:	08002d3f 	.word	0x08002d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fa20 	bl	80030c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0208 	orr.w	r2, r2, #8
 8002c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0204 	bic.w	r2, r2, #4
 8002ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6999      	ldr	r1, [r3, #24]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	619a      	str	r2, [r3, #24]
      break;
 8002cba:	e062      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fa70 	bl	80031a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6999      	ldr	r1, [r3, #24]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	021a      	lsls	r2, r3, #8
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	619a      	str	r2, [r3, #24]
      break;
 8002cfc:	e041      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fac5 	bl	8003294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0208 	orr.w	r2, r2, #8
 8002d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0204 	bic.w	r2, r2, #4
 8002d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69d9      	ldr	r1, [r3, #28]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	61da      	str	r2, [r3, #28]
      break;
 8002d3c:	e021      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fb19 	bl	800337c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	021a      	lsls	r2, r3, #8
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	61da      	str	r2, [r3, #28]
      break;
 8002d7e:	e000      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002d80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_TIM_ConfigClockSource+0x18>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0b3      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x180>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dec:	d03e      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0xd0>
 8002dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df2:	f200 8087 	bhi.w	8002f04 <HAL_TIM_ConfigClockSource+0x168>
 8002df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfa:	f000 8085 	beq.w	8002f08 <HAL_TIM_ConfigClockSource+0x16c>
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e02:	d87f      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x168>
 8002e04:	2b70      	cmp	r3, #112	; 0x70
 8002e06:	d01a      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0xa2>
 8002e08:	2b70      	cmp	r3, #112	; 0x70
 8002e0a:	d87b      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x168>
 8002e0c:	2b60      	cmp	r3, #96	; 0x60
 8002e0e:	d050      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0x116>
 8002e10:	2b60      	cmp	r3, #96	; 0x60
 8002e12:	d877      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x168>
 8002e14:	2b50      	cmp	r3, #80	; 0x50
 8002e16:	d03c      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0xf6>
 8002e18:	2b50      	cmp	r3, #80	; 0x50
 8002e1a:	d873      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x168>
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d058      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x136>
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d86f      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x168>
 8002e24:	2b30      	cmp	r3, #48	; 0x30
 8002e26:	d064      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x156>
 8002e28:	2b30      	cmp	r3, #48	; 0x30
 8002e2a:	d86b      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x168>
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d060      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x156>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d867      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x168>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d05c      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x156>
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d05a      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e3c:	e062      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f000 fb65 	bl	800351c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	609a      	str	r2, [r3, #8]
      break;
 8002e6a:	e04e      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f000 fb4e 	bl	800351c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e8e:	609a      	str	r2, [r3, #8]
      break;
 8002e90:	e03b      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f000 fac2 	bl	8003428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2150      	movs	r1, #80	; 0x50
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fb1b 	bl	80034e6 <TIM_ITRx_SetConfig>
      break;
 8002eb0:	e02b      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f000 fae1 	bl	8003486 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2160      	movs	r1, #96	; 0x60
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fb0b 	bl	80034e6 <TIM_ITRx_SetConfig>
      break;
 8002ed0:	e01b      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f000 faa2 	bl	8003428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2140      	movs	r1, #64	; 0x40
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fafb 	bl	80034e6 <TIM_ITRx_SetConfig>
      break;
 8002ef0:	e00b      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f000 faf2 	bl	80034e6 <TIM_ITRx_SetConfig>
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a40      	ldr	r2, [pc, #256]	; (800309c <TIM_Base_SetConfig+0x114>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d00f      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3d      	ldr	r2, [pc, #244]	; (80030a0 <TIM_Base_SetConfig+0x118>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00b      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <TIM_Base_SetConfig+0x11c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d007      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <TIM_Base_SetConfig+0x120>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d003      	beq.n	8002fc8 <TIM_Base_SetConfig+0x40>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d108      	bne.n	8002fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2f      	ldr	r2, [pc, #188]	; (800309c <TIM_Base_SetConfig+0x114>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d02b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d027      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a2c      	ldr	r2, [pc, #176]	; (80030a0 <TIM_Base_SetConfig+0x118>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d023      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <TIM_Base_SetConfig+0x11c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01f      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <TIM_Base_SetConfig+0x120>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a29      	ldr	r2, [pc, #164]	; (80030ac <TIM_Base_SetConfig+0x124>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d017      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <TIM_Base_SetConfig+0x128>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <TIM_Base_SetConfig+0x12c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00f      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <TIM_Base_SetConfig+0x130>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00b      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a25      	ldr	r2, [pc, #148]	; (80030bc <TIM_Base_SetConfig+0x134>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <TIM_Base_SetConfig+0x138>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a23      	ldr	r2, [pc, #140]	; (80030c4 <TIM_Base_SetConfig+0x13c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d108      	bne.n	800304c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <TIM_Base_SetConfig+0x114>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0xf8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <TIM_Base_SetConfig+0x124>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40010400 	.word	0x40010400
 80030b0:	40014000 	.word	0x40014000
 80030b4:	40014400 	.word	0x40014400
 80030b8:	40014800 	.word	0x40014800
 80030bc:	40001800 	.word	0x40001800
 80030c0:	40001c00 	.word	0x40001c00
 80030c4:	40002000 	.word	0x40002000

080030c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 0302 	bic.w	r3, r3, #2
 8003110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <TIM_OC1_SetConfig+0xd8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_OC1_SetConfig+0x64>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIM_OC1_SetConfig+0xdc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10c      	bne.n	8003146 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0308 	bic.w	r3, r3, #8
 8003132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <TIM_OC1_SetConfig+0xd8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_OC1_SetConfig+0x8e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <TIM_OC1_SetConfig+0xdc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d111      	bne.n	800317a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800315c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	621a      	str	r2, [r3, #32]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40010400 	.word	0x40010400

080031a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0210 	bic.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0320 	bic.w	r3, r3, #32
 80031f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a22      	ldr	r2, [pc, #136]	; (800328c <TIM_OC2_SetConfig+0xe4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_OC2_SetConfig+0x68>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <TIM_OC2_SetConfig+0xe8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10d      	bne.n	800322c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <TIM_OC2_SetConfig+0xe4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_OC2_SetConfig+0x94>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a16      	ldr	r2, [pc, #88]	; (8003290 <TIM_OC2_SetConfig+0xe8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d113      	bne.n	8003264 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	40010400 	.word	0x40010400

08003294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <TIM_OC3_SetConfig+0xe0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_OC3_SetConfig+0x66>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <TIM_OC3_SetConfig+0xe4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d10d      	bne.n	8003316 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <TIM_OC3_SetConfig+0xe0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_OC3_SetConfig+0x92>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a15      	ldr	r2, [pc, #84]	; (8003378 <TIM_OC3_SetConfig+0xe4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d113      	bne.n	800334e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800332c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	621a      	str	r2, [r3, #32]
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40010000 	.word	0x40010000
 8003378:	40010400 	.word	0x40010400

0800337c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	031b      	lsls	r3, r3, #12
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <TIM_OC4_SetConfig+0xa4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d003      	beq.n	80033e4 <TIM_OC4_SetConfig+0x68>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a11      	ldr	r2, [pc, #68]	; (8003424 <TIM_OC4_SetConfig+0xa8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d109      	bne.n	80033f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	019b      	lsls	r3, r3, #6
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000
 8003424:	40010400 	.word	0x40010400

08003428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 030a 	bic.w	r3, r3, #10
 8003464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003486:	b480      	push	{r7}
 8003488:	b087      	sub	sp, #28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0210 	bic.w	r2, r3, #16
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	031b      	lsls	r3, r3, #12
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	f043 0307 	orr.w	r3, r3, #7
 8003508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	609a      	str	r2, [r3, #8]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	021a      	lsls	r2, r3, #8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	431a      	orrs	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4313      	orrs	r3, r2
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2201      	movs	r2, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1a      	ldr	r2, [r3, #32]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	43db      	mvns	r3, r3
 800357e:	401a      	ands	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a1a      	ldr	r2, [r3, #32]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035bc:	2302      	movs	r3, #2
 80035be:	e05a      	b.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a21      	ldr	r2, [pc, #132]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d022      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360c:	d01d      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d018      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1b      	ldr	r2, [pc, #108]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00e      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a17      	ldr	r2, [pc, #92]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a15      	ldr	r2, [pc, #84]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10c      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40010400 	.word	0x40010400
 8003698:	40014000 	.word	0x40014000
 800369c:	40001800 	.word	0x40001800

080036a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e03f      	b.n	800375a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fbfa 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	; 0x24
 80036f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fba1 	bl	8003e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b088      	sub	sp, #32
 8003766:	af02      	add	r7, sp, #8
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b20      	cmp	r3, #32
 8003780:	f040 8083 	bne.w	800388a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_UART_Transmit+0x2e>
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e07b      	b.n	800388c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_UART_Transmit+0x40>
 800379e:	2302      	movs	r3, #2
 80037a0:	e074      	b.n	800388c <HAL_UART_Transmit+0x12a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2221      	movs	r2, #33	; 0x21
 80037b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80037b8:	f7fd fd14 	bl	80011e4 <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80037d2:	e042      	b.n	800385a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	d122      	bne.n	8003832 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f9c0 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e042      	b.n	800388c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003818:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3302      	adds	r3, #2
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	e017      	b.n	800385a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3301      	adds	r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	e013      	b.n	800385a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f99d 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e01f      	b.n	800388c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	60ba      	str	r2, [r7, #8]
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1b7      	bne.n	80037d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2200      	movs	r2, #0
 800386c:	2140      	movs	r1, #64	; 0x40
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f984 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e006      	b.n	800388c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	4613      	mov	r3, r2
 80038a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d140      	bne.n	8003930 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_Receive_IT+0x26>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e039      	b.n	8003932 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Receive_IT+0x38>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e032      	b.n	8003932 <HAL_UART_Receive_IT+0x9e>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	88fa      	ldrh	r2, [r7, #6]
 80038e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2222      	movs	r2, #34	; 0x22
 80038f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800390a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0220 	orr.w	r2, r2, #32
 800392a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_UART_IRQHandler+0x52>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f9e0 	bl	8003d50 <UART_Receive_IT>
      return;
 8003990:	e0d0      	b.n	8003b34 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80b0 	beq.w	8003afa <HAL_UART_IRQHandler+0x1ba>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <HAL_UART_IRQHandler+0x70>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a5 	beq.w	8003afa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_UART_IRQHandler+0x90>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_UART_IRQHandler+0xb0>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	f043 0202 	orr.w	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_UART_IRQHandler+0xd0>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	f043 0204 	orr.w	r2, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00f      	beq.n	8003a3a <HAL_UART_IRQHandler+0xfa>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_UART_IRQHandler+0xee>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	f043 0208 	orr.w	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d077      	beq.n	8003b32 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_UART_IRQHandler+0x11c>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f97a 	bl	8003d50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	bf0c      	ite	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_UART_IRQHandler+0x144>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d031      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8c3 	bl	8003c10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d123      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	4a21      	ldr	r2, [pc, #132]	; (8003b3c <HAL_UART_IRQHandler+0x1fc>)
 8003ab6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fdb5 	bl	800162c <HAL_DMA_Abort_IT>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d016      	beq.n	8003af6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad6:	e00e      	b.n	8003af6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f845 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ade:	e00a      	b.n	8003af6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f841 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae6:	e006      	b.n	8003af6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f83d 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003af4:	e01d      	b.n	8003b32 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af6:	bf00      	nop
    return;
 8003af8:	e01b      	b.n	8003b32 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_UART_IRQHandler+0x1d6>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8b0 	bl	8003c74 <UART_Transmit_IT>
    return;
 8003b14:	e00e      	b.n	8003b34 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_UART_IRQHandler+0x1f4>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8f8 	bl	8003d20 <UART_EndTransmit_IT>
    return;
 8003b30:	e000      	b.n	8003b34 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003b32:	bf00      	nop
  }
}
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	08003c4d 	.word	0x08003c4d

08003b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	e02c      	b.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b94:	d028      	beq.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9c:	f7fd fb22 	bl	80011e4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d21d      	bcs.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e00f      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d0c3      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff ff7e 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6c:	bf00      	nop
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b21      	cmp	r3, #33	; 0x21
 8003c86:	d144      	bne.n	8003d12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c90:	d11a      	bne.n	8003cc8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]
 8003cba:	e00e      	b.n	8003cda <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	621a      	str	r2, [r3, #32]
 8003cc6:	e008      	b.n	8003cda <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	1c59      	adds	r1, r3, #1
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6211      	str	r1, [r2, #32]
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
  }
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff fefd 	bl	8003b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b22      	cmp	r3, #34	; 0x22
 8003d62:	d171      	bne.n	8003e48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d123      	bne.n	8003db6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10e      	bne.n	8003d9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
 8003d98:	e029      	b.n	8003dee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	629a      	str	r2, [r3, #40]	; 0x28
 8003db4:	e01b      	b.n	8003dee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6858      	ldr	r0, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6291      	str	r1, [r2, #40]	; 0x28
 8003dce:	b2c2      	uxtb	r2, r0
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e00c      	b.n	8003dee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	1c58      	adds	r0, r3, #1
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	6288      	str	r0, [r1, #40]	; 0x28
 8003de6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d120      	bne.n	8003e44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0220 	bic.w	r2, r2, #32
 8003e10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fe8a 	bl	8003b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e002      	b.n	8003e4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	b0bd      	sub	sp, #244	; 0xf4
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e70:	68d9      	ldr	r1, [r3, #12]
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	ea40 0301 	orr.w	r3, r0, r1
 8003e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eac:	f021 010c 	bic.w	r1, r1, #12
 8003eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ece:	6999      	ldr	r1, [r3, #24]
 8003ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	ea40 0301 	orr.w	r3, r0, r1
 8003eda:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee6:	f040 81a5 	bne.w	8004234 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4bcd      	ldr	r3, [pc, #820]	; (8004228 <UART_SetConfig+0x3d4>)
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d006      	beq.n	8003f04 <UART_SetConfig+0xb0>
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4bcb      	ldr	r3, [pc, #812]	; (800422c <UART_SetConfig+0x3d8>)
 8003efe:	429a      	cmp	r2, r3
 8003f00:	f040 80cb 	bne.w	800409a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fc2c 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8003f08:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f10:	461c      	mov	r4, r3
 8003f12:	f04f 0500 	mov.w	r5, #0
 8003f16:	4622      	mov	r2, r4
 8003f18:	462b      	mov	r3, r5
 8003f1a:	1891      	adds	r1, r2, r2
 8003f1c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003f20:	415b      	adcs	r3, r3
 8003f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f26:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f2a:	1912      	adds	r2, r2, r4
 8003f2c:	eb45 0303 	adc.w	r3, r5, r3
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	00d9      	lsls	r1, r3, #3
 8003f3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f3e:	00d0      	lsls	r0, r2, #3
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	1911      	adds	r1, r2, r4
 8003f46:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003f4a:	416b      	adcs	r3, r5
 8003f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	1891      	adds	r1, r2, r2
 8003f5e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003f62:	415b      	adcs	r3, r3
 8003f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f68:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003f6c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003f70:	f7fc f92a 	bl	80001c8 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4bad      	ldr	r3, [pc, #692]	; (8004230 <UART_SetConfig+0x3dc>)
 8003f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	011e      	lsls	r6, r3, #4
 8003f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f86:	461c      	mov	r4, r3
 8003f88:	f04f 0500 	mov.w	r5, #0
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	462b      	mov	r3, r5
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	67b9      	str	r1, [r7, #120]	; 0x78
 8003f94:	415b      	adcs	r3, r3
 8003f96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f98:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003f9c:	1912      	adds	r2, r2, r4
 8003f9e:	eb45 0303 	adc.w	r3, r5, r3
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	00d9      	lsls	r1, r3, #3
 8003fac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb0:	00d0      	lsls	r0, r2, #3
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	1911      	adds	r1, r2, r4
 8003fb8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003fbc:	416b      	adcs	r3, r5
 8003fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	1891      	adds	r1, r2, r2
 8003fd0:	6739      	str	r1, [r7, #112]	; 0x70
 8003fd2:	415b      	adcs	r3, r3
 8003fd4:	677b      	str	r3, [r7, #116]	; 0x74
 8003fd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003fda:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003fde:	f7fc f8f3 	bl	80001c8 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4b92      	ldr	r3, [pc, #584]	; (8004230 <UART_SetConfig+0x3dc>)
 8003fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	2164      	movs	r1, #100	; 0x64
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	3332      	adds	r3, #50	; 0x32
 8003ffa:	4a8d      	ldr	r2, [pc, #564]	; (8004230 <UART_SetConfig+0x3dc>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004008:	441e      	add	r6, r3
 800400a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800400e:	4618      	mov	r0, r3
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	1894      	adds	r4, r2, r2
 800401a:	66bc      	str	r4, [r7, #104]	; 0x68
 800401c:	415b      	adcs	r3, r3
 800401e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004020:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004024:	1812      	adds	r2, r2, r0
 8004026:	eb41 0303 	adc.w	r3, r1, r3
 800402a:	f04f 0400 	mov.w	r4, #0
 800402e:	f04f 0500 	mov.w	r5, #0
 8004032:	00dd      	lsls	r5, r3, #3
 8004034:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004038:	00d4      	lsls	r4, r2, #3
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	1814      	adds	r4, r2, r0
 8004040:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004044:	414b      	adcs	r3, r1
 8004046:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800404a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	461a      	mov	r2, r3
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	1891      	adds	r1, r2, r2
 8004058:	6639      	str	r1, [r7, #96]	; 0x60
 800405a:	415b      	adcs	r3, r3
 800405c:	667b      	str	r3, [r7, #100]	; 0x64
 800405e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004066:	f7fc f8af 	bl	80001c8 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4b70      	ldr	r3, [pc, #448]	; (8004230 <UART_SetConfig+0x3dc>)
 8004070:	fba3 1302 	umull	r1, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	2164      	movs	r1, #100	; 0x64
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	3332      	adds	r3, #50	; 0x32
 8004082:	4a6b      	ldr	r2, [pc, #428]	; (8004230 <UART_SetConfig+0x3dc>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	f003 0207 	and.w	r2, r3, #7
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4432      	add	r2, r6
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	e26d      	b.n	8004576 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800409a:	f7fe fb4d 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 800409e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040a6:	461c      	mov	r4, r3
 80040a8:	f04f 0500 	mov.w	r5, #0
 80040ac:	4622      	mov	r2, r4
 80040ae:	462b      	mov	r3, r5
 80040b0:	1891      	adds	r1, r2, r2
 80040b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80040b4:	415b      	adcs	r3, r3
 80040b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040bc:	1912      	adds	r2, r2, r4
 80040be:	eb45 0303 	adc.w	r3, r5, r3
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	00d9      	lsls	r1, r3, #3
 80040cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d0:	00d0      	lsls	r0, r2, #3
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	1911      	adds	r1, r2, r4
 80040d8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80040dc:	416b      	adcs	r3, r5
 80040de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	6539      	str	r1, [r7, #80]	; 0x50
 80040f2:	415b      	adcs	r3, r3
 80040f4:	657b      	str	r3, [r7, #84]	; 0x54
 80040f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040fa:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80040fe:	f7fc f863 	bl	80001c8 <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4b4a      	ldr	r3, [pc, #296]	; (8004230 <UART_SetConfig+0x3dc>)
 8004108:	fba3 2302 	umull	r2, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	011e      	lsls	r6, r3, #4
 8004110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004114:	461c      	mov	r4, r3
 8004116:	f04f 0500 	mov.w	r5, #0
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	1891      	adds	r1, r2, r2
 8004120:	64b9      	str	r1, [r7, #72]	; 0x48
 8004122:	415b      	adcs	r3, r3
 8004124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004126:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800412a:	1912      	adds	r2, r2, r4
 800412c:	eb45 0303 	adc.w	r3, r5, r3
 8004130:	f04f 0000 	mov.w	r0, #0
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	00d9      	lsls	r1, r3, #3
 800413a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800413e:	00d0      	lsls	r0, r2, #3
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	1911      	adds	r1, r2, r4
 8004146:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800414a:	416b      	adcs	r3, r5
 800414c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	461a      	mov	r2, r3
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	1891      	adds	r1, r2, r2
 800415e:	6439      	str	r1, [r7, #64]	; 0x40
 8004160:	415b      	adcs	r3, r3
 8004162:	647b      	str	r3, [r7, #68]	; 0x44
 8004164:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004168:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800416c:	f7fc f82c 	bl	80001c8 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <UART_SetConfig+0x3dc>)
 8004176:	fba3 1302 	umull	r1, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2164      	movs	r1, #100	; 0x64
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	3332      	adds	r3, #50	; 0x32
 8004188:	4a29      	ldr	r2, [pc, #164]	; (8004230 <UART_SetConfig+0x3dc>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004196:	441e      	add	r6, r3
 8004198:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800419c:	4618      	mov	r0, r3
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	1894      	adds	r4, r2, r2
 80041a8:	63bc      	str	r4, [r7, #56]	; 0x38
 80041aa:	415b      	adcs	r3, r3
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041b2:	1812      	adds	r2, r2, r0
 80041b4:	eb41 0303 	adc.w	r3, r1, r3
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	f04f 0500 	mov.w	r5, #0
 80041c0:	00dd      	lsls	r5, r3, #3
 80041c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041c6:	00d4      	lsls	r4, r2, #3
 80041c8:	4622      	mov	r2, r4
 80041ca:	462b      	mov	r3, r5
 80041cc:	1814      	adds	r4, r2, r0
 80041ce:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80041d2:	414b      	adcs	r3, r1
 80041d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	461a      	mov	r2, r3
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	6339      	str	r1, [r7, #48]	; 0x30
 80041e8:	415b      	adcs	r3, r3
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
 80041ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041f0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041f4:	f7fb ffe8 	bl	80001c8 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <UART_SetConfig+0x3dc>)
 80041fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2164      	movs	r1, #100	; 0x64
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <UART_SetConfig+0x3dc>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 0207 	and.w	r2, r3, #7
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4432      	add	r2, r6
 8004224:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004226:	e1a6      	b.n	8004576 <UART_SetConfig+0x722>
 8004228:	40011000 	.word	0x40011000
 800422c:	40011400 	.word	0x40011400
 8004230:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4bd1      	ldr	r3, [pc, #836]	; (8004580 <UART_SetConfig+0x72c>)
 800423c:	429a      	cmp	r2, r3
 800423e:	d006      	beq.n	800424e <UART_SetConfig+0x3fa>
 8004240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4bcf      	ldr	r3, [pc, #828]	; (8004584 <UART_SetConfig+0x730>)
 8004248:	429a      	cmp	r2, r3
 800424a:	f040 80ca 	bne.w	80043e2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800424e:	f7fe fa87 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8004252:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004256:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800425a:	461c      	mov	r4, r3
 800425c:	f04f 0500 	mov.w	r5, #0
 8004260:	4622      	mov	r2, r4
 8004262:	462b      	mov	r3, r5
 8004264:	1891      	adds	r1, r2, r2
 8004266:	62b9      	str	r1, [r7, #40]	; 0x28
 8004268:	415b      	adcs	r3, r3
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800426c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004270:	1912      	adds	r2, r2, r4
 8004272:	eb45 0303 	adc.w	r3, r5, r3
 8004276:	f04f 0000 	mov.w	r0, #0
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	00d9      	lsls	r1, r3, #3
 8004280:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004284:	00d0      	lsls	r0, r2, #3
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	eb12 0a04 	adds.w	sl, r2, r4
 800428e:	eb43 0b05 	adc.w	fp, r3, r5
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4618      	mov	r0, r3
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	008b      	lsls	r3, r1, #2
 80042a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ac:	0082      	lsls	r2, r0, #2
 80042ae:	4650      	mov	r0, sl
 80042b0:	4659      	mov	r1, fp
 80042b2:	f7fb ff89 	bl	80001c8 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4bb3      	ldr	r3, [pc, #716]	; (8004588 <UART_SetConfig+0x734>)
 80042bc:	fba3 2302 	umull	r2, r3, r3, r2
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	011e      	lsls	r6, r3, #4
 80042c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042c8:	4618      	mov	r0, r3
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	1894      	adds	r4, r2, r2
 80042d4:	623c      	str	r4, [r7, #32]
 80042d6:	415b      	adcs	r3, r3
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
 80042da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042de:	1812      	adds	r2, r2, r0
 80042e0:	eb41 0303 	adc.w	r3, r1, r3
 80042e4:	f04f 0400 	mov.w	r4, #0
 80042e8:	f04f 0500 	mov.w	r5, #0
 80042ec:	00dd      	lsls	r5, r3, #3
 80042ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042f2:	00d4      	lsls	r4, r2, #3
 80042f4:	4622      	mov	r2, r4
 80042f6:	462b      	mov	r3, r5
 80042f8:	1814      	adds	r4, r2, r0
 80042fa:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80042fe:	414b      	adcs	r3, r1
 8004300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4618      	mov	r0, r3
 800430c:	f04f 0100 	mov.w	r1, #0
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	008b      	lsls	r3, r1, #2
 800431a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800431e:	0082      	lsls	r2, r0, #2
 8004320:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004324:	f7fb ff50 	bl	80001c8 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4b96      	ldr	r3, [pc, #600]	; (8004588 <UART_SetConfig+0x734>)
 800432e:	fba3 1302 	umull	r1, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2164      	movs	r1, #100	; 0x64
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	; 0x32
 8004340:	4a91      	ldr	r2, [pc, #580]	; (8004588 <UART_SetConfig+0x734>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	441e      	add	r6, r3
 800434e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004352:	4618      	mov	r0, r3
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	1894      	adds	r4, r2, r2
 800435e:	61bc      	str	r4, [r7, #24]
 8004360:	415b      	adcs	r3, r3
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004368:	1812      	adds	r2, r2, r0
 800436a:	eb41 0303 	adc.w	r3, r1, r3
 800436e:	f04f 0400 	mov.w	r4, #0
 8004372:	f04f 0500 	mov.w	r5, #0
 8004376:	00dd      	lsls	r5, r3, #3
 8004378:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800437c:	00d4      	lsls	r4, r2, #3
 800437e:	4622      	mov	r2, r4
 8004380:	462b      	mov	r3, r5
 8004382:	1814      	adds	r4, r2, r0
 8004384:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004388:	414b      	adcs	r3, r1
 800438a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	008b      	lsls	r3, r1, #2
 80043a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043a8:	0082      	lsls	r2, r0, #2
 80043aa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80043ae:	f7fb ff0b 	bl	80001c8 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4b74      	ldr	r3, [pc, #464]	; (8004588 <UART_SetConfig+0x734>)
 80043b8:	fba3 1302 	umull	r1, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	2164      	movs	r1, #100	; 0x64
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	3332      	adds	r3, #50	; 0x32
 80043ca:	4a6f      	ldr	r2, [pc, #444]	; (8004588 <UART_SetConfig+0x734>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4432      	add	r2, r6
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	e0c9      	b.n	8004576 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e2:	f7fe f9a9 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 80043e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043ee:	461c      	mov	r4, r3
 80043f0:	f04f 0500 	mov.w	r5, #0
 80043f4:	4622      	mov	r2, r4
 80043f6:	462b      	mov	r3, r5
 80043f8:	1891      	adds	r1, r2, r2
 80043fa:	6139      	str	r1, [r7, #16]
 80043fc:	415b      	adcs	r3, r3
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004404:	1912      	adds	r2, r2, r4
 8004406:	eb45 0303 	adc.w	r3, r5, r3
 800440a:	f04f 0000 	mov.w	r0, #0
 800440e:	f04f 0100 	mov.w	r1, #0
 8004412:	00d9      	lsls	r1, r3, #3
 8004414:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004418:	00d0      	lsls	r0, r2, #3
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	eb12 0804 	adds.w	r8, r2, r4
 8004422:	eb43 0905 	adc.w	r9, r3, r5
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	008b      	lsls	r3, r1, #2
 800443c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004440:	0082      	lsls	r2, r0, #2
 8004442:	4640      	mov	r0, r8
 8004444:	4649      	mov	r1, r9
 8004446:	f7fb febf 	bl	80001c8 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4b4e      	ldr	r3, [pc, #312]	; (8004588 <UART_SetConfig+0x734>)
 8004450:	fba3 2302 	umull	r2, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	011e      	lsls	r6, r3, #4
 8004458:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800445c:	4618      	mov	r0, r3
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	1894      	adds	r4, r2, r2
 8004468:	60bc      	str	r4, [r7, #8]
 800446a:	415b      	adcs	r3, r3
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004472:	1812      	adds	r2, r2, r0
 8004474:	eb41 0303 	adc.w	r3, r1, r3
 8004478:	f04f 0400 	mov.w	r4, #0
 800447c:	f04f 0500 	mov.w	r5, #0
 8004480:	00dd      	lsls	r5, r3, #3
 8004482:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004486:	00d4      	lsls	r4, r2, #3
 8004488:	4622      	mov	r2, r4
 800448a:	462b      	mov	r3, r5
 800448c:	1814      	adds	r4, r2, r0
 800448e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004492:	414b      	adcs	r3, r1
 8004494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4618      	mov	r0, r3
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	008b      	lsls	r3, r1, #2
 80044ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044b2:	0082      	lsls	r2, r0, #2
 80044b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044b8:	f7fb fe86 	bl	80001c8 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4b31      	ldr	r3, [pc, #196]	; (8004588 <UART_SetConfig+0x734>)
 80044c2:	fba3 1302 	umull	r1, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2164      	movs	r1, #100	; 0x64
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	; 0x32
 80044d4:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <UART_SetConfig+0x734>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e0:	441e      	add	r6, r3
 80044e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	1894      	adds	r4, r2, r2
 80044f2:	603c      	str	r4, [r7, #0]
 80044f4:	415b      	adcs	r3, r3
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fc:	1812      	adds	r2, r2, r0
 80044fe:	eb41 0303 	adc.w	r3, r1, r3
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	f04f 0500 	mov.w	r5, #0
 800450a:	00dd      	lsls	r5, r3, #3
 800450c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004510:	00d4      	lsls	r4, r2, #3
 8004512:	4622      	mov	r2, r4
 8004514:	462b      	mov	r3, r5
 8004516:	1814      	adds	r4, r2, r0
 8004518:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800451c:	414b      	adcs	r3, r1
 800451e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4618      	mov	r0, r3
 800452a:	f04f 0100 	mov.w	r1, #0
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	008b      	lsls	r3, r1, #2
 8004538:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800453c:	0082      	lsls	r2, r0, #2
 800453e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004542:	f7fb fe41 	bl	80001c8 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <UART_SetConfig+0x734>)
 800454c:	fba3 1302 	umull	r1, r3, r3, r2
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2164      	movs	r1, #100	; 0x64
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	3332      	adds	r3, #50	; 0x32
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <UART_SetConfig+0x734>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4432      	add	r2, r6
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	e7ff      	b.n	8004576 <UART_SetConfig+0x722>
 8004576:	bf00      	nop
 8004578:	37f4      	adds	r7, #244	; 0xf4
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	51eb851f 	.word	0x51eb851f

0800458c <__errno>:
 800458c:	4b01      	ldr	r3, [pc, #4]	; (8004594 <__errno+0x8>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	2000000c 	.word	0x2000000c

08004598 <__libc_init_array>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4d0d      	ldr	r5, [pc, #52]	; (80045d0 <__libc_init_array+0x38>)
 800459c:	4c0d      	ldr	r4, [pc, #52]	; (80045d4 <__libc_init_array+0x3c>)
 800459e:	1b64      	subs	r4, r4, r5
 80045a0:	10a4      	asrs	r4, r4, #2
 80045a2:	2600      	movs	r6, #0
 80045a4:	42a6      	cmp	r6, r4
 80045a6:	d109      	bne.n	80045bc <__libc_init_array+0x24>
 80045a8:	4d0b      	ldr	r5, [pc, #44]	; (80045d8 <__libc_init_array+0x40>)
 80045aa:	4c0c      	ldr	r4, [pc, #48]	; (80045dc <__libc_init_array+0x44>)
 80045ac:	f000 fce6 	bl	8004f7c <_init>
 80045b0:	1b64      	subs	r4, r4, r5
 80045b2:	10a4      	asrs	r4, r4, #2
 80045b4:	2600      	movs	r6, #0
 80045b6:	42a6      	cmp	r6, r4
 80045b8:	d105      	bne.n	80045c6 <__libc_init_array+0x2e>
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c0:	4798      	blx	r3
 80045c2:	3601      	adds	r6, #1
 80045c4:	e7ee      	b.n	80045a4 <__libc_init_array+0xc>
 80045c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ca:	4798      	blx	r3
 80045cc:	3601      	adds	r6, #1
 80045ce:	e7f2      	b.n	80045b6 <__libc_init_array+0x1e>
 80045d0:	08005024 	.word	0x08005024
 80045d4:	08005024 	.word	0x08005024
 80045d8:	08005024 	.word	0x08005024
 80045dc:	08005028 	.word	0x08005028

080045e0 <memset>:
 80045e0:	4402      	add	r2, r0
 80045e2:	4603      	mov	r3, r0
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d100      	bne.n	80045ea <memset+0xa>
 80045e8:	4770      	bx	lr
 80045ea:	f803 1b01 	strb.w	r1, [r3], #1
 80045ee:	e7f9      	b.n	80045e4 <memset+0x4>

080045f0 <_puts_r>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	460e      	mov	r6, r1
 80045f4:	4605      	mov	r5, r0
 80045f6:	b118      	cbz	r0, 8004600 <_puts_r+0x10>
 80045f8:	6983      	ldr	r3, [r0, #24]
 80045fa:	b90b      	cbnz	r3, 8004600 <_puts_r+0x10>
 80045fc:	f000 fa48 	bl	8004a90 <__sinit>
 8004600:	69ab      	ldr	r3, [r5, #24]
 8004602:	68ac      	ldr	r4, [r5, #8]
 8004604:	b913      	cbnz	r3, 800460c <_puts_r+0x1c>
 8004606:	4628      	mov	r0, r5
 8004608:	f000 fa42 	bl	8004a90 <__sinit>
 800460c:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <_puts_r+0xd0>)
 800460e:	429c      	cmp	r4, r3
 8004610:	d120      	bne.n	8004654 <_puts_r+0x64>
 8004612:	686c      	ldr	r4, [r5, #4]
 8004614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004616:	07db      	lsls	r3, r3, #31
 8004618:	d405      	bmi.n	8004626 <_puts_r+0x36>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	0598      	lsls	r0, r3, #22
 800461e:	d402      	bmi.n	8004626 <_puts_r+0x36>
 8004620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004622:	f000 fad3 	bl	8004bcc <__retarget_lock_acquire_recursive>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	0719      	lsls	r1, r3, #28
 800462a:	d51d      	bpl.n	8004668 <_puts_r+0x78>
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	b1db      	cbz	r3, 8004668 <_puts_r+0x78>
 8004630:	3e01      	subs	r6, #1
 8004632:	68a3      	ldr	r3, [r4, #8]
 8004634:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004638:	3b01      	subs	r3, #1
 800463a:	60a3      	str	r3, [r4, #8]
 800463c:	bb39      	cbnz	r1, 800468e <_puts_r+0x9e>
 800463e:	2b00      	cmp	r3, #0
 8004640:	da38      	bge.n	80046b4 <_puts_r+0xc4>
 8004642:	4622      	mov	r2, r4
 8004644:	210a      	movs	r1, #10
 8004646:	4628      	mov	r0, r5
 8004648:	f000 f848 	bl	80046dc <__swbuf_r>
 800464c:	3001      	adds	r0, #1
 800464e:	d011      	beq.n	8004674 <_puts_r+0x84>
 8004650:	250a      	movs	r5, #10
 8004652:	e011      	b.n	8004678 <_puts_r+0x88>
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <_puts_r+0xd4>)
 8004656:	429c      	cmp	r4, r3
 8004658:	d101      	bne.n	800465e <_puts_r+0x6e>
 800465a:	68ac      	ldr	r4, [r5, #8]
 800465c:	e7da      	b.n	8004614 <_puts_r+0x24>
 800465e:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <_puts_r+0xd8>)
 8004660:	429c      	cmp	r4, r3
 8004662:	bf08      	it	eq
 8004664:	68ec      	ldreq	r4, [r5, #12]
 8004666:	e7d5      	b.n	8004614 <_puts_r+0x24>
 8004668:	4621      	mov	r1, r4
 800466a:	4628      	mov	r0, r5
 800466c:	f000 f888 	bl	8004780 <__swsetup_r>
 8004670:	2800      	cmp	r0, #0
 8004672:	d0dd      	beq.n	8004630 <_puts_r+0x40>
 8004674:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800467a:	07da      	lsls	r2, r3, #31
 800467c:	d405      	bmi.n	800468a <_puts_r+0x9a>
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	059b      	lsls	r3, r3, #22
 8004682:	d402      	bmi.n	800468a <_puts_r+0x9a>
 8004684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004686:	f000 faa2 	bl	8004bce <__retarget_lock_release_recursive>
 800468a:	4628      	mov	r0, r5
 800468c:	bd70      	pop	{r4, r5, r6, pc}
 800468e:	2b00      	cmp	r3, #0
 8004690:	da04      	bge.n	800469c <_puts_r+0xac>
 8004692:	69a2      	ldr	r2, [r4, #24]
 8004694:	429a      	cmp	r2, r3
 8004696:	dc06      	bgt.n	80046a6 <_puts_r+0xb6>
 8004698:	290a      	cmp	r1, #10
 800469a:	d004      	beq.n	80046a6 <_puts_r+0xb6>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	6022      	str	r2, [r4, #0]
 80046a2:	7019      	strb	r1, [r3, #0]
 80046a4:	e7c5      	b.n	8004632 <_puts_r+0x42>
 80046a6:	4622      	mov	r2, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f817 	bl	80046dc <__swbuf_r>
 80046ae:	3001      	adds	r0, #1
 80046b0:	d1bf      	bne.n	8004632 <_puts_r+0x42>
 80046b2:	e7df      	b.n	8004674 <_puts_r+0x84>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	250a      	movs	r5, #10
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	6022      	str	r2, [r4, #0]
 80046bc:	701d      	strb	r5, [r3, #0]
 80046be:	e7db      	b.n	8004678 <_puts_r+0x88>
 80046c0:	08004fdc 	.word	0x08004fdc
 80046c4:	08004ffc 	.word	0x08004ffc
 80046c8:	08004fbc 	.word	0x08004fbc

080046cc <puts>:
 80046cc:	4b02      	ldr	r3, [pc, #8]	; (80046d8 <puts+0xc>)
 80046ce:	4601      	mov	r1, r0
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	f7ff bf8d 	b.w	80045f0 <_puts_r>
 80046d6:	bf00      	nop
 80046d8:	2000000c 	.word	0x2000000c

080046dc <__swbuf_r>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	460e      	mov	r6, r1
 80046e0:	4614      	mov	r4, r2
 80046e2:	4605      	mov	r5, r0
 80046e4:	b118      	cbz	r0, 80046ee <__swbuf_r+0x12>
 80046e6:	6983      	ldr	r3, [r0, #24]
 80046e8:	b90b      	cbnz	r3, 80046ee <__swbuf_r+0x12>
 80046ea:	f000 f9d1 	bl	8004a90 <__sinit>
 80046ee:	4b21      	ldr	r3, [pc, #132]	; (8004774 <__swbuf_r+0x98>)
 80046f0:	429c      	cmp	r4, r3
 80046f2:	d12b      	bne.n	800474c <__swbuf_r+0x70>
 80046f4:	686c      	ldr	r4, [r5, #4]
 80046f6:	69a3      	ldr	r3, [r4, #24]
 80046f8:	60a3      	str	r3, [r4, #8]
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	071a      	lsls	r2, r3, #28
 80046fe:	d52f      	bpl.n	8004760 <__swbuf_r+0x84>
 8004700:	6923      	ldr	r3, [r4, #16]
 8004702:	b36b      	cbz	r3, 8004760 <__swbuf_r+0x84>
 8004704:	6923      	ldr	r3, [r4, #16]
 8004706:	6820      	ldr	r0, [r4, #0]
 8004708:	1ac0      	subs	r0, r0, r3
 800470a:	6963      	ldr	r3, [r4, #20]
 800470c:	b2f6      	uxtb	r6, r6
 800470e:	4283      	cmp	r3, r0
 8004710:	4637      	mov	r7, r6
 8004712:	dc04      	bgt.n	800471e <__swbuf_r+0x42>
 8004714:	4621      	mov	r1, r4
 8004716:	4628      	mov	r0, r5
 8004718:	f000 f926 	bl	8004968 <_fflush_r>
 800471c:	bb30      	cbnz	r0, 800476c <__swbuf_r+0x90>
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	3b01      	subs	r3, #1
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	6022      	str	r2, [r4, #0]
 800472a:	701e      	strb	r6, [r3, #0]
 800472c:	6963      	ldr	r3, [r4, #20]
 800472e:	3001      	adds	r0, #1
 8004730:	4283      	cmp	r3, r0
 8004732:	d004      	beq.n	800473e <__swbuf_r+0x62>
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	07db      	lsls	r3, r3, #31
 8004738:	d506      	bpl.n	8004748 <__swbuf_r+0x6c>
 800473a:	2e0a      	cmp	r6, #10
 800473c:	d104      	bne.n	8004748 <__swbuf_r+0x6c>
 800473e:	4621      	mov	r1, r4
 8004740:	4628      	mov	r0, r5
 8004742:	f000 f911 	bl	8004968 <_fflush_r>
 8004746:	b988      	cbnz	r0, 800476c <__swbuf_r+0x90>
 8004748:	4638      	mov	r0, r7
 800474a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <__swbuf_r+0x9c>)
 800474e:	429c      	cmp	r4, r3
 8004750:	d101      	bne.n	8004756 <__swbuf_r+0x7a>
 8004752:	68ac      	ldr	r4, [r5, #8]
 8004754:	e7cf      	b.n	80046f6 <__swbuf_r+0x1a>
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <__swbuf_r+0xa0>)
 8004758:	429c      	cmp	r4, r3
 800475a:	bf08      	it	eq
 800475c:	68ec      	ldreq	r4, [r5, #12]
 800475e:	e7ca      	b.n	80046f6 <__swbuf_r+0x1a>
 8004760:	4621      	mov	r1, r4
 8004762:	4628      	mov	r0, r5
 8004764:	f000 f80c 	bl	8004780 <__swsetup_r>
 8004768:	2800      	cmp	r0, #0
 800476a:	d0cb      	beq.n	8004704 <__swbuf_r+0x28>
 800476c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004770:	e7ea      	b.n	8004748 <__swbuf_r+0x6c>
 8004772:	bf00      	nop
 8004774:	08004fdc 	.word	0x08004fdc
 8004778:	08004ffc 	.word	0x08004ffc
 800477c:	08004fbc 	.word	0x08004fbc

08004780 <__swsetup_r>:
 8004780:	4b32      	ldr	r3, [pc, #200]	; (800484c <__swsetup_r+0xcc>)
 8004782:	b570      	push	{r4, r5, r6, lr}
 8004784:	681d      	ldr	r5, [r3, #0]
 8004786:	4606      	mov	r6, r0
 8004788:	460c      	mov	r4, r1
 800478a:	b125      	cbz	r5, 8004796 <__swsetup_r+0x16>
 800478c:	69ab      	ldr	r3, [r5, #24]
 800478e:	b913      	cbnz	r3, 8004796 <__swsetup_r+0x16>
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f97d 	bl	8004a90 <__sinit>
 8004796:	4b2e      	ldr	r3, [pc, #184]	; (8004850 <__swsetup_r+0xd0>)
 8004798:	429c      	cmp	r4, r3
 800479a:	d10f      	bne.n	80047bc <__swsetup_r+0x3c>
 800479c:	686c      	ldr	r4, [r5, #4]
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047a4:	0719      	lsls	r1, r3, #28
 80047a6:	d42c      	bmi.n	8004802 <__swsetup_r+0x82>
 80047a8:	06dd      	lsls	r5, r3, #27
 80047aa:	d411      	bmi.n	80047d0 <__swsetup_r+0x50>
 80047ac:	2309      	movs	r3, #9
 80047ae:	6033      	str	r3, [r6, #0]
 80047b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ba:	e03e      	b.n	800483a <__swsetup_r+0xba>
 80047bc:	4b25      	ldr	r3, [pc, #148]	; (8004854 <__swsetup_r+0xd4>)
 80047be:	429c      	cmp	r4, r3
 80047c0:	d101      	bne.n	80047c6 <__swsetup_r+0x46>
 80047c2:	68ac      	ldr	r4, [r5, #8]
 80047c4:	e7eb      	b.n	800479e <__swsetup_r+0x1e>
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <__swsetup_r+0xd8>)
 80047c8:	429c      	cmp	r4, r3
 80047ca:	bf08      	it	eq
 80047cc:	68ec      	ldreq	r4, [r5, #12]
 80047ce:	e7e6      	b.n	800479e <__swsetup_r+0x1e>
 80047d0:	0758      	lsls	r0, r3, #29
 80047d2:	d512      	bpl.n	80047fa <__swsetup_r+0x7a>
 80047d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047d6:	b141      	cbz	r1, 80047ea <__swsetup_r+0x6a>
 80047d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047dc:	4299      	cmp	r1, r3
 80047de:	d002      	beq.n	80047e6 <__swsetup_r+0x66>
 80047e0:	4630      	mov	r0, r6
 80047e2:	f000 fa59 	bl	8004c98 <_free_r>
 80047e6:	2300      	movs	r3, #0
 80047e8:	6363      	str	r3, [r4, #52]	; 0x34
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	2300      	movs	r3, #0
 80047f4:	6063      	str	r3, [r4, #4]
 80047f6:	6923      	ldr	r3, [r4, #16]
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	f043 0308 	orr.w	r3, r3, #8
 8004800:	81a3      	strh	r3, [r4, #12]
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	b94b      	cbnz	r3, 800481a <__swsetup_r+0x9a>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004810:	d003      	beq.n	800481a <__swsetup_r+0x9a>
 8004812:	4621      	mov	r1, r4
 8004814:	4630      	mov	r0, r6
 8004816:	f000 f9ff 	bl	8004c18 <__smakebuf_r>
 800481a:	89a0      	ldrh	r0, [r4, #12]
 800481c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004820:	f010 0301 	ands.w	r3, r0, #1
 8004824:	d00a      	beq.n	800483c <__swsetup_r+0xbc>
 8004826:	2300      	movs	r3, #0
 8004828:	60a3      	str	r3, [r4, #8]
 800482a:	6963      	ldr	r3, [r4, #20]
 800482c:	425b      	negs	r3, r3
 800482e:	61a3      	str	r3, [r4, #24]
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	b943      	cbnz	r3, 8004846 <__swsetup_r+0xc6>
 8004834:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004838:	d1ba      	bne.n	80047b0 <__swsetup_r+0x30>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	0781      	lsls	r1, r0, #30
 800483e:	bf58      	it	pl
 8004840:	6963      	ldrpl	r3, [r4, #20]
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	e7f4      	b.n	8004830 <__swsetup_r+0xb0>
 8004846:	2000      	movs	r0, #0
 8004848:	e7f7      	b.n	800483a <__swsetup_r+0xba>
 800484a:	bf00      	nop
 800484c:	2000000c 	.word	0x2000000c
 8004850:	08004fdc 	.word	0x08004fdc
 8004854:	08004ffc 	.word	0x08004ffc
 8004858:	08004fbc 	.word	0x08004fbc

0800485c <__sflush_r>:
 800485c:	898a      	ldrh	r2, [r1, #12]
 800485e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004862:	4605      	mov	r5, r0
 8004864:	0710      	lsls	r0, r2, #28
 8004866:	460c      	mov	r4, r1
 8004868:	d458      	bmi.n	800491c <__sflush_r+0xc0>
 800486a:	684b      	ldr	r3, [r1, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	dc05      	bgt.n	800487c <__sflush_r+0x20>
 8004870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	dc02      	bgt.n	800487c <__sflush_r+0x20>
 8004876:	2000      	movs	r0, #0
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800487e:	2e00      	cmp	r6, #0
 8004880:	d0f9      	beq.n	8004876 <__sflush_r+0x1a>
 8004882:	2300      	movs	r3, #0
 8004884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004888:	682f      	ldr	r7, [r5, #0]
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	d032      	beq.n	80048f4 <__sflush_r+0x98>
 800488e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	075a      	lsls	r2, r3, #29
 8004894:	d505      	bpl.n	80048a2 <__sflush_r+0x46>
 8004896:	6863      	ldr	r3, [r4, #4]
 8004898:	1ac0      	subs	r0, r0, r3
 800489a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800489c:	b10b      	cbz	r3, 80048a2 <__sflush_r+0x46>
 800489e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048a0:	1ac0      	subs	r0, r0, r3
 80048a2:	2300      	movs	r3, #0
 80048a4:	4602      	mov	r2, r0
 80048a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048a8:	6a21      	ldr	r1, [r4, #32]
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b0      	blx	r6
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	d106      	bne.n	80048c2 <__sflush_r+0x66>
 80048b4:	6829      	ldr	r1, [r5, #0]
 80048b6:	291d      	cmp	r1, #29
 80048b8:	d82c      	bhi.n	8004914 <__sflush_r+0xb8>
 80048ba:	4a2a      	ldr	r2, [pc, #168]	; (8004964 <__sflush_r+0x108>)
 80048bc:	40ca      	lsrs	r2, r1
 80048be:	07d6      	lsls	r6, r2, #31
 80048c0:	d528      	bpl.n	8004914 <__sflush_r+0xb8>
 80048c2:	2200      	movs	r2, #0
 80048c4:	6062      	str	r2, [r4, #4]
 80048c6:	04d9      	lsls	r1, r3, #19
 80048c8:	6922      	ldr	r2, [r4, #16]
 80048ca:	6022      	str	r2, [r4, #0]
 80048cc:	d504      	bpl.n	80048d8 <__sflush_r+0x7c>
 80048ce:	1c42      	adds	r2, r0, #1
 80048d0:	d101      	bne.n	80048d6 <__sflush_r+0x7a>
 80048d2:	682b      	ldr	r3, [r5, #0]
 80048d4:	b903      	cbnz	r3, 80048d8 <__sflush_r+0x7c>
 80048d6:	6560      	str	r0, [r4, #84]	; 0x54
 80048d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048da:	602f      	str	r7, [r5, #0]
 80048dc:	2900      	cmp	r1, #0
 80048de:	d0ca      	beq.n	8004876 <__sflush_r+0x1a>
 80048e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048e4:	4299      	cmp	r1, r3
 80048e6:	d002      	beq.n	80048ee <__sflush_r+0x92>
 80048e8:	4628      	mov	r0, r5
 80048ea:	f000 f9d5 	bl	8004c98 <_free_r>
 80048ee:	2000      	movs	r0, #0
 80048f0:	6360      	str	r0, [r4, #52]	; 0x34
 80048f2:	e7c1      	b.n	8004878 <__sflush_r+0x1c>
 80048f4:	6a21      	ldr	r1, [r4, #32]
 80048f6:	2301      	movs	r3, #1
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b0      	blx	r6
 80048fc:	1c41      	adds	r1, r0, #1
 80048fe:	d1c7      	bne.n	8004890 <__sflush_r+0x34>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0c4      	beq.n	8004890 <__sflush_r+0x34>
 8004906:	2b1d      	cmp	r3, #29
 8004908:	d001      	beq.n	800490e <__sflush_r+0xb2>
 800490a:	2b16      	cmp	r3, #22
 800490c:	d101      	bne.n	8004912 <__sflush_r+0xb6>
 800490e:	602f      	str	r7, [r5, #0]
 8004910:	e7b1      	b.n	8004876 <__sflush_r+0x1a>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	e7ad      	b.n	8004878 <__sflush_r+0x1c>
 800491c:	690f      	ldr	r7, [r1, #16]
 800491e:	2f00      	cmp	r7, #0
 8004920:	d0a9      	beq.n	8004876 <__sflush_r+0x1a>
 8004922:	0793      	lsls	r3, r2, #30
 8004924:	680e      	ldr	r6, [r1, #0]
 8004926:	bf08      	it	eq
 8004928:	694b      	ldreq	r3, [r1, #20]
 800492a:	600f      	str	r7, [r1, #0]
 800492c:	bf18      	it	ne
 800492e:	2300      	movne	r3, #0
 8004930:	eba6 0807 	sub.w	r8, r6, r7
 8004934:	608b      	str	r3, [r1, #8]
 8004936:	f1b8 0f00 	cmp.w	r8, #0
 800493a:	dd9c      	ble.n	8004876 <__sflush_r+0x1a>
 800493c:	6a21      	ldr	r1, [r4, #32]
 800493e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004940:	4643      	mov	r3, r8
 8004942:	463a      	mov	r2, r7
 8004944:	4628      	mov	r0, r5
 8004946:	47b0      	blx	r6
 8004948:	2800      	cmp	r0, #0
 800494a:	dc06      	bgt.n	800495a <__sflush_r+0xfe>
 800494c:	89a3      	ldrh	r3, [r4, #12]
 800494e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004958:	e78e      	b.n	8004878 <__sflush_r+0x1c>
 800495a:	4407      	add	r7, r0
 800495c:	eba8 0800 	sub.w	r8, r8, r0
 8004960:	e7e9      	b.n	8004936 <__sflush_r+0xda>
 8004962:	bf00      	nop
 8004964:	20400001 	.word	0x20400001

08004968 <_fflush_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	690b      	ldr	r3, [r1, #16]
 800496c:	4605      	mov	r5, r0
 800496e:	460c      	mov	r4, r1
 8004970:	b913      	cbnz	r3, 8004978 <_fflush_r+0x10>
 8004972:	2500      	movs	r5, #0
 8004974:	4628      	mov	r0, r5
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	b118      	cbz	r0, 8004982 <_fflush_r+0x1a>
 800497a:	6983      	ldr	r3, [r0, #24]
 800497c:	b90b      	cbnz	r3, 8004982 <_fflush_r+0x1a>
 800497e:	f000 f887 	bl	8004a90 <__sinit>
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <_fflush_r+0x6c>)
 8004984:	429c      	cmp	r4, r3
 8004986:	d11b      	bne.n	80049c0 <_fflush_r+0x58>
 8004988:	686c      	ldr	r4, [r5, #4]
 800498a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0ef      	beq.n	8004972 <_fflush_r+0xa>
 8004992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004994:	07d0      	lsls	r0, r2, #31
 8004996:	d404      	bmi.n	80049a2 <_fflush_r+0x3a>
 8004998:	0599      	lsls	r1, r3, #22
 800499a:	d402      	bmi.n	80049a2 <_fflush_r+0x3a>
 800499c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800499e:	f000 f915 	bl	8004bcc <__retarget_lock_acquire_recursive>
 80049a2:	4628      	mov	r0, r5
 80049a4:	4621      	mov	r1, r4
 80049a6:	f7ff ff59 	bl	800485c <__sflush_r>
 80049aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ac:	07da      	lsls	r2, r3, #31
 80049ae:	4605      	mov	r5, r0
 80049b0:	d4e0      	bmi.n	8004974 <_fflush_r+0xc>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	059b      	lsls	r3, r3, #22
 80049b6:	d4dd      	bmi.n	8004974 <_fflush_r+0xc>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f000 f908 	bl	8004bce <__retarget_lock_release_recursive>
 80049be:	e7d9      	b.n	8004974 <_fflush_r+0xc>
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <_fflush_r+0x70>)
 80049c2:	429c      	cmp	r4, r3
 80049c4:	d101      	bne.n	80049ca <_fflush_r+0x62>
 80049c6:	68ac      	ldr	r4, [r5, #8]
 80049c8:	e7df      	b.n	800498a <_fflush_r+0x22>
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <_fflush_r+0x74>)
 80049cc:	429c      	cmp	r4, r3
 80049ce:	bf08      	it	eq
 80049d0:	68ec      	ldreq	r4, [r5, #12]
 80049d2:	e7da      	b.n	800498a <_fflush_r+0x22>
 80049d4:	08004fdc 	.word	0x08004fdc
 80049d8:	08004ffc 	.word	0x08004ffc
 80049dc:	08004fbc 	.word	0x08004fbc

080049e0 <std>:
 80049e0:	2300      	movs	r3, #0
 80049e2:	b510      	push	{r4, lr}
 80049e4:	4604      	mov	r4, r0
 80049e6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ee:	6083      	str	r3, [r0, #8]
 80049f0:	8181      	strh	r1, [r0, #12]
 80049f2:	6643      	str	r3, [r0, #100]	; 0x64
 80049f4:	81c2      	strh	r2, [r0, #14]
 80049f6:	6183      	str	r3, [r0, #24]
 80049f8:	4619      	mov	r1, r3
 80049fa:	2208      	movs	r2, #8
 80049fc:	305c      	adds	r0, #92	; 0x5c
 80049fe:	f7ff fdef 	bl	80045e0 <memset>
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <std+0x38>)
 8004a04:	6263      	str	r3, [r4, #36]	; 0x24
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <std+0x3c>)
 8004a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <std+0x40>)
 8004a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <std+0x44>)
 8004a10:	6224      	str	r4, [r4, #32]
 8004a12:	6323      	str	r3, [r4, #48]	; 0x30
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	bf00      	nop
 8004a18:	08004e0d 	.word	0x08004e0d
 8004a1c:	08004e2f 	.word	0x08004e2f
 8004a20:	08004e67 	.word	0x08004e67
 8004a24:	08004e8b 	.word	0x08004e8b

08004a28 <_cleanup_r>:
 8004a28:	4901      	ldr	r1, [pc, #4]	; (8004a30 <_cleanup_r+0x8>)
 8004a2a:	f000 b8af 	b.w	8004b8c <_fwalk_reent>
 8004a2e:	bf00      	nop
 8004a30:	08004969 	.word	0x08004969

08004a34 <__sfmoreglue>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	1e4a      	subs	r2, r1, #1
 8004a38:	2568      	movs	r5, #104	; 0x68
 8004a3a:	4355      	muls	r5, r2
 8004a3c:	460e      	mov	r6, r1
 8004a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a42:	f000 f979 	bl	8004d38 <_malloc_r>
 8004a46:	4604      	mov	r4, r0
 8004a48:	b140      	cbz	r0, 8004a5c <__sfmoreglue+0x28>
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a50:	300c      	adds	r0, #12
 8004a52:	60a0      	str	r0, [r4, #8]
 8004a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a58:	f7ff fdc2 	bl	80045e0 <memset>
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}

08004a60 <__sfp_lock_acquire>:
 8004a60:	4801      	ldr	r0, [pc, #4]	; (8004a68 <__sfp_lock_acquire+0x8>)
 8004a62:	f000 b8b3 	b.w	8004bcc <__retarget_lock_acquire_recursive>
 8004a66:	bf00      	nop
 8004a68:	200136d8 	.word	0x200136d8

08004a6c <__sfp_lock_release>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__sfp_lock_release+0x8>)
 8004a6e:	f000 b8ae 	b.w	8004bce <__retarget_lock_release_recursive>
 8004a72:	bf00      	nop
 8004a74:	200136d8 	.word	0x200136d8

08004a78 <__sinit_lock_acquire>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__sinit_lock_acquire+0x8>)
 8004a7a:	f000 b8a7 	b.w	8004bcc <__retarget_lock_acquire_recursive>
 8004a7e:	bf00      	nop
 8004a80:	200136d3 	.word	0x200136d3

08004a84 <__sinit_lock_release>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__sinit_lock_release+0x8>)
 8004a86:	f000 b8a2 	b.w	8004bce <__retarget_lock_release_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	200136d3 	.word	0x200136d3

08004a90 <__sinit>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	4604      	mov	r4, r0
 8004a94:	f7ff fff0 	bl	8004a78 <__sinit_lock_acquire>
 8004a98:	69a3      	ldr	r3, [r4, #24]
 8004a9a:	b11b      	cbz	r3, 8004aa4 <__sinit+0x14>
 8004a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa0:	f7ff bff0 	b.w	8004a84 <__sinit_lock_release>
 8004aa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004aa8:	6523      	str	r3, [r4, #80]	; 0x50
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <__sinit+0x68>)
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <__sinit+0x6c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	bf04      	itt	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	61a3      	streq	r3, [r4, #24]
 8004aba:	4620      	mov	r0, r4
 8004abc:	f000 f820 	bl	8004b00 <__sfp>
 8004ac0:	6060      	str	r0, [r4, #4]
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 f81c 	bl	8004b00 <__sfp>
 8004ac8:	60a0      	str	r0, [r4, #8]
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 f818 	bl	8004b00 <__sfp>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	60e0      	str	r0, [r4, #12]
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	6860      	ldr	r0, [r4, #4]
 8004ad8:	f7ff ff82 	bl	80049e0 <std>
 8004adc:	68a0      	ldr	r0, [r4, #8]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	2109      	movs	r1, #9
 8004ae2:	f7ff ff7d 	bl	80049e0 <std>
 8004ae6:	68e0      	ldr	r0, [r4, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	2112      	movs	r1, #18
 8004aec:	f7ff ff78 	bl	80049e0 <std>
 8004af0:	2301      	movs	r3, #1
 8004af2:	61a3      	str	r3, [r4, #24]
 8004af4:	e7d2      	b.n	8004a9c <__sinit+0xc>
 8004af6:	bf00      	nop
 8004af8:	08004fb8 	.word	0x08004fb8
 8004afc:	08004a29 	.word	0x08004a29

08004b00 <__sfp>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	4607      	mov	r7, r0
 8004b04:	f7ff ffac 	bl	8004a60 <__sfp_lock_acquire>
 8004b08:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <__sfp+0x84>)
 8004b0a:	681e      	ldr	r6, [r3, #0]
 8004b0c:	69b3      	ldr	r3, [r6, #24]
 8004b0e:	b913      	cbnz	r3, 8004b16 <__sfp+0x16>
 8004b10:	4630      	mov	r0, r6
 8004b12:	f7ff ffbd 	bl	8004a90 <__sinit>
 8004b16:	3648      	adds	r6, #72	; 0x48
 8004b18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	d503      	bpl.n	8004b28 <__sfp+0x28>
 8004b20:	6833      	ldr	r3, [r6, #0]
 8004b22:	b30b      	cbz	r3, 8004b68 <__sfp+0x68>
 8004b24:	6836      	ldr	r6, [r6, #0]
 8004b26:	e7f7      	b.n	8004b18 <__sfp+0x18>
 8004b28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b2c:	b9d5      	cbnz	r5, 8004b64 <__sfp+0x64>
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <__sfp+0x88>)
 8004b30:	60e3      	str	r3, [r4, #12]
 8004b32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b36:	6665      	str	r5, [r4, #100]	; 0x64
 8004b38:	f000 f847 	bl	8004bca <__retarget_lock_init_recursive>
 8004b3c:	f7ff ff96 	bl	8004a6c <__sfp_lock_release>
 8004b40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b48:	6025      	str	r5, [r4, #0]
 8004b4a:	61a5      	str	r5, [r4, #24]
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b54:	f7ff fd44 	bl	80045e0 <memset>
 8004b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b60:	4620      	mov	r0, r4
 8004b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b64:	3468      	adds	r4, #104	; 0x68
 8004b66:	e7d9      	b.n	8004b1c <__sfp+0x1c>
 8004b68:	2104      	movs	r1, #4
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	f7ff ff62 	bl	8004a34 <__sfmoreglue>
 8004b70:	4604      	mov	r4, r0
 8004b72:	6030      	str	r0, [r6, #0]
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d1d5      	bne.n	8004b24 <__sfp+0x24>
 8004b78:	f7ff ff78 	bl	8004a6c <__sfp_lock_release>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	e7ee      	b.n	8004b60 <__sfp+0x60>
 8004b82:	bf00      	nop
 8004b84:	08004fb8 	.word	0x08004fb8
 8004b88:	ffff0001 	.word	0xffff0001

08004b8c <_fwalk_reent>:
 8004b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b90:	4606      	mov	r6, r0
 8004b92:	4688      	mov	r8, r1
 8004b94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b98:	2700      	movs	r7, #0
 8004b9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8004ba2:	d505      	bpl.n	8004bb0 <_fwalk_reent+0x24>
 8004ba4:	6824      	ldr	r4, [r4, #0]
 8004ba6:	2c00      	cmp	r4, #0
 8004ba8:	d1f7      	bne.n	8004b9a <_fwalk_reent+0xe>
 8004baa:	4638      	mov	r0, r7
 8004bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb0:	89ab      	ldrh	r3, [r5, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d907      	bls.n	8004bc6 <_fwalk_reent+0x3a>
 8004bb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	d003      	beq.n	8004bc6 <_fwalk_reent+0x3a>
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	47c0      	blx	r8
 8004bc4:	4307      	orrs	r7, r0
 8004bc6:	3568      	adds	r5, #104	; 0x68
 8004bc8:	e7e9      	b.n	8004b9e <_fwalk_reent+0x12>

08004bca <__retarget_lock_init_recursive>:
 8004bca:	4770      	bx	lr

08004bcc <__retarget_lock_acquire_recursive>:
 8004bcc:	4770      	bx	lr

08004bce <__retarget_lock_release_recursive>:
 8004bce:	4770      	bx	lr

08004bd0 <__swhatbuf_r>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	460e      	mov	r6, r1
 8004bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	b096      	sub	sp, #88	; 0x58
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	da07      	bge.n	8004bf2 <__swhatbuf_r+0x22>
 8004be2:	2300      	movs	r3, #0
 8004be4:	602b      	str	r3, [r5, #0]
 8004be6:	89b3      	ldrh	r3, [r6, #12]
 8004be8:	061a      	lsls	r2, r3, #24
 8004bea:	d410      	bmi.n	8004c0e <__swhatbuf_r+0x3e>
 8004bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf0:	e00e      	b.n	8004c10 <__swhatbuf_r+0x40>
 8004bf2:	466a      	mov	r2, sp
 8004bf4:	f000 f970 	bl	8004ed8 <_fstat_r>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	dbf2      	blt.n	8004be2 <__swhatbuf_r+0x12>
 8004bfc:	9a01      	ldr	r2, [sp, #4]
 8004bfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c06:	425a      	negs	r2, r3
 8004c08:	415a      	adcs	r2, r3
 8004c0a:	602a      	str	r2, [r5, #0]
 8004c0c:	e7ee      	b.n	8004bec <__swhatbuf_r+0x1c>
 8004c0e:	2340      	movs	r3, #64	; 0x40
 8004c10:	2000      	movs	r0, #0
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	b016      	add	sp, #88	; 0x58
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <__smakebuf_r>:
 8004c18:	898b      	ldrh	r3, [r1, #12]
 8004c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c1c:	079d      	lsls	r5, r3, #30
 8004c1e:	4606      	mov	r6, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	d507      	bpl.n	8004c34 <__smakebuf_r+0x1c>
 8004c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	6163      	str	r3, [r4, #20]
 8004c30:	b002      	add	sp, #8
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	ab01      	add	r3, sp, #4
 8004c36:	466a      	mov	r2, sp
 8004c38:	f7ff ffca 	bl	8004bd0 <__swhatbuf_r>
 8004c3c:	9900      	ldr	r1, [sp, #0]
 8004c3e:	4605      	mov	r5, r0
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 f879 	bl	8004d38 <_malloc_r>
 8004c46:	b948      	cbnz	r0, 8004c5c <__smakebuf_r+0x44>
 8004c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4c:	059a      	lsls	r2, r3, #22
 8004c4e:	d4ef      	bmi.n	8004c30 <__smakebuf_r+0x18>
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	e7e3      	b.n	8004c24 <__smakebuf_r+0xc>
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <__smakebuf_r+0x7c>)
 8004c5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	6020      	str	r0, [r4, #0]
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	9b00      	ldr	r3, [sp, #0]
 8004c6c:	6163      	str	r3, [r4, #20]
 8004c6e:	9b01      	ldr	r3, [sp, #4]
 8004c70:	6120      	str	r0, [r4, #16]
 8004c72:	b15b      	cbz	r3, 8004c8c <__smakebuf_r+0x74>
 8004c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f000 f93f 	bl	8004efc <_isatty_r>
 8004c7e:	b128      	cbz	r0, 8004c8c <__smakebuf_r+0x74>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	89a0      	ldrh	r0, [r4, #12]
 8004c8e:	4305      	orrs	r5, r0
 8004c90:	81a5      	strh	r5, [r4, #12]
 8004c92:	e7cd      	b.n	8004c30 <__smakebuf_r+0x18>
 8004c94:	08004a29 	.word	0x08004a29

08004c98 <_free_r>:
 8004c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c9a:	2900      	cmp	r1, #0
 8004c9c:	d048      	beq.n	8004d30 <_free_r+0x98>
 8004c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca2:	9001      	str	r0, [sp, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8004caa:	bfb8      	it	lt
 8004cac:	18e4      	addlt	r4, r4, r3
 8004cae:	f000 f947 	bl	8004f40 <__malloc_lock>
 8004cb2:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <_free_r+0x9c>)
 8004cb4:	9801      	ldr	r0, [sp, #4]
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	4615      	mov	r5, r2
 8004cba:	b933      	cbnz	r3, 8004cca <_free_r+0x32>
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	6014      	str	r4, [r2, #0]
 8004cc0:	b003      	add	sp, #12
 8004cc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cc6:	f000 b941 	b.w	8004f4c <__malloc_unlock>
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	d90b      	bls.n	8004ce6 <_free_r+0x4e>
 8004cce:	6821      	ldr	r1, [r4, #0]
 8004cd0:	1862      	adds	r2, r4, r1
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	bf04      	itt	eq
 8004cd6:	681a      	ldreq	r2, [r3, #0]
 8004cd8:	685b      	ldreq	r3, [r3, #4]
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	bf04      	itt	eq
 8004cde:	1852      	addeq	r2, r2, r1
 8004ce0:	6022      	streq	r2, [r4, #0]
 8004ce2:	602c      	str	r4, [r5, #0]
 8004ce4:	e7ec      	b.n	8004cc0 <_free_r+0x28>
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b10b      	cbz	r3, 8004cf0 <_free_r+0x58>
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	d9fa      	bls.n	8004ce6 <_free_r+0x4e>
 8004cf0:	6811      	ldr	r1, [r2, #0]
 8004cf2:	1855      	adds	r5, r2, r1
 8004cf4:	42a5      	cmp	r5, r4
 8004cf6:	d10b      	bne.n	8004d10 <_free_r+0x78>
 8004cf8:	6824      	ldr	r4, [r4, #0]
 8004cfa:	4421      	add	r1, r4
 8004cfc:	1854      	adds	r4, r2, r1
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	d1dd      	bne.n	8004cc0 <_free_r+0x28>
 8004d04:	681c      	ldr	r4, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	6053      	str	r3, [r2, #4]
 8004d0a:	4421      	add	r1, r4
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	e7d7      	b.n	8004cc0 <_free_r+0x28>
 8004d10:	d902      	bls.n	8004d18 <_free_r+0x80>
 8004d12:	230c      	movs	r3, #12
 8004d14:	6003      	str	r3, [r0, #0]
 8004d16:	e7d3      	b.n	8004cc0 <_free_r+0x28>
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf04      	itt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	6063      	str	r3, [r4, #4]
 8004d26:	bf04      	itt	eq
 8004d28:	1949      	addeq	r1, r1, r5
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	6054      	str	r4, [r2, #4]
 8004d2e:	e7c7      	b.n	8004cc0 <_free_r+0x28>
 8004d30:	b003      	add	sp, #12
 8004d32:	bd30      	pop	{r4, r5, pc}
 8004d34:	20000090 	.word	0x20000090

08004d38 <_malloc_r>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	1ccd      	adds	r5, r1, #3
 8004d3c:	f025 0503 	bic.w	r5, r5, #3
 8004d40:	3508      	adds	r5, #8
 8004d42:	2d0c      	cmp	r5, #12
 8004d44:	bf38      	it	cc
 8004d46:	250c      	movcc	r5, #12
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	db01      	blt.n	8004d52 <_malloc_r+0x1a>
 8004d4e:	42a9      	cmp	r1, r5
 8004d50:	d903      	bls.n	8004d5a <_malloc_r+0x22>
 8004d52:	230c      	movs	r3, #12
 8004d54:	6033      	str	r3, [r6, #0]
 8004d56:	2000      	movs	r0, #0
 8004d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d5a:	f000 f8f1 	bl	8004f40 <__malloc_lock>
 8004d5e:	4921      	ldr	r1, [pc, #132]	; (8004de4 <_malloc_r+0xac>)
 8004d60:	680a      	ldr	r2, [r1, #0]
 8004d62:	4614      	mov	r4, r2
 8004d64:	b99c      	cbnz	r4, 8004d8e <_malloc_r+0x56>
 8004d66:	4f20      	ldr	r7, [pc, #128]	; (8004de8 <_malloc_r+0xb0>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	b923      	cbnz	r3, 8004d76 <_malloc_r+0x3e>
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f000 f83c 	bl	8004dec <_sbrk_r>
 8004d74:	6038      	str	r0, [r7, #0]
 8004d76:	4629      	mov	r1, r5
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f000 f837 	bl	8004dec <_sbrk_r>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	d123      	bne.n	8004dca <_malloc_r+0x92>
 8004d82:	230c      	movs	r3, #12
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	4630      	mov	r0, r6
 8004d88:	f000 f8e0 	bl	8004f4c <__malloc_unlock>
 8004d8c:	e7e3      	b.n	8004d56 <_malloc_r+0x1e>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	1b5b      	subs	r3, r3, r5
 8004d92:	d417      	bmi.n	8004dc4 <_malloc_r+0x8c>
 8004d94:	2b0b      	cmp	r3, #11
 8004d96:	d903      	bls.n	8004da0 <_malloc_r+0x68>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	441c      	add	r4, r3
 8004d9c:	6025      	str	r5, [r4, #0]
 8004d9e:	e004      	b.n	8004daa <_malloc_r+0x72>
 8004da0:	6863      	ldr	r3, [r4, #4]
 8004da2:	42a2      	cmp	r2, r4
 8004da4:	bf0c      	ite	eq
 8004da6:	600b      	streq	r3, [r1, #0]
 8004da8:	6053      	strne	r3, [r2, #4]
 8004daa:	4630      	mov	r0, r6
 8004dac:	f000 f8ce 	bl	8004f4c <__malloc_unlock>
 8004db0:	f104 000b 	add.w	r0, r4, #11
 8004db4:	1d23      	adds	r3, r4, #4
 8004db6:	f020 0007 	bic.w	r0, r0, #7
 8004dba:	1ac2      	subs	r2, r0, r3
 8004dbc:	d0cc      	beq.n	8004d58 <_malloc_r+0x20>
 8004dbe:	1a1b      	subs	r3, r3, r0
 8004dc0:	50a3      	str	r3, [r4, r2]
 8004dc2:	e7c9      	b.n	8004d58 <_malloc_r+0x20>
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	6864      	ldr	r4, [r4, #4]
 8004dc8:	e7cc      	b.n	8004d64 <_malloc_r+0x2c>
 8004dca:	1cc4      	adds	r4, r0, #3
 8004dcc:	f024 0403 	bic.w	r4, r4, #3
 8004dd0:	42a0      	cmp	r0, r4
 8004dd2:	d0e3      	beq.n	8004d9c <_malloc_r+0x64>
 8004dd4:	1a21      	subs	r1, r4, r0
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f000 f808 	bl	8004dec <_sbrk_r>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d1dd      	bne.n	8004d9c <_malloc_r+0x64>
 8004de0:	e7cf      	b.n	8004d82 <_malloc_r+0x4a>
 8004de2:	bf00      	nop
 8004de4:	20000090 	.word	0x20000090
 8004de8:	20000094 	.word	0x20000094

08004dec <_sbrk_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4d06      	ldr	r5, [pc, #24]	; (8004e08 <_sbrk_r+0x1c>)
 8004df0:	2300      	movs	r3, #0
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	602b      	str	r3, [r5, #0]
 8004df8:	f7fb fea2 	bl	8000b40 <_sbrk>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d102      	bne.n	8004e06 <_sbrk_r+0x1a>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	b103      	cbz	r3, 8004e06 <_sbrk_r+0x1a>
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	200136dc 	.word	0x200136dc

08004e0c <__sread>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e14:	f000 f8a0 	bl	8004f58 <_read_r>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	bfab      	itete	ge
 8004e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e20:	181b      	addge	r3, r3, r0
 8004e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e26:	bfac      	ite	ge
 8004e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e2a:	81a3      	strhlt	r3, [r4, #12]
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <__swrite>:
 8004e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e32:	461f      	mov	r7, r3
 8004e34:	898b      	ldrh	r3, [r1, #12]
 8004e36:	05db      	lsls	r3, r3, #23
 8004e38:	4605      	mov	r5, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	d505      	bpl.n	8004e4c <__swrite+0x1e>
 8004e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e44:	2302      	movs	r3, #2
 8004e46:	2200      	movs	r2, #0
 8004e48:	f000 f868 	bl	8004f1c <_lseek_r>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	4632      	mov	r2, r6
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e62:	f000 b817 	b.w	8004e94 <_write_r>

08004e66 <__sseek>:
 8004e66:	b510      	push	{r4, lr}
 8004e68:	460c      	mov	r4, r1
 8004e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6e:	f000 f855 	bl	8004f1c <_lseek_r>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	bf15      	itete	ne
 8004e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e82:	81a3      	strheq	r3, [r4, #12]
 8004e84:	bf18      	it	ne
 8004e86:	81a3      	strhne	r3, [r4, #12]
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <__sclose>:
 8004e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8e:	f000 b813 	b.w	8004eb8 <_close_r>
	...

08004e94 <_write_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d07      	ldr	r5, [pc, #28]	; (8004eb4 <_write_r+0x20>)
 8004e98:	4604      	mov	r4, r0
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fb fdfb 	bl	8000a9e <_write>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_write_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_write_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	200136dc 	.word	0x200136dc

08004eb8 <_close_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d06      	ldr	r5, [pc, #24]	; (8004ed4 <_close_r+0x1c>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	f7fb fe07 	bl	8000ad6 <_close>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_close_r+0x1a>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_close_r+0x1a>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	200136dc 	.word	0x200136dc

08004ed8 <_fstat_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d07      	ldr	r5, [pc, #28]	; (8004ef8 <_fstat_r+0x20>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	602b      	str	r3, [r5, #0]
 8004ee6:	f7fb fe02 	bl	8000aee <_fstat>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d102      	bne.n	8004ef4 <_fstat_r+0x1c>
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	b103      	cbz	r3, 8004ef4 <_fstat_r+0x1c>
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200136dc 	.word	0x200136dc

08004efc <_isatty_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d06      	ldr	r5, [pc, #24]	; (8004f18 <_isatty_r+0x1c>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	f7fb fe01 	bl	8000b0e <_isatty>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_isatty_r+0x1a>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_isatty_r+0x1a>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200136dc 	.word	0x200136dc

08004f1c <_lseek_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d07      	ldr	r5, [pc, #28]	; (8004f3c <_lseek_r+0x20>)
 8004f20:	4604      	mov	r4, r0
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	2200      	movs	r2, #0
 8004f28:	602a      	str	r2, [r5, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f7fb fdfa 	bl	8000b24 <_lseek>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_lseek_r+0x1e>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_lseek_r+0x1e>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	200136dc 	.word	0x200136dc

08004f40 <__malloc_lock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__malloc_lock+0x8>)
 8004f42:	f7ff be43 	b.w	8004bcc <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	200136d4 	.word	0x200136d4

08004f4c <__malloc_unlock>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__malloc_unlock+0x8>)
 8004f4e:	f7ff be3e 	b.w	8004bce <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	200136d4 	.word	0x200136d4

08004f58 <_read_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d07      	ldr	r5, [pc, #28]	; (8004f78 <_read_r+0x20>)
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	4608      	mov	r0, r1
 8004f60:	4611      	mov	r1, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	602a      	str	r2, [r5, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f7fb fd7c 	bl	8000a64 <_read>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_read_r+0x1e>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_read_r+0x1e>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	200136dc 	.word	0x200136dc

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
