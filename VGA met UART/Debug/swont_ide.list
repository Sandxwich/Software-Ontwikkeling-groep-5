
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e4  080058e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013260  20000070  0800595c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200132d0  0800595c  000232d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d329  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002540  00000000  00000000  0002d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002f910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002369a  00000000  00000000  00031238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010017  00000000  00000000  000548d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb4cc  00000000  00000000  000648e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fdb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cac  00000000  00000000  0012fe08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800583c 	.word	0x0800583c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800583c 	.word	0x0800583c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b974 	b.w	80008e0 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9d08      	ldr	r5, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	468e      	mov	lr, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14d      	bne.n	80006ba <__udivmoddi4+0xaa>
 800061e:	428a      	cmp	r2, r1
 8000620:	4694      	mov	ip, r2
 8000622:	d969      	bls.n	80006f8 <__udivmoddi4+0xe8>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b152      	cbz	r2, 8000640 <__udivmoddi4+0x30>
 800062a:	fa01 f302 	lsl.w	r3, r1, r2
 800062e:	f1c2 0120 	rsb	r1, r2, #32
 8000632:	fa20 f101 	lsr.w	r1, r0, r1
 8000636:	fa0c fc02 	lsl.w	ip, ip, r2
 800063a:	ea41 0e03 	orr.w	lr, r1, r3
 800063e:	4094      	lsls	r4, r2
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	0c21      	lsrs	r1, r4, #16
 8000646:	fbbe f6f8 	udiv	r6, lr, r8
 800064a:	fa1f f78c 	uxth.w	r7, ip
 800064e:	fb08 e316 	mls	r3, r8, r6, lr
 8000652:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000656:	fb06 f107 	mul.w	r1, r6, r7
 800065a:	4299      	cmp	r1, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x64>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f106 30ff 	add.w	r0, r6, #4294967295
 8000666:	f080 811f 	bcs.w	80008a8 <__udivmoddi4+0x298>
 800066a:	4299      	cmp	r1, r3
 800066c:	f240 811c 	bls.w	80008a8 <__udivmoddi4+0x298>
 8000670:	3e02      	subs	r6, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f0f8 	udiv	r0, r3, r8
 800067c:	fb08 3310 	mls	r3, r8, r0, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb00 f707 	mul.w	r7, r0, r7
 8000688:	42a7      	cmp	r7, r4
 800068a:	d90a      	bls.n	80006a2 <__udivmoddi4+0x92>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f100 33ff 	add.w	r3, r0, #4294967295
 8000694:	f080 810a 	bcs.w	80008ac <__udivmoddi4+0x29c>
 8000698:	42a7      	cmp	r7, r4
 800069a:	f240 8107 	bls.w	80008ac <__udivmoddi4+0x29c>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a6:	1be4      	subs	r4, r4, r7
 80006a8:	2600      	movs	r6, #0
 80006aa:	b11d      	cbz	r5, 80006b4 <__udivmoddi4+0xa4>
 80006ac:	40d4      	lsrs	r4, r2
 80006ae:	2300      	movs	r3, #0
 80006b0:	e9c5 4300 	strd	r4, r3, [r5]
 80006b4:	4631      	mov	r1, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d909      	bls.n	80006d2 <__udivmoddi4+0xc2>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	f000 80ef 	beq.w	80008a2 <__udivmoddi4+0x292>
 80006c4:	2600      	movs	r6, #0
 80006c6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ca:	4630      	mov	r0, r6
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	fab3 f683 	clz	r6, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d14a      	bne.n	8000770 <__udivmoddi4+0x160>
 80006da:	428b      	cmp	r3, r1
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xd4>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80f9 	bhi.w	80008d6 <__udivmoddi4+0x2c6>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	469e      	mov	lr, r3
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0e0      	beq.n	80006b4 <__udivmoddi4+0xa4>
 80006f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006f6:	e7dd      	b.n	80006b4 <__udivmoddi4+0xa4>
 80006f8:	b902      	cbnz	r2, 80006fc <__udivmoddi4+0xec>
 80006fa:	deff      	udf	#255	; 0xff
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	f040 8092 	bne.w	800082a <__udivmoddi4+0x21a>
 8000706:	eba1 010c 	sub.w	r1, r1, ip
 800070a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070e:	fa1f fe8c 	uxth.w	lr, ip
 8000712:	2601      	movs	r6, #1
 8000714:	0c20      	lsrs	r0, r4, #16
 8000716:	fbb1 f3f7 	udiv	r3, r1, r7
 800071a:	fb07 1113 	mls	r1, r7, r3, r1
 800071e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000722:	fb0e f003 	mul.w	r0, lr, r3
 8000726:	4288      	cmp	r0, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0x12c>
 800072a:	eb1c 0101 	adds.w	r1, ip, r1
 800072e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x12a>
 8000734:	4288      	cmp	r0, r1
 8000736:	f200 80cb 	bhi.w	80008d0 <__udivmoddi4+0x2c0>
 800073a:	4643      	mov	r3, r8
 800073c:	1a09      	subs	r1, r1, r0
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb1 f0f7 	udiv	r0, r1, r7
 8000744:	fb07 1110 	mls	r1, r7, r0, r1
 8000748:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800074c:	fb0e fe00 	mul.w	lr, lr, r0
 8000750:	45a6      	cmp	lr, r4
 8000752:	d908      	bls.n	8000766 <__udivmoddi4+0x156>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 31ff 	add.w	r1, r0, #4294967295
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x154>
 800075e:	45a6      	cmp	lr, r4
 8000760:	f200 80bb 	bhi.w	80008da <__udivmoddi4+0x2ca>
 8000764:	4608      	mov	r0, r1
 8000766:	eba4 040e 	sub.w	r4, r4, lr
 800076a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800076e:	e79c      	b.n	80006aa <__udivmoddi4+0x9a>
 8000770:	f1c6 0720 	rsb	r7, r6, #32
 8000774:	40b3      	lsls	r3, r6
 8000776:	fa22 fc07 	lsr.w	ip, r2, r7
 800077a:	ea4c 0c03 	orr.w	ip, ip, r3
 800077e:	fa20 f407 	lsr.w	r4, r0, r7
 8000782:	fa01 f306 	lsl.w	r3, r1, r6
 8000786:	431c      	orrs	r4, r3
 8000788:	40f9      	lsrs	r1, r7
 800078a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800078e:	fa00 f306 	lsl.w	r3, r0, r6
 8000792:	fbb1 f8f9 	udiv	r8, r1, r9
 8000796:	0c20      	lsrs	r0, r4, #16
 8000798:	fa1f fe8c 	uxth.w	lr, ip
 800079c:	fb09 1118 	mls	r1, r9, r8, r1
 80007a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a4:	fb08 f00e 	mul.w	r0, r8, lr
 80007a8:	4288      	cmp	r0, r1
 80007aa:	fa02 f206 	lsl.w	r2, r2, r6
 80007ae:	d90b      	bls.n	80007c8 <__udivmoddi4+0x1b8>
 80007b0:	eb1c 0101 	adds.w	r1, ip, r1
 80007b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007b8:	f080 8088 	bcs.w	80008cc <__udivmoddi4+0x2bc>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f240 8085 	bls.w	80008cc <__udivmoddi4+0x2bc>
 80007c2:	f1a8 0802 	sub.w	r8, r8, #2
 80007c6:	4461      	add	r1, ip
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	b2a4      	uxth	r4, r4
 80007cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d0:	fb09 1110 	mls	r1, r9, r0, r1
 80007d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007dc:	458e      	cmp	lr, r1
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x1e2>
 80007e0:	eb1c 0101 	adds.w	r1, ip, r1
 80007e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007e8:	d26c      	bcs.n	80008c4 <__udivmoddi4+0x2b4>
 80007ea:	458e      	cmp	lr, r1
 80007ec:	d96a      	bls.n	80008c4 <__udivmoddi4+0x2b4>
 80007ee:	3802      	subs	r0, #2
 80007f0:	4461      	add	r1, ip
 80007f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007f6:	fba0 9402 	umull	r9, r4, r0, r2
 80007fa:	eba1 010e 	sub.w	r1, r1, lr
 80007fe:	42a1      	cmp	r1, r4
 8000800:	46c8      	mov	r8, r9
 8000802:	46a6      	mov	lr, r4
 8000804:	d356      	bcc.n	80008b4 <__udivmoddi4+0x2a4>
 8000806:	d053      	beq.n	80008b0 <__udivmoddi4+0x2a0>
 8000808:	b15d      	cbz	r5, 8000822 <__udivmoddi4+0x212>
 800080a:	ebb3 0208 	subs.w	r2, r3, r8
 800080e:	eb61 010e 	sbc.w	r1, r1, lr
 8000812:	fa01 f707 	lsl.w	r7, r1, r7
 8000816:	fa22 f306 	lsr.w	r3, r2, r6
 800081a:	40f1      	lsrs	r1, r6
 800081c:	431f      	orrs	r7, r3
 800081e:	e9c5 7100 	strd	r7, r1, [r5]
 8000822:	2600      	movs	r6, #0
 8000824:	4631      	mov	r1, r6
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	f1c2 0320 	rsb	r3, r2, #32
 800082e:	40d8      	lsrs	r0, r3
 8000830:	fa0c fc02 	lsl.w	ip, ip, r2
 8000834:	fa21 f303 	lsr.w	r3, r1, r3
 8000838:	4091      	lsls	r1, r2
 800083a:	4301      	orrs	r1, r0
 800083c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000840:	fa1f fe8c 	uxth.w	lr, ip
 8000844:	fbb3 f0f7 	udiv	r0, r3, r7
 8000848:	fb07 3610 	mls	r6, r7, r0, r3
 800084c:	0c0b      	lsrs	r3, r1, #16
 800084e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000852:	fb00 f60e 	mul.w	r6, r0, lr
 8000856:	429e      	cmp	r6, r3
 8000858:	fa04 f402 	lsl.w	r4, r4, r2
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x260>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 38ff 	add.w	r8, r0, #4294967295
 8000866:	d22f      	bcs.n	80008c8 <__udivmoddi4+0x2b8>
 8000868:	429e      	cmp	r6, r3
 800086a:	d92d      	bls.n	80008c8 <__udivmoddi4+0x2b8>
 800086c:	3802      	subs	r0, #2
 800086e:	4463      	add	r3, ip
 8000870:	1b9b      	subs	r3, r3, r6
 8000872:	b289      	uxth	r1, r1
 8000874:	fbb3 f6f7 	udiv	r6, r3, r7
 8000878:	fb07 3316 	mls	r3, r7, r6, r3
 800087c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000880:	fb06 f30e 	mul.w	r3, r6, lr
 8000884:	428b      	cmp	r3, r1
 8000886:	d908      	bls.n	800089a <__udivmoddi4+0x28a>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000890:	d216      	bcs.n	80008c0 <__udivmoddi4+0x2b0>
 8000892:	428b      	cmp	r3, r1
 8000894:	d914      	bls.n	80008c0 <__udivmoddi4+0x2b0>
 8000896:	3e02      	subs	r6, #2
 8000898:	4461      	add	r1, ip
 800089a:	1ac9      	subs	r1, r1, r3
 800089c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a0:	e738      	b.n	8000714 <__udivmoddi4+0x104>
 80008a2:	462e      	mov	r6, r5
 80008a4:	4628      	mov	r0, r5
 80008a6:	e705      	b.n	80006b4 <__udivmoddi4+0xa4>
 80008a8:	4606      	mov	r6, r0
 80008aa:	e6e3      	b.n	8000674 <__udivmoddi4+0x64>
 80008ac:	4618      	mov	r0, r3
 80008ae:	e6f8      	b.n	80006a2 <__udivmoddi4+0x92>
 80008b0:	454b      	cmp	r3, r9
 80008b2:	d2a9      	bcs.n	8000808 <__udivmoddi4+0x1f8>
 80008b4:	ebb9 0802 	subs.w	r8, r9, r2
 80008b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008bc:	3801      	subs	r0, #1
 80008be:	e7a3      	b.n	8000808 <__udivmoddi4+0x1f8>
 80008c0:	4646      	mov	r6, r8
 80008c2:	e7ea      	b.n	800089a <__udivmoddi4+0x28a>
 80008c4:	4620      	mov	r0, r4
 80008c6:	e794      	b.n	80007f2 <__udivmoddi4+0x1e2>
 80008c8:	4640      	mov	r0, r8
 80008ca:	e7d1      	b.n	8000870 <__udivmoddi4+0x260>
 80008cc:	46d0      	mov	r8, sl
 80008ce:	e77b      	b.n	80007c8 <__udivmoddi4+0x1b8>
 80008d0:	3b02      	subs	r3, #2
 80008d2:	4461      	add	r1, ip
 80008d4:	e732      	b.n	800073c <__udivmoddi4+0x12c>
 80008d6:	4630      	mov	r0, r6
 80008d8:	e709      	b.n	80006ee <__udivmoddi4+0xde>
 80008da:	4464      	add	r4, ip
 80008dc:	3802      	subs	r0, #2
 80008de:	e742      	b.n	8000766 <__udivmoddi4+0x156>

080008e0 <__aeabi_idiv0>:
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <API_draw_line>:
 * 	bitmap:
 *
 */

int API_draw_line(uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint8_t dikte, uint8_t color)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b08d      	sub	sp, #52	; 0x34
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4604      	mov	r4, r0
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	4623      	mov	r3, r4
 80008f4:	80fb      	strh	r3, [r7, #6]
 80008f6:	4603      	mov	r3, r0
 80008f8:	80bb      	strh	r3, [r7, #4]
 80008fa:	460b      	mov	r3, r1
 80008fc:	807b      	strh	r3, [r7, #2]
 80008fe:	4613      	mov	r3, r2
 8000900:	803b      	strh	r3, [r7, #0]
	int error = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
	//error checks
//	if(checkcolor(color))
//		return error;

	int dx = x_2 - x_1;
 8000906:	887a      	ldrh	r2, [r7, #2]
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	617b      	str	r3, [r7, #20]
	int dy = y_2 - y_1;
 800090e:	883a      	ldrh	r2, [r7, #0]
 8000910:	88bb      	ldrh	r3, [r7, #4]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	613b      	str	r3, [r7, #16]
	int steps;
	if(abs(dx)>abs(dy))
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800091c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bfb8      	it	lt
 8000926:	425b      	neglt	r3, r3
 8000928:	429a      	cmp	r2, r3
 800092a:	dd05      	ble.n	8000938 <API_draw_line+0x54>
	{
		steps = abs(dx);
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	2b00      	cmp	r3, #0
 8000930:	bfb8      	it	lt
 8000932:	425b      	neglt	r3, r3
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000936:	e00f      	b.n	8000958 <API_draw_line+0x74>
	}
	else if(abs(dy)>abs(dx))
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800093e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	bfb8      	it	lt
 8000948:	425b      	neglt	r3, r3
 800094a:	429a      	cmp	r2, r3
 800094c:	dd04      	ble.n	8000958 <API_draw_line+0x74>
	{
		steps = abs(dy);
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	2b00      	cmp	r3, #0
 8000952:	bfb8      	it	lt
 8000954:	425b      	neglt	r3, r3
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	float xIncrement = (float) dx / steps;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	ee07 3a90 	vmov	s15, r3
 800095e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800096c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000970:	edc7 7a03 	vstr	s15, [r7, #12]
	float yIncrement = (float) dy / steps;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	ee07 3a90 	vmov	s15, r3
 800097a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800098c:	edc7 7a02 	vstr	s15, [r7, #8]
	int i;

	// Set the pixels along the center line of the given thickness
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000990:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	425b      	negs	r3, r3
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
 800099c:	e053      	b.n	8000a46 <API_draw_line+0x162>
		float x = x_1 + 0.5;
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fd63 	bl	800046c <__aeabi_i2d>
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <API_draw_line+0x17c>)
 80009ac:	f7ff fc12 	bl	80001d4 <__adddf3>
 80009b0:	4602      	mov	r2, r0
 80009b2:	460b      	mov	r3, r1
 80009b4:	4610      	mov	r0, r2
 80009b6:	4619      	mov	r1, r3
 80009b8:	f7ff fdc2 	bl	8000540 <__aeabi_d2f>
 80009bc:	4603      	mov	r3, r0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
		float y = y_1 + i + 0.5;
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	4413      	add	r3, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd50 	bl	800046c <__aeabi_i2d>
 80009cc:	f04f 0200 	mov.w	r2, #0
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <API_draw_line+0x17c>)
 80009d2:	f7ff fbff 	bl	80001d4 <__adddf3>
 80009d6:	4602      	mov	r2, r0
 80009d8:	460b      	mov	r3, r1
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	f7ff fdaf 	bl	8000540 <__aeabi_d2f>
 80009e2:	4603      	mov	r3, r0
 80009e4:	623b      	str	r3, [r7, #32]
		int j;
		for (j = 0; j < steps; j++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	e025      	b.n	8000a38 <API_draw_line+0x154>
			UB_VGA_SetPixel(x, y, color);
 80009ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80009f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f4:	ee17 3a90 	vmov	r3, s15
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80009fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a02:	ee17 2a90 	vmov	r2, s15
 8000a06:	b291      	uxth	r1, r2
 8000a08:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fe2f 	bl	8001670 <UB_VGA_SetPixel>
			x += xIncrement;
 8000a12:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			y += yIncrement;
 8000a22:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a26:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a2e:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j = 0; j < steps; j++) {
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3301      	adds	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbd5      	blt.n	80009ec <API_draw_line+0x108>
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a42:	3301      	adds	r3, #1
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a4a:	085b      	lsrs	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	4293      	cmp	r3, r2
 8000a54:	dda3      	ble.n	800099e <API_draw_line+0xba>
		}
	}
	return error;
 8000a56:	69bb      	ldr	r3, [r7, #24]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3734      	adds	r7, #52	; 0x34
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	3fe00000 	.word	0x3fe00000

08000a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_DMA_Init+0x3c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2044      	movs	r0, #68	; 0x44
 8000a8c:	f000 ff65 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000a90:	2044      	movs	r0, #68	; 0x44
 8000a92:	f000 ff7e 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a31      	ldr	r2, [pc, #196]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a2a      	ldr	r2, [pc, #168]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000b32:	f001 fc77 	bl	8002424 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <MX_GPIO_Init+0xec>)
 8000b3e:	f001 fc71 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000b42:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000b46:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000b5c:	f001 fac6 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_GPIO_Init+0xec>)
 8000b7a:	f001 fab7 	bl	80020ec <HAL_GPIO_Init>

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40020400 	.word	0x40020400

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 fd91 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 f891 	bl	8000cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f7ff ff7f 	bl	8000aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ba6:	f7ff ff5d 	bl	8000a64 <MX_DMA_Init>
  MX_TIM1_Init();
 8000baa:	f000 fadf 	bl	800116c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bae:	f000 fb2d 	bl	800120c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bb2:	f000 fc43 	bl	800143c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000bb6:	f000 fce5 	bl	8001584 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000bba:	20ff      	movs	r0, #255	; 0xff
 8000bbc:	f000 fd34 	bl	8001628 <UB_VGA_FillScreen>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e008      	b.n	8000bd8 <main+0x44>
	  input.line_rx_buffer[i] = 0;
 8000bc6:	4a3c      	ldr	r2, [pc, #240]	; (8000cb8 <main+0x124>)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	3301      	adds	r3, #1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bde:	dbf2      	blt.n	8000bc6 <main+0x32>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000be0:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <main+0x124>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000be6:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <main+0x124>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <main+0x124>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	492f      	ldr	r1, [pc, #188]	; (8000cb8 <main+0x124>)
 8000bfa:	4830      	ldr	r0, [pc, #192]	; (8000cbc <main+0x128>)
 8000bfc:	f003 f940 	bl	8003e80 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000c00:	23ff      	movs	r3, #255	; 0xff
 8000c02:	72fb      	strb	r3, [r7, #11]
  unsigned int j =0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  API_draw_line(0, 0, 310, 240, 2, VGA_COL_RED);
 8000c08:	23e0      	movs	r3, #224	; 0xe0
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	23f0      	movs	r3, #240	; 0xf0
 8000c12:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe63 	bl	80008e4 <API_draw_line>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <main+0x124>)
 8000c20:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000c24:	2bff      	cmp	r3, #255	; 0xff
 8000c26:	d1fa      	bne.n	8000c1e <main+0x8a>
	  {
		  // Do some stuff
		  printf("yes\n");
 8000c28:	4825      	ldr	r0, [pc, #148]	; (8000cc0 <main+0x12c>)
 8000c2a:	f004 f977 	bl	8004f1c <puts>
		  switch (j++)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d82b      	bhi.n	8000c90 <main+0xfc>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <main+0xac>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c61 	.word	0x08000c61
 8000c44:	08000c67 	.word	0x08000c67
 8000c48:	08000c6d 	.word	0x08000c6d
 8000c4c:	08000c73 	.word	0x08000c73
 8000c50:	08000c79 	.word	0x08000c79
 8000c54:	08000c7f 	.word	0x08000c7f
 8000c58:	08000c85 	.word	0x08000c85
 8000c5c:	08000c8b 	.word	0x08000c8b
		  {
		  case 0:
		  {
			  colorTest=VGA_COL_BLACK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	72fb      	strb	r3, [r7, #11]
			  break;
 8000c64:	e014      	b.n	8000c90 <main+0xfc>
		  }

		  case 1: colorTest=VGA_COL_BLUE; break;
 8000c66:	2303      	movs	r3, #3
 8000c68:	72fb      	strb	r3, [r7, #11]
 8000c6a:	e011      	b.n	8000c90 <main+0xfc>

		  case 2: colorTest=VGA_COL_GREEN; break;
 8000c6c:	231c      	movs	r3, #28
 8000c6e:	72fb      	strb	r3, [r7, #11]
 8000c70:	e00e      	b.n	8000c90 <main+0xfc>

		  case 3: colorTest=VGA_COL_RED; break;
 8000c72:	23e0      	movs	r3, #224	; 0xe0
 8000c74:	72fb      	strb	r3, [r7, #11]
 8000c76:	e00b      	b.n	8000c90 <main+0xfc>

		  case 4: colorTest=VGA_COL_WHITE; break;
 8000c78:	23ff      	movs	r3, #255	; 0xff
 8000c7a:	72fb      	strb	r3, [r7, #11]
 8000c7c:	e008      	b.n	8000c90 <main+0xfc>

		  case 5: colorTest=VGA_COL_CYAN; break;
 8000c7e:	231f      	movs	r3, #31
 8000c80:	72fb      	strb	r3, [r7, #11]
 8000c82:	e005      	b.n	8000c90 <main+0xfc>

		  case 6: colorTest=VGA_COL_MAGENTA; break;
 8000c84:	23e3      	movs	r3, #227	; 0xe3
 8000c86:	72fb      	strb	r3, [r7, #11]
 8000c88:	e002      	b.n	8000c90 <main+0xfc>

		  case 7: colorTest=VGA_COL_YELLOW; break;
 8000c8a:	23fc      	movs	r3, #252	; 0xfc
 8000c8c:	72fb      	strb	r3, [r7, #11]
 8000c8e:	bf00      	nop

		  }
		  API_draw_line(21, 2, 102, 110, 10, colorTest);
 8000c90:	7afb      	ldrb	r3, [r7, #11]
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	230a      	movs	r3, #10
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	236e      	movs	r3, #110	; 0x6e
 8000c9a:	2266      	movs	r2, #102	; 0x66
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	2015      	movs	r0, #21
 8000ca0:	f7ff fe20 	bl	80008e4 <API_draw_line>
		  if (j==7) j = 0;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b07      	cmp	r3, #7
 8000ca8:	d101      	bne.n	8000cae <main+0x11a>
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000cae:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <main+0x124>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8000cb6:	e7b2      	b.n	8000c1e <main+0x8a>
 8000cb8:	2000008c 	.word	0x2000008c
 8000cbc:	20000580 	.word	0x20000580
 8000cc0:	08005854 	.word	0x08005854

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b094      	sub	sp, #80	; 0x50
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	2230      	movs	r2, #48	; 0x30
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 f8ac 	bl	8004e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <SystemClock_Config+0xcc>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a27      	ldr	r2, [pc, #156]	; (8000d90 <SystemClock_Config+0xcc>)
 8000cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <SystemClock_Config+0xcc>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <SystemClock_Config+0xd0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <SystemClock_Config+0xd0>)
 8000d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <SystemClock_Config+0xd0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d34:	2304      	movs	r3, #4
 8000d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d38:	23a8      	movs	r3, #168	; 0xa8
 8000d3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d40:	2304      	movs	r3, #4
 8000d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 fb85 	bl	8002458 <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d54:	f000 f832 	bl	8000dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2105      	movs	r1, #5
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fddc 	bl	8002934 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d82:	f000 f81b 	bl	8000dbc <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3750      	adds	r7, #80	; 0x50
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000

08000d98 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000da0:	1d39      	adds	r1, r7, #4
 8000da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da6:	2201      	movs	r2, #1
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <__io_putchar+0x20>)
 8000daa:	f002 ffd0 	bl	8003d4e <HAL_UART_Transmit>
	return ch;												//Return the character
 8000dae:	687b      	ldr	r3, [r7, #4]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000580 	.word	0x20000580

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <HAL_MspInit+0x4c>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 fc78 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e7c:	4828      	ldr	r0, [pc, #160]	; (8000f20 <TIM2_IRQHandler+0xa8>)
 8000e7e:	f002 f8b5 	bl	8002fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000e82:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <TIM2_IRQHandler+0xa8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f06f 0208 	mvn.w	r2, #8
 8000e8a:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000e96:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000ea0:	d905      	bls.n	8000eae <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <TIM2_IRQHandler+0xb0>)
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000eac:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d802      	bhi.n	8000ebc <TIM2_IRQHandler+0x44>
 8000eb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eba:	e001      	b.n	8000ec0 <TIM2_IRQHandler+0x48>
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <TIM2_IRQHandler+0xb4>)
 8000ec2:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b23      	cmp	r3, #35	; 0x23
 8000eca:	d927      	bls.n	8000f1c <TIM2_IRQHandler+0xa4>
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	f240 2202 	movw	r2, #514	; 0x202
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d821      	bhi.n	8000f1c <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000ed8:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <TIM2_IRQHandler+0xb8>)
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <TIM2_IRQHandler+0xb8>)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <TIM2_IRQHandler+0xbc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <TIM2_IRQHandler+0xbc>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <TIM2_IRQHandler+0xc0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <TIM2_IRQHandler+0xc0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000f18:	4a02      	ldr	r2, [pc, #8]	; (8000f24 <TIM2_IRQHandler+0xac>)
 8000f1a:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200004e0 	.word	0x200004e0
 8000f24:	200132b0 	.word	0x200132b0
 8000f28:	200005c0 	.word	0x200005c0
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40026488 	.word	0x40026488
 8000f34:	40010000 	.word	0x40010000
 8000f38:	20000520 	.word	0x20000520

08000f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <USART2_IRQHandler+0x70>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d026      	beq.n	8000f9c <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b0d      	cmp	r3, #13
 8000f52:	d002      	beq.n	8000f5a <USART2_IRQHandler+0x1e>
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b2e      	cmp	r3, #46	; 0x2e
 8000f58:	d10e      	bne.n	8000f78 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f5c:	22ff      	movs	r2, #255	; 0xff
 8000f5e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f64:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f68:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f6a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000f76:	e011      	b.n	8000f9c <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f82:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <USART2_IRQHandler+0x74>)
 8000f98:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <USART2_IRQHandler+0x78>)
 8000f9e:	f002 ffc5 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	2000008c 	.word	0x2000008c
 8000fb4:	20000580 	.word	0x20000580

08000fb8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <DMA2_Stream5_IRQHandler+0x48>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10f      	bne.n	8000fec <DMA2_Stream5_IRQHandler+0x34>
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <DMA2_Stream5_IRQHandler+0x48>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6a1a      	ldr	r2, [r3, #32]
 8000fd2:	f240 4344 	movw	r3, #1092	; 0x444
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <DMA2_Stream5_IRQHandler+0x34>
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <DMA2_Stream5_IRQHandler+0x48>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <DMA2_Stream5_IRQHandler+0x48>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <DMA2_Stream5_IRQHandler+0x4c>)
 8000fee:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <DMA2_Stream5_IRQHandler+0x50>)
 8000ff6:	f000 fe0f 	bl	8001c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200004a0 	.word	0x200004a0
 8001004:	40021000 	.word	0x40021000
 8001008:	20000520 	.word	0x20000520

0800100c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800101e:	f3af 8000 	nop.w
 8001022:	4601      	mov	r1, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbf0      	blt.n	800101e <_read+0x12>
	}

return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe99 	bl	8000d98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x50>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x16>
		heap_end = &end;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <_sbrk+0x50>)
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <_sbrk+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <_sbrk+0x50>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <_sbrk+0x50>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	466a      	mov	r2, sp
 800110e:	4293      	cmp	r3, r2
 8001110:	d907      	bls.n	8001122 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001112:	f003 fe63 	bl	8004ddc <__errno>
 8001116:	4603      	mov	r3, r0
 8001118:	220c      	movs	r2, #12
 800111a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	e006      	b.n	8001130 <_sbrk+0x48>
	}

	heap_end += incr;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <_sbrk+0x50>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a03      	ldr	r2, [pc, #12]	; (8001138 <_sbrk+0x50>)
 800112c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000049c 	.word	0x2000049c
 800113c:	200132d0 	.word	0x200132d0

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <SystemInit+0x28>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <SystemInit+0x28>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SystemInit+0x28>)
 8001156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800115a:	609a      	str	r2, [r3, #8]
#endif
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_TIM1_Init+0x98>)
 800118a:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <MX_TIM1_Init+0x9c>)
 800118c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_TIM1_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_TIM1_Init+0x98>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_TIM1_Init+0x98>)
 800119c:	220b      	movs	r2, #11
 800119e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_TIM1_Init+0x98>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_TIM1_Init+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_TIM1_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <MX_TIM1_Init+0x98>)
 80011b4:	f001 fdde 	bl	8002d74 <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80011be:	f7ff fdfd 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_TIM1_Init+0x98>)
 80011d0:	f002 f8da 	bl	8003388 <HAL_TIM_ConfigClockSource>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80011da:	f7ff fdef 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_TIM1_Init+0x98>)
 80011ec:	f002 fcd2 	bl	8003b94 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80011f6:	f7ff fde1 	bl	8000dbc <Error_Handler>
  }

}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200004a0 	.word	0x200004a0
 8001208:	40010000 	.word	0x40010000

0800120c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MX_TIM2_Init+0xcc>)
 8001230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001234:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MX_TIM2_Init+0xcc>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_TIM2_Init+0xcc>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <MX_TIM2_Init+0xcc>)
 8001244:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001248:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_TIM2_Init+0xcc>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_TIM2_Init+0xcc>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <MX_TIM2_Init+0xcc>)
 8001258:	f001 fddb 	bl	8002e12 <HAL_TIM_PWM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001262:	f7ff fdab 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4619      	mov	r1, r3
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <MX_TIM2_Init+0xcc>)
 8001276:	f002 fc8d 	bl	8003b94 <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001280:	f7ff fd9c 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001284:	2360      	movs	r3, #96	; 0x60
 8001286:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001288:	f240 13bb 	movw	r3, #443	; 0x1bb
 800128c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800128e:	2302      	movs	r3, #2
 8001290:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2208      	movs	r2, #8
 800129a:	4619      	mov	r1, r3
 800129c:	480e      	ldr	r0, [pc, #56]	; (80012d8 <MX_TIM2_Init+0xcc>)
 800129e:	f001 ffad 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012a8:	f7ff fd88 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80012ac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	220c      	movs	r2, #12
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <MX_TIM2_Init+0xcc>)
 80012ba:	f001 ff9f 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80012c4:	f7ff fd7a 	bl	8000dbc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_TIM2_Init+0xcc>)
 80012ca:	f000 f87f 	bl	80013cc <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200004e0 	.word	0x200004e0

080012dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_TIM_Base_MspInit+0x94>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d13c      	bne.n	8001368 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_TIM_Base_MspInit+0x98>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_TIM_Base_MspInit+0x98>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_TIM_Base_MspInit+0x98>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <HAL_TIM_Base_MspInit+0xa0>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 8001312:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001316:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 8001326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800132a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 8001340:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001344:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 800134e:	f000 fb3b 	bl	80019c8 <HAL_DMA_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001358:	f7ff fd30 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 8001360:	621a      	str	r2, [r3, #32]
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <HAL_TIM_Base_MspInit+0x9c>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40010000 	.word	0x40010000
 8001374:	40023800 	.word	0x40023800
 8001378:	20000520 	.word	0x20000520
 800137c:	40026488 	.word	0x40026488

08001380 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d115      	bne.n	80013be <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_TIM_PWM_MspInit+0x48>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_TIM_PWM_MspInit+0x48>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_TIM_PWM_MspInit+0x48>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201c      	movs	r0, #28
 80013b4:	f000 fad1 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b8:	201c      	movs	r0, #28
 80013ba:	f000 faea 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ec:	d11e      	bne.n	800142c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 800140a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800140e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 8001428:	f000 fe60 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	40020400 	.word	0x40020400

0800143c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_USART2_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001474:	f002 fc1e 	bl	8003cb4 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f7ff fc9d 	bl	8000dbc <Error_Handler>
  }

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000580 	.word	0x20000580
 800148c:	40004400 	.word	0x40004400

08001490 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_UART_MspInit+0x94>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d133      	bne.n	800151a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ea:	230c      	movs	r3, #12
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fa:	2307      	movs	r3, #7
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <HAL_UART_MspInit+0x9c>)
 8001506:	f000 fdf1 	bl	80020ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2026      	movs	r0, #38	; 0x26
 8001510:	f000 fa23 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001514:	2026      	movs	r0, #38	; 0x26
 8001516:	f000 fa3c 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40004400 	.word	0x40004400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001534:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001536:	e003      	b.n	8001540 <LoopCopyDataInit>

08001538 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800153a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800153c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800153e:	3104      	adds	r1, #4

08001540 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001544:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001546:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001548:	d3f6      	bcc.n	8001538 <CopyDataInit>
  ldr  r2, =_sbss
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800154c:	e002      	b.n	8001554 <LoopFillZerobss>

0800154e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800154e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001550:	f842 3b04 	str.w	r3, [r2], #4

08001554 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001556:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001558:	d3f9      	bcc.n	800154e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800155a:	f7ff fdf1 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f003 fc43 	bl	8004de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff fb17 	bl	8000b94 <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001568:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800156c:	080058ec 	.word	0x080058ec
  ldr  r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001574:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001578:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800157c:	200132d0 	.word	0x200132d0

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>
	...

08001584 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <UB_VGA_Screen_Init+0x84>)
 800158a:	2200      	movs	r2, #0
 800158c:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <UB_VGA_Screen_Init+0x84>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <UB_VGA_Screen_Init+0x84>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <UB_VGA_Screen_Init+0x88>)
 800159c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a0:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80015a2:	481b      	ldr	r0, [pc, #108]	; (8001610 <UB_VGA_Screen_Init+0x8c>)
 80015a4:	f001 fc11 	bl	8002dca <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80015a8:	210c      	movs	r1, #12
 80015aa:	4819      	ldr	r0, [pc, #100]	; (8001610 <UB_VGA_Screen_Init+0x8c>)
 80015ac:	f001 fc5c 	bl	8002e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80015b0:	2108      	movs	r1, #8
 80015b2:	4817      	ldr	r0, [pc, #92]	; (8001610 <UB_VGA_Screen_Init+0x8c>)
 80015b4:	f001 fc96 	bl	8002ee4 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <UB_VGA_Screen_Init+0x90>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <UB_VGA_Screen_Init+0x90>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <UB_VGA_Screen_Init+0x90>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <UB_VGA_Screen_Init+0x90>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80015d8:	490f      	ldr	r1, [pc, #60]	; (8001618 <UB_VGA_Screen_Init+0x94>)
 80015da:	f240 1341 	movw	r3, #321	; 0x141
 80015de:	4a0f      	ldr	r2, [pc, #60]	; (800161c <UB_VGA_Screen_Init+0x98>)
 80015e0:	480f      	ldr	r0, [pc, #60]	; (8001620 <UB_VGA_Screen_Init+0x9c>)
 80015e2:	f000 fa9f 	bl	8001b24 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <UB_VGA_Screen_Init+0x9c>)
 80015e8:	f000 f9ee 	bl	80019c8 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <UB_VGA_Screen_Init+0x9c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <UB_VGA_Screen_Init+0x9c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0210 	orr.w	r2, r2, #16
 80015fa:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <UB_VGA_Screen_Init+0xa0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a01      	ldr	r2, [pc, #4]	; (8001608 <UB_VGA_Screen_Init+0x84>)
 8001602:	6093      	str	r3, [r2, #8]
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200132b0 	.word	0x200132b0
 800160c:	40020400 	.word	0x40020400
 8001610:	200004e0 	.word	0x200004e0
 8001614:	200004a0 	.word	0x200004a0
 8001618:	200005c0 	.word	0x200005c0
 800161c:	40021015 	.word	0x40021015
 8001620:	20000520 	.word	0x20000520
 8001624:	40026488 	.word	0x40026488

08001628 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001632:	2300      	movs	r3, #0
 8001634:	81bb      	strh	r3, [r7, #12]
 8001636:	e012      	b.n	800165e <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001638:	2300      	movs	r3, #0
 800163a:	81fb      	strh	r3, [r7, #14]
 800163c:	e008      	b.n	8001650 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	89b9      	ldrh	r1, [r7, #12]
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f813 	bl	8001670 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	3301      	adds	r3, #1
 800164e:	81fb      	strh	r3, [r7, #14]
 8001650:	89fb      	ldrh	r3, [r7, #14]
 8001652:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001656:	d3f2      	bcc.n	800163e <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001658:	89bb      	ldrh	r3, [r7, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	81bb      	strh	r3, [r7, #12]
 800165e:	89bb      	ldrh	r3, [r7, #12]
 8001660:	2bef      	cmp	r3, #239	; 0xef
 8001662:	d9e9      	bls.n	8001638 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	460b      	mov	r3, r1
 800167c:	80bb      	strh	r3, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001688:	d301      	bcc.n	800168e <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	2bef      	cmp	r3, #239	; 0xef
 8001692:	d901      	bls.n	8001698 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001698:	88ba      	ldrh	r2, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	441a      	add	r2, r3
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4413      	add	r3, r2
 80016a8:	4904      	ldr	r1, [pc, #16]	; (80016bc <UB_VGA_SetPixel+0x4c>)
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	54ca      	strb	r2, [r1, r3]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200005c0 	.word	0x200005c0

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_Init+0x40>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_Init+0x40>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x40>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f92b 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fb6a 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f943 	bl	80019ae <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f90b 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	20000008 	.word	0x20000008
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	200132bc 	.word	0x200132bc

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200132bc 	.word	0x200132bc

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff feda 	bl	800178c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e099      	b.n	8001b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	e00f      	b.n	8001a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a06:	f7ff fec1 	bl	800178c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d908      	bls.n	8001a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e078      	b.n	8001b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e8      	bne.n	8001a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_DMA_Init+0x158>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d107      	bne.n	8001a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f023 0307 	bic.w	r3, r3, #7
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d117      	bne.n	8001aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fa91 	bl	8001ff4 <DMA_CheckFifoParam>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e016      	b.n	8001b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fa48 	bl	8001f88 <DMA_CalcBaseAndBitshift>
 8001af8:	4603      	mov	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	223f      	movs	r2, #63	; 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	f010803f 	.word	0xf010803f

08001b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_DMA_Start_IT+0x26>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e040      	b.n	8001bcc <HAL_DMA_Start_IT+0xa8>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d12f      	bne.n	8001bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f9da 	bl	8001f2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	223f      	movs	r2, #63	; 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0216 	orr.w	r2, r2, #22
 8001b92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0208 	orr.w	r2, r2, #8
 8001baa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e005      	b.n	8001bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d004      	beq.n	8001bf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00c      	b.n	8001c0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c24:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <HAL_DMA_IRQHandler+0x248>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a8e      	ldr	r2, [pc, #568]	; (8001e64 <HAL_DMA_IRQHandler+0x24c>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2208      	movs	r2, #8
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01a      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	2208      	movs	r2, #8
 8001c72:	409a      	lsls	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	2201      	movs	r2, #1
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2204      	movs	r2, #4
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d043      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03c      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2210      	movs	r2, #16
 8001d14:	409a      	lsls	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d018      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d024      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
 8001d46:	e01f      	b.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0208 	bic.w	r2, r2, #8
 8001d76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 808f 	beq.w	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8087 	beq.w	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2220      	movs	r2, #32
 8001db0:	409a      	lsls	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d136      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0216 	bic.w	r2, r2, #22
 8001dd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <HAL_DMA_IRQHandler+0x1da>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0208 	bic.w	r2, r2, #8
 8001e00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	223f      	movs	r2, #63	; 0x3f
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d07e      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
        }
        return;
 8001e2e:	e079      	b.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01d      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10d      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d031      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
 8001e5c:	e02c      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000
 8001e64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d023      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
 8001e78:	e01e      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10f      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0210 	bic.w	r2, r2, #16
 8001e96:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d032      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2205      	movs	r2, #5
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d307      	bcc.n	8001f00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x2cc>
 8001efe:	e000      	b.n	8001f02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f00:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
 8001f22:	e000      	b.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f24:	bf00      	nop
    }
  }
}
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d108      	bne.n	8001f6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f6a:	e007      	b.n	8001f7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3b10      	subs	r3, #16
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <DMA_CalcBaseAndBitshift+0x64>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d909      	bls.n	8001fca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	1d1a      	adds	r2, r3, #4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fc8:	e007      	b.n	8001fda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	aaaaaaab 	.word	0xaaaaaaab
 8001ff0:	08005870 	.word	0x08005870

08001ff4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11f      	bne.n	800204e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d856      	bhi.n	80020c2 <DMA_CheckFifoParam+0xce>
 8002014:	a201      	add	r2, pc, #4	; (adr r2, 800201c <DMA_CheckFifoParam+0x28>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	0800202d 	.word	0x0800202d
 8002020:	0800203f 	.word	0x0800203f
 8002024:	0800202d 	.word	0x0800202d
 8002028:	080020c3 	.word	0x080020c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d046      	beq.n	80020c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203c:	e043      	b.n	80020c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002046:	d140      	bne.n	80020ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204c:	e03d      	b.n	80020ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002056:	d121      	bne.n	800209c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d837      	bhi.n	80020ce <DMA_CheckFifoParam+0xda>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <DMA_CheckFifoParam+0x70>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002075 	.word	0x08002075
 8002068:	0800207b 	.word	0x0800207b
 800206c:	08002075 	.word	0x08002075
 8002070:	0800208d 	.word	0x0800208d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e030      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d025      	beq.n	80020d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208a:	e022      	b.n	80020d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002094:	d11f      	bne.n	80020d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800209a:	e01c      	b.n	80020d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d903      	bls.n	80020aa <DMA_CheckFifoParam+0xb6>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d003      	beq.n	80020b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020a8:	e018      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
      break;
 80020ae:	e015      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e00b      	b.n	80020da <DMA_CheckFifoParam+0xe6>
      break;
 80020c2:	bf00      	nop
 80020c4:	e00a      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020c6:	bf00      	nop
 80020c8:	e008      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020ca:	bf00      	nop
 80020cc:	e006      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020ce:	bf00      	nop
 80020d0:	e004      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e002      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;   
 80020d6:	bf00      	nop
 80020d8:	e000      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
    }
  } 
  
  return status; 
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e16b      	b.n	80023e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 815a 	bne.w	80023da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d00b      	beq.n	8002146 <HAL_GPIO_Init+0x5a>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d007      	beq.n	8002146 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800213a:	2b11      	cmp	r3, #17
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b12      	cmp	r3, #18
 8002144:	d130      	bne.n	80021a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0201 	and.w	r2, r3, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0xfc>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d123      	bne.n	8002230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80b4 	beq.w	80023da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b60      	ldr	r3, [pc, #384]	; (80023f8 <HAL_GPIO_Init+0x30c>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a5f      	ldr	r2, [pc, #380]	; (80023f8 <HAL_GPIO_Init+0x30c>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b5d      	ldr	r3, [pc, #372]	; (80023f8 <HAL_GPIO_Init+0x30c>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228e:	4a5b      	ldr	r2, [pc, #364]	; (80023fc <HAL_GPIO_Init+0x310>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_GPIO_Init+0x314>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02b      	beq.n	8002312 <HAL_GPIO_Init+0x226>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a51      	ldr	r2, [pc, #324]	; (8002404 <HAL_GPIO_Init+0x318>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d025      	beq.n	800230e <HAL_GPIO_Init+0x222>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a50      	ldr	r2, [pc, #320]	; (8002408 <HAL_GPIO_Init+0x31c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01f      	beq.n	800230a <HAL_GPIO_Init+0x21e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4f      	ldr	r2, [pc, #316]	; (800240c <HAL_GPIO_Init+0x320>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d019      	beq.n	8002306 <HAL_GPIO_Init+0x21a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4e      	ldr	r2, [pc, #312]	; (8002410 <HAL_GPIO_Init+0x324>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0x216>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4d      	ldr	r2, [pc, #308]	; (8002414 <HAL_GPIO_Init+0x328>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00d      	beq.n	80022fe <HAL_GPIO_Init+0x212>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4c      	ldr	r2, [pc, #304]	; (8002418 <HAL_GPIO_Init+0x32c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <HAL_GPIO_Init+0x20e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4b      	ldr	r2, [pc, #300]	; (800241c <HAL_GPIO_Init+0x330>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_GPIO_Init+0x20a>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e00e      	b.n	8002314 <HAL_GPIO_Init+0x228>
 80022f6:	2308      	movs	r3, #8
 80022f8:	e00c      	b.n	8002314 <HAL_GPIO_Init+0x228>
 80022fa:	2306      	movs	r3, #6
 80022fc:	e00a      	b.n	8002314 <HAL_GPIO_Init+0x228>
 80022fe:	2305      	movs	r3, #5
 8002300:	e008      	b.n	8002314 <HAL_GPIO_Init+0x228>
 8002302:	2304      	movs	r3, #4
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x228>
 8002306:	2303      	movs	r3, #3
 8002308:	e004      	b.n	8002314 <HAL_GPIO_Init+0x228>
 800230a:	2302      	movs	r3, #2
 800230c:	e002      	b.n	8002314 <HAL_GPIO_Init+0x228>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_GPIO_Init+0x228>
 8002312:	2300      	movs	r3, #0
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	f002 0203 	and.w	r2, r2, #3
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	4093      	lsls	r3, r2
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002324:	4935      	ldr	r1, [pc, #212]	; (80023fc <HAL_GPIO_Init+0x310>)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_GPIO_Init+0x334>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002356:	4a32      	ldr	r2, [pc, #200]	; (8002420 <HAL_GPIO_Init+0x334>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_GPIO_Init+0x334>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_GPIO_Init+0x334>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_GPIO_Init+0x334>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023aa:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_GPIO_Init+0x334>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_GPIO_Init+0x334>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_GPIO_Init+0x334>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b0f      	cmp	r3, #15
 80023e4:	f67f ae90 	bls.w	8002108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40013800 	.word	0x40013800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020400 	.word	0x40020400
 8002408:	40020800 	.word	0x40020800
 800240c:	40020c00 	.word	0x40020c00
 8002410:	40021000 	.word	0x40021000
 8002414:	40021400 	.word	0x40021400
 8002418:	40021800 	.word	0x40021800
 800241c:	40021c00 	.word	0x40021c00
 8002420:	40013c00 	.word	0x40013c00

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002440:	e003      	b.n	800244a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e25e      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d075      	beq.n	8002562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b04      	cmp	r3, #4
 8002480:	d00c      	beq.n	800249c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002482:	4b85      	ldr	r3, [pc, #532]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248a:	2b08      	cmp	r3, #8
 800248c:	d112      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248e:	4b82      	ldr	r3, [pc, #520]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800249a:	d10b      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	4b7e      	ldr	r3, [pc, #504]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05b      	beq.n	8002560 <HAL_RCC_OscConfig+0x108>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d157      	bne.n	8002560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e239      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x74>
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a75      	ldr	r2, [pc, #468]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e01d      	b.n	8002508 <HAL_RCC_OscConfig+0xb0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x98>
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6f      	ldr	r2, [pc, #444]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6c      	ldr	r2, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0xb0>
 80024f0:	4b69      	ldr	r3, [pc, #420]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a68      	ldr	r2, [pc, #416]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b66      	ldr	r3, [pc, #408]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a65      	ldr	r2, [pc, #404]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff f93c 	bl	800178c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff f938 	bl	800178c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1fe      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b5b      	ldr	r3, [pc, #364]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0xc0>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff f928 	bl	800178c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff f924 	bl	800178c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1ea      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0xe8>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d063      	beq.n	8002636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256e:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002582:	2b08      	cmp	r3, #8
 8002584:	d11c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d116      	bne.n	80025c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x152>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e1be      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4937      	ldr	r1, [pc, #220]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	e03a      	b.n	8002636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_RCC_OscConfig+0x244>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7ff f8dd 	bl	800178c <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d6:	f7ff f8d9 	bl	800178c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e19f      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4925      	ldr	r1, [pc, #148]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_OscConfig+0x244>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7ff f8bc 	bl	800178c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002618:	f7ff f8b8 	bl	800178c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e17e      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d036      	beq.n	80026b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d016      	beq.n	8002678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCC_OscConfig+0x248>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7ff f89c 	bl	800178c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002658:	f7ff f898 	bl	800178c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e15e      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_OscConfig+0x240>)
 800266c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x200>
 8002676:	e01b      	b.n	80026b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_RCC_OscConfig+0x248>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7ff f885 	bl	800178c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	e00e      	b.n	80026a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002686:	f7ff f881 	bl	800178c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d907      	bls.n	80026a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e147      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
 8002698:	40023800 	.word	0x40023800
 800269c:	42470000 	.word	0x42470000
 80026a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ea      	bne.n	8002686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8097 	beq.w	80027ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10f      	bne.n	80026ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a7c      	ldr	r2, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b77      	ldr	r3, [pc, #476]	; (80028cc <HAL_RCC_OscConfig+0x474>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b74      	ldr	r3, [pc, #464]	; (80028cc <HAL_RCC_OscConfig+0x474>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a73      	ldr	r2, [pc, #460]	; (80028cc <HAL_RCC_OscConfig+0x474>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7ff f841 	bl	800178c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7ff f83d 	bl	800178c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e103      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <HAL_RCC_OscConfig+0x474>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x2ea>
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a63      	ldr	r2, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	e01c      	b.n	800277c <HAL_RCC_OscConfig+0x324>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x30c>
 800274a:	4b5f      	ldr	r3, [pc, #380]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a5e      	ldr	r2, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
 8002756:	4b5c      	ldr	r3, [pc, #368]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a5b      	ldr	r2, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0x324>
 8002764:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6713      	str	r3, [r2, #112]	; 0x70
 8002770:	4b55      	ldr	r3, [pc, #340]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7ff f802 	bl	800178c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7fe fffe 	bl	800178c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0c2      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0ee      	beq.n	800278c <HAL_RCC_OscConfig+0x334>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7fe ffec 	bl	800178c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe ffe8 	bl	800178c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0ac      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ee      	bne.n	80027b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a38      	ldr	r2, [pc, #224]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8098 	beq.w	8002926 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d05c      	beq.n	80028bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d141      	bne.n	800288e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCC_OscConfig+0x478>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe ffbc 	bl	800178c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002818:	f7fe ffb8 	bl	800178c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e07e      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	491b      	ldr	r1, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x478>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe ff91 	bl	800178c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe ff8d 	bl	800178c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e053      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x416>
 800288c:	e04b      	b.n	8002926 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_OscConfig+0x478>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe ff7a 	bl	800178c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe ff76 	bl	800178c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e03c      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x470>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x444>
 80028ba:	e034      	b.n	8002926 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e02f      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_RCC_OscConfig+0x4d8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d11c      	bne.n	8002922 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d115      	bne.n	8002922 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002902:	4293      	cmp	r3, r2
 8002904:	d10d      	bne.n	8002922 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0cc      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b68      	ldr	r3, [pc, #416]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d90c      	bls.n	8002970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0b8      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	494d      	ldr	r1, [pc, #308]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d044      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d119      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e07f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e067      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4934      	ldr	r1, [pc, #208]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe feb2 	bl	800178c <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe feae 	bl	800178c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e04f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d20c      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e032      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4916      	ldr	r1, [pc, #88]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	490e      	ldr	r1, [pc, #56]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aba:	f000 f821 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	490a      	ldr	r1, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	5ccb      	ldrb	r3, [r1, r3]
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fe12 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08005858 	.word	0x08005858
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b04:	b094      	sub	sp, #80	; 0x50
 8002b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b10:	2300      	movs	r3, #0
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b18:	4b79      	ldr	r3, [pc, #484]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d00d      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x40>
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	f200 80e1 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b32:	e0db      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b38:	e0db      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3a:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b3e:	e0d8      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4a:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d063      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b56:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b72:	4622      	mov	r2, r4
 8002b74:	462b      	mov	r3, r5
 8002b76:	f04f 0000 	mov.w	r0, #0
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	0159      	lsls	r1, r3, #5
 8002b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b84:	0150      	lsls	r0, r2, #5
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	1a51      	subs	r1, r2, r1
 8002b8e:	6139      	str	r1, [r7, #16]
 8002b90:	4629      	mov	r1, r5
 8002b92:	eb63 0301 	sbc.w	r3, r3, r1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	018b      	lsls	r3, r1, #6
 8002ba8:	4651      	mov	r1, sl
 8002baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bae:	4651      	mov	r1, sl
 8002bb0:	018a      	lsls	r2, r1, #6
 8002bb2:	4651      	mov	r1, sl
 8002bb4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb8:	4659      	mov	r1, fp
 8002bba:	eb63 0901 	sbc.w	r9, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb18 0303 	adds.w	r3, r8, r3
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	462b      	mov	r3, r5
 8002be0:	eb49 0303 	adc.w	r3, r9, r3
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	024b      	lsls	r3, r1, #9
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	024a      	lsls	r2, r1, #9
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c06:	2200      	movs	r2, #0
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c10:	f7fd fce6 	bl	80005e0 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4613      	mov	r3, r2
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c1c:	e058      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1e:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	2200      	movs	r2, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	4611      	mov	r1, r2
 8002c2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2e:	623b      	str	r3, [r7, #32]
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	f04f 0000 	mov.w	r0, #0
 8002c40:	f04f 0100 	mov.w	r1, #0
 8002c44:	0159      	lsls	r1, r3, #5
 8002c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c4a:	0150      	lsls	r0, r2, #5
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4641      	mov	r1, r8
 8002c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c56:	4649      	mov	r1, r9
 8002c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c70:	ebb2 040a 	subs.w	r4, r2, sl
 8002c74:	eb63 050b 	sbc.w	r5, r3, fp
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	00eb      	lsls	r3, r5, #3
 8002c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c86:	00e2      	lsls	r2, r4, #3
 8002c88:	4614      	mov	r4, r2
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	18e3      	adds	r3, r4, r3
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	464b      	mov	r3, r9
 8002c94:	eb45 0303 	adc.w	r3, r5, r3
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	028b      	lsls	r3, r1, #10
 8002caa:	4621      	mov	r1, r4
 8002cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	028a      	lsls	r2, r1, #10
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	61fa      	str	r2, [r7, #28]
 8002cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc4:	f7fd fc8c 	bl	80005e0 <__aeabi_uldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3750      	adds	r7, #80	; 0x50
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	007a1200 	.word	0x007a1200

08002d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000000 	.word	0x20000000

08002d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d28:	f7ff fff0 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	0a9b      	lsrs	r3, r3, #10
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	4903      	ldr	r1, [pc, #12]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	08005868 	.word	0x08005868

08002d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d50:	f7ff ffdc 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0b5b      	lsrs	r3, r3, #13
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4903      	ldr	r1, [pc, #12]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	08005868 	.word	0x08005868

08002d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e01d      	b.n	8002dc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fa9e 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 fbde 	bl	8003574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d007      	beq.n	8002dfc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e01d      	b.n	8002e60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fe faa1 	bl	8001380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f000 fb8f 	bl	8003574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2201      	movs	r2, #1
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fe64 	bl	8003b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <HAL_TIM_PWM_Start+0x74>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x2c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <HAL_TIM_PWM_Start+0x78>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d101      	bne.n	8002e98 <HAL_TIM_PWM_Start+0x30>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_TIM_PWM_Start+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d007      	beq.n	8002ed0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d841      	bhi.n	8002f78 <HAL_TIM_PWM_Start_IT+0x94>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <HAL_TIM_PWM_Start_IT+0x18>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f79 	.word	0x08002f79
 8002f04:	08002f79 	.word	0x08002f79
 8002f08:	08002f79 	.word	0x08002f79
 8002f0c:	08002f43 	.word	0x08002f43
 8002f10:	08002f79 	.word	0x08002f79
 8002f14:	08002f79 	.word	0x08002f79
 8002f18:	08002f79 	.word	0x08002f79
 8002f1c:	08002f55 	.word	0x08002f55
 8002f20:	08002f79 	.word	0x08002f79
 8002f24:	08002f79 	.word	0x08002f79
 8002f28:	08002f79 	.word	0x08002f79
 8002f2c:	08002f67 	.word	0x08002f67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0202 	orr.w	r2, r2, #2
 8002f3e:	60da      	str	r2, [r3, #12]
      break;
 8002f40:	e01b      	b.n	8002f7a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0204 	orr.w	r2, r2, #4
 8002f50:	60da      	str	r2, [r3, #12]
      break;
 8002f52:	e012      	b.n	8002f7a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0208 	orr.w	r2, r2, #8
 8002f62:	60da      	str	r2, [r3, #12]
      break;
 8002f64:	e009      	b.n	8002f7a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0210 	orr.w	r2, r2, #16
 8002f74:	60da      	str	r2, [r3, #12]
      break;
 8002f76:	e000      	b.n	8002f7a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002f78:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fde0 	bl	8003b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <HAL_TIM_PWM_Start_IT+0x100>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_PWM_Start_IT+0xb8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_TIM_PWM_Start_IT+0x104>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIM_PWM_Start_IT+0xbc>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_TIM_PWM_Start_IT+0xbe>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d007      	beq.n	8002fd8 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40010400 	.word	0x40010400

08002fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d122      	bne.n	8003048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b02      	cmp	r3, #2
 800300e:	d11b      	bne.n	8003048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0202 	mvn.w	r2, #2
 8003018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa82 	bl	8003538 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa74 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fa85 	bl	800354c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d122      	bne.n	800309c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d11b      	bne.n	800309c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0204 	mvn.w	r2, #4
 800306c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa58 	bl	8003538 <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa4a 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fa5b 	bl	800354c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d122      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d11b      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0208 	mvn.w	r2, #8
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2204      	movs	r2, #4
 80030c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fa2e 	bl	8003538 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa20 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fa31 	bl	800354c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b10      	cmp	r3, #16
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0210 	mvn.w	r2, #16
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2208      	movs	r2, #8
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fa04 	bl	8003538 <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9f6 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fa07 	bl	800354c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0201 	mvn.w	r2, #1
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9d0 	bl	8003510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	2b80      	cmp	r3, #128	; 0x80
 800317c:	d10e      	bne.n	800319c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d107      	bne.n	800319c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fd82 	bl	8003ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9cc 	bl	8003560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0220 	mvn.w	r2, #32
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fd4c 	bl	8003c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003212:	2302      	movs	r3, #2
 8003214:	e0b4      	b.n	8003380 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b0c      	cmp	r3, #12
 800322a:	f200 809f 	bhi.w	800336c <HAL_TIM_PWM_ConfigChannel+0x170>
 800322e:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003269 	.word	0x08003269
 8003238:	0800336d 	.word	0x0800336d
 800323c:	0800336d 	.word	0x0800336d
 8003240:	0800336d 	.word	0x0800336d
 8003244:	080032a9 	.word	0x080032a9
 8003248:	0800336d 	.word	0x0800336d
 800324c:	0800336d 	.word	0x0800336d
 8003250:	0800336d 	.word	0x0800336d
 8003254:	080032eb 	.word	0x080032eb
 8003258:	0800336d 	.word	0x0800336d
 800325c:	0800336d 	.word	0x0800336d
 8003260:	0800336d 	.word	0x0800336d
 8003264:	0800332b 	.word	0x0800332b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fa20 	bl	80036b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0208 	orr.w	r2, r2, #8
 8003282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6999      	ldr	r1, [r3, #24]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	619a      	str	r2, [r3, #24]
      break;
 80032a6:	e062      	b.n	800336e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fa70 	bl	8003794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6999      	ldr	r1, [r3, #24]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	021a      	lsls	r2, r3, #8
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	619a      	str	r2, [r3, #24]
      break;
 80032e8:	e041      	b.n	800336e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fac5 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0208 	orr.w	r2, r2, #8
 8003304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0204 	bic.w	r2, r2, #4
 8003314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69d9      	ldr	r1, [r3, #28]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	61da      	str	r2, [r3, #28]
      break;
 8003328:	e021      	b.n	800336e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fb19 	bl	8003968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69d9      	ldr	r1, [r3, #28]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	021a      	lsls	r2, r3, #8
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	61da      	str	r2, [r3, #28]
      break;
 800336a:	e000      	b.n	800336e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800336c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_TIM_ConfigClockSource+0x18>
 800339c:	2302      	movs	r3, #2
 800339e:	e0b3      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x180>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d8:	d03e      	beq.n	8003458 <HAL_TIM_ConfigClockSource+0xd0>
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033de:	f200 8087 	bhi.w	80034f0 <HAL_TIM_ConfigClockSource+0x168>
 80033e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e6:	f000 8085 	beq.w	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ee:	d87f      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x168>
 80033f0:	2b70      	cmp	r3, #112	; 0x70
 80033f2:	d01a      	beq.n	800342a <HAL_TIM_ConfigClockSource+0xa2>
 80033f4:	2b70      	cmp	r3, #112	; 0x70
 80033f6:	d87b      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x168>
 80033f8:	2b60      	cmp	r3, #96	; 0x60
 80033fa:	d050      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x116>
 80033fc:	2b60      	cmp	r3, #96	; 0x60
 80033fe:	d877      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x168>
 8003400:	2b50      	cmp	r3, #80	; 0x50
 8003402:	d03c      	beq.n	800347e <HAL_TIM_ConfigClockSource+0xf6>
 8003404:	2b50      	cmp	r3, #80	; 0x50
 8003406:	d873      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x168>
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d058      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x136>
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d86f      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x168>
 8003410:	2b30      	cmp	r3, #48	; 0x30
 8003412:	d064      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x156>
 8003414:	2b30      	cmp	r3, #48	; 0x30
 8003416:	d86b      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x168>
 8003418:	2b20      	cmp	r3, #32
 800341a:	d060      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x156>
 800341c:	2b20      	cmp	r3, #32
 800341e:	d867      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x168>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05c      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x156>
 8003424:	2b10      	cmp	r3, #16
 8003426:	d05a      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003428:	e062      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f000 fb65 	bl	8003b08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800344c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
      break;
 8003456:	e04e      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6899      	ldr	r1, [r3, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f000 fb4e 	bl	8003b08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800347a:	609a      	str	r2, [r3, #8]
      break;
 800347c:	e03b      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	f000 fac2 	bl	8003a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2150      	movs	r1, #80	; 0x50
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fb1b 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 800349c:	e02b      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f000 fae1 	bl	8003a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2160      	movs	r1, #96	; 0x60
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fb0b 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 80034bc:	e01b      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f000 faa2 	bl	8003a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2140      	movs	r1, #64	; 0x40
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fafb 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 80034dc:	e00b      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f000 faf2 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 80034ee:	e002      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034f0:	bf00      	nop
 80034f2:	e000      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a40      	ldr	r2, [pc, #256]	; (8003688 <TIM_Base_SetConfig+0x114>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d013      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003592:	d00f      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3d      	ldr	r2, [pc, #244]	; (800368c <TIM_Base_SetConfig+0x118>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00b      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <TIM_Base_SetConfig+0x11c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <TIM_Base_SetConfig+0x120>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3a      	ldr	r2, [pc, #232]	; (8003698 <TIM_Base_SetConfig+0x124>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d108      	bne.n	80035c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <TIM_Base_SetConfig+0x114>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d027      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	; (800368c <TIM_Base_SetConfig+0x118>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d023      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2b      	ldr	r2, [pc, #172]	; (8003690 <TIM_Base_SetConfig+0x11c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2a      	ldr	r2, [pc, #168]	; (8003694 <TIM_Base_SetConfig+0x120>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <TIM_Base_SetConfig+0x124>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d017      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a28      	ldr	r2, [pc, #160]	; (800369c <TIM_Base_SetConfig+0x128>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <TIM_Base_SetConfig+0x12c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00f      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <TIM_Base_SetConfig+0x130>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <TIM_Base_SetConfig+0x134>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <TIM_Base_SetConfig+0x138>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <TIM_Base_SetConfig+0x13c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d108      	bne.n	8003638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <TIM_Base_SetConfig+0x114>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0xf8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <TIM_Base_SetConfig+0x124>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d103      	bne.n	8003674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	615a      	str	r2, [r3, #20]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40010000 	.word	0x40010000
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40000c00 	.word	0x40000c00
 8003698:	40010400 	.word	0x40010400
 800369c:	40014000 	.word	0x40014000
 80036a0:	40014400 	.word	0x40014400
 80036a4:	40014800 	.word	0x40014800
 80036a8:	40001800 	.word	0x40001800
 80036ac:	40001c00 	.word	0x40001c00
 80036b0:	40002000 	.word	0x40002000

080036b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0201 	bic.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f023 0302 	bic.w	r3, r3, #2
 80036fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a20      	ldr	r2, [pc, #128]	; (800378c <TIM_OC1_SetConfig+0xd8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_OC1_SetConfig+0x64>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <TIM_OC1_SetConfig+0xdc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10c      	bne.n	8003732 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0308 	bic.w	r3, r3, #8
 800371e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <TIM_OC1_SetConfig+0xd8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_OC1_SetConfig+0x8e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <TIM_OC1_SetConfig+0xdc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d111      	bne.n	8003766 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	621a      	str	r2, [r3, #32]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40010000 	.word	0x40010000
 8003790:	40010400 	.word	0x40010400

08003794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0210 	bic.w	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0320 	bic.w	r3, r3, #32
 80037de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a22      	ldr	r2, [pc, #136]	; (8003878 <TIM_OC2_SetConfig+0xe4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_OC2_SetConfig+0x68>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a21      	ldr	r2, [pc, #132]	; (800387c <TIM_OC2_SetConfig+0xe8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d10d      	bne.n	8003818 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003816:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a17      	ldr	r2, [pc, #92]	; (8003878 <TIM_OC2_SetConfig+0xe4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_OC2_SetConfig+0x94>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <TIM_OC2_SetConfig+0xe8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d113      	bne.n	8003850 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40010400 	.word	0x40010400

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a21      	ldr	r2, [pc, #132]	; (8003960 <TIM_OC3_SetConfig+0xe0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_OC3_SetConfig+0x66>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a20      	ldr	r2, [pc, #128]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a16      	ldr	r2, [pc, #88]	; (8003960 <TIM_OC3_SetConfig+0xe0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_OC3_SetConfig+0x92>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40010000 	.word	0x40010000
 8003964:	40010400 	.word	0x40010400

08003968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	031b      	lsls	r3, r3, #12
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <TIM_OC4_SetConfig+0xa4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_OC4_SetConfig+0x68>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <TIM_OC4_SetConfig+0xa8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d109      	bne.n	80039e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	019b      	lsls	r3, r3, #6
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40010400 	.word	0x40010400

08003a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 030a 	bic.w	r3, r3, #10
 8003a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b087      	sub	sp, #28
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f023 0210 	bic.w	r2, r3, #16
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	031b      	lsls	r3, r3, #12
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f043 0307 	orr.w	r3, r3, #7
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	431a      	orrs	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e05a      	b.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d01d      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d018      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10c      	bne.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40000800 	.word	0x40000800
 8003c7c:	40000c00 	.word	0x40000c00
 8003c80:	40010400 	.word	0x40010400
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40001800 	.word	0x40001800

08003c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e03f      	b.n	8003d46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fbd8 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2224      	movs	r2, #36	; 0x24
 8003ce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fba1 	bl	8004440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b088      	sub	sp, #32
 8003d52:	af02      	add	r7, sp, #8
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	f040 8083 	bne.w	8003e76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_UART_Transmit+0x2e>
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e07b      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit+0x40>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e074      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2221      	movs	r2, #33	; 0x21
 8003da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003da4:	f7fd fcf2 	bl	800178c <HAL_GetTick>
 8003da8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003dbe:	e042      	b.n	8003e46 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d122      	bne.n	8003e1e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f9c0 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e042      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e04:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3302      	adds	r3, #2
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	e017      	b.n	8003e46 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	e013      	b.n	8003e46 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f99d 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e01f      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	60ba      	str	r2, [r7, #8]
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1b7      	bne.n	8003dc0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	2140      	movs	r1, #64	; 0x40
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f984 	bl	8004168 <UART_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e006      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d140      	bne.n	8003f1c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_Receive_IT+0x26>
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e039      	b.n	8003f1e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Receive_IT+0x38>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e032      	b.n	8003f1e <HAL_UART_Receive_IT+0x9e>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2222      	movs	r2, #34	; 0x22
 8003edc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0220 	orr.w	r2, r2, #32
 8003f16:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_UART_IRQHandler+0x52>
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f9e0 	bl	800433c <UART_Receive_IT>
      return;
 8003f7c:	e0d0      	b.n	8004120 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80b0 	beq.w	80040e6 <HAL_UART_IRQHandler+0x1ba>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <HAL_UART_IRQHandler+0x70>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80a5 	beq.w	80040e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_UART_IRQHandler+0x90>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_UART_IRQHandler+0xb0>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	f043 0202 	orr.w	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_UART_IRQHandler+0xd0>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	f043 0204 	orr.w	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00f      	beq.n	8004026 <HAL_UART_IRQHandler+0xfa>
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_UART_IRQHandler+0xee>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	f043 0208 	orr.w	r2, r3, #8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d077      	beq.n	800411e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_UART_IRQHandler+0x11c>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f97a 	bl	800433c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <HAL_UART_IRQHandler+0x144>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d031      	beq.n	80040d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8c3 	bl	80041fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d123      	bne.n	80040cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004092:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	4a21      	ldr	r2, [pc, #132]	; (8004128 <HAL_UART_IRQHandler+0x1fc>)
 80040a2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fd fd93 	bl	8001bd4 <HAL_DMA_Abort_IT>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d016      	beq.n	80040e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040be:	4610      	mov	r0, r2
 80040c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c2:	e00e      	b.n	80040e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f845 	bl	8004154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ca:	e00a      	b.n	80040e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f841 	bl	8004154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d2:	e006      	b.n	80040e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f83d 	bl	8004154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80040e0:	e01d      	b.n	800411e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e2:	bf00      	nop
    return;
 80040e4:	e01b      	b.n	800411e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_UART_IRQHandler+0x1d6>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8b0 	bl	8004260 <UART_Transmit_IT>
    return;
 8004100:	e00e      	b.n	8004120 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_UART_IRQHandler+0x1f4>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8f8 	bl	800430c <UART_EndTransmit_IT>
    return;
 800411c:	e000      	b.n	8004120 <HAL_UART_IRQHandler+0x1f4>
    return;
 800411e:	bf00      	nop
  }
}
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	08004239 	.word	0x08004239

0800412c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004178:	e02c      	b.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d028      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x30>
 8004188:	f7fd fb00 	bl	800178c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	429a      	cmp	r2, r3
 8004196:	d21d      	bcs.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e00f      	b.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d0c3      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004212:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff ff7e 	bl	8004154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b21      	cmp	r3, #33	; 0x21
 8004272:	d144      	bne.n	80042fe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d11a      	bne.n	80042b4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004292:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]
 80042a6:	e00e      	b.n	80042c6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	621a      	str	r2, [r3, #32]
 80042b2:	e008      	b.n	80042c6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	1c59      	adds	r1, r3, #1
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6211      	str	r1, [r2, #32]
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4619      	mov	r1, r3
 80042d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004322:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff fefd 	bl	800412c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b22      	cmp	r3, #34	; 0x22
 800434e:	d171      	bne.n	8004434 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d123      	bne.n	80043a2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10e      	bne.n	8004386 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	1c9a      	adds	r2, r3, #2
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
 8004384:	e029      	b.n	80043da <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	b29b      	uxth	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28
 80043a0:	e01b      	b.n	80043da <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6858      	ldr	r0, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	1c59      	adds	r1, r3, #1
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6291      	str	r1, [r2, #40]	; 0x28
 80043ba:	b2c2      	uxtb	r2, r0
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e00c      	b.n	80043da <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	1c58      	adds	r0, r3, #1
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	6288      	str	r0, [r1, #40]	; 0x28
 80043d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4619      	mov	r1, r3
 80043e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d120      	bne.n	8004430 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0220 	bic.w	r2, r2, #32
 80043fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800440c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fe8a 	bl	8004140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e002      	b.n	8004436 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004444:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004448:	af00      	add	r7, sp, #0
 800444a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800444e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800445a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800445e:	68d9      	ldr	r1, [r3, #12]
 8004460:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	ea40 0301 	orr.w	r3, r0, r1
 800446a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800446c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	431a      	orrs	r2, r3
 800447a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	431a      	orrs	r2, r3
 8004482:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800448e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800449a:	f021 010c 	bic.w	r1, r1, #12
 800449e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80044a8:	430b      	orrs	r3, r1
 80044aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d4:	f040 824a 	bne.w	800496c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b96      	ldr	r3, [pc, #600]	; (8004738 <UART_SetConfig+0x2f8>)
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d006      	beq.n	80044f2 <UART_SetConfig+0xb2>
 80044e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b94      	ldr	r3, [pc, #592]	; (800473c <UART_SetConfig+0x2fc>)
 80044ec:	429a      	cmp	r2, r3
 80044ee:	f040 8129 	bne.w	8004744 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044f2:	f7fe fc2b 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 80044f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004504:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004508:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800450c:	4622      	mov	r2, r4
 800450e:	462b      	mov	r3, r5
 8004510:	1891      	adds	r1, r2, r2
 8004512:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004516:	415b      	adcs	r3, r3
 8004518:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800451c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004520:	4621      	mov	r1, r4
 8004522:	1851      	adds	r1, r2, r1
 8004524:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004528:	4629      	mov	r1, r5
 800452a:	414b      	adcs	r3, r1
 800452c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800453c:	4649      	mov	r1, r9
 800453e:	00cb      	lsls	r3, r1, #3
 8004540:	4641      	mov	r1, r8
 8004542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004546:	4641      	mov	r1, r8
 8004548:	00ca      	lsls	r2, r1, #3
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	4603      	mov	r3, r0
 8004550:	4622      	mov	r2, r4
 8004552:	189b      	adds	r3, r3, r2
 8004554:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004558:	462b      	mov	r3, r5
 800455a:	460a      	mov	r2, r1
 800455c:	eb42 0303 	adc.w	r3, r2, r3
 8004560:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004564:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004570:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004574:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004578:	460b      	mov	r3, r1
 800457a:	18db      	adds	r3, r3, r3
 800457c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004580:	4613      	mov	r3, r2
 8004582:	eb42 0303 	adc.w	r3, r2, r3
 8004586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800458a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800458e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004592:	f7fc f825 	bl	80005e0 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b69      	ldr	r3, [pc, #420]	; (8004740 <UART_SetConfig+0x300>)
 800459c:	fba3 2302 	umull	r2, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	011c      	lsls	r4, r3, #4
 80045a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80045ae:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80045b2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80045b6:	4642      	mov	r2, r8
 80045b8:	464b      	mov	r3, r9
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80045c0:	415b      	adcs	r3, r3
 80045c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045c6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80045ca:	4641      	mov	r1, r8
 80045cc:	1851      	adds	r1, r2, r1
 80045ce:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80045e6:	4659      	mov	r1, fp
 80045e8:	00cb      	lsls	r3, r1, #3
 80045ea:	4651      	mov	r1, sl
 80045ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f0:	4651      	mov	r1, sl
 80045f2:	00ca      	lsls	r2, r1, #3
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	4603      	mov	r3, r0
 80045fa:	4642      	mov	r2, r8
 80045fc:	189b      	adds	r3, r3, r2
 80045fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004602:	464b      	mov	r3, r9
 8004604:	460a      	mov	r2, r1
 8004606:	eb42 0303 	adc.w	r3, r2, r3
 800460a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800460e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800461a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800461e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004622:	460b      	mov	r3, r1
 8004624:	18db      	adds	r3, r3, r3
 8004626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800462a:	4613      	mov	r3, r2
 800462c:	eb42 0303 	adc.w	r3, r2, r3
 8004630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004634:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004638:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800463c:	f7fb ffd0 	bl	80005e0 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4611      	mov	r1, r2
 8004646:	4b3e      	ldr	r3, [pc, #248]	; (8004740 <UART_SetConfig+0x300>)
 8004648:	fba3 2301 	umull	r2, r3, r3, r1
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	2264      	movs	r2, #100	; 0x64
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	1acb      	subs	r3, r1, r3
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800465c:	4b38      	ldr	r3, [pc, #224]	; (8004740 <UART_SetConfig+0x300>)
 800465e:	fba3 2302 	umull	r2, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800466a:	441c      	add	r4, r3
 800466c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004676:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800467a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800467e:	4642      	mov	r2, r8
 8004680:	464b      	mov	r3, r9
 8004682:	1891      	adds	r1, r2, r2
 8004684:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004688:	415b      	adcs	r3, r3
 800468a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800468e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004692:	4641      	mov	r1, r8
 8004694:	1851      	adds	r1, r2, r1
 8004696:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800469a:	4649      	mov	r1, r9
 800469c:	414b      	adcs	r3, r1
 800469e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80046ae:	4659      	mov	r1, fp
 80046b0:	00cb      	lsls	r3, r1, #3
 80046b2:	4651      	mov	r1, sl
 80046b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b8:	4651      	mov	r1, sl
 80046ba:	00ca      	lsls	r2, r1, #3
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	4603      	mov	r3, r0
 80046c2:	4642      	mov	r2, r8
 80046c4:	189b      	adds	r3, r3, r2
 80046c6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80046ca:	464b      	mov	r3, r9
 80046cc:	460a      	mov	r2, r1
 80046ce:	eb42 0303 	adc.w	r3, r2, r3
 80046d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80046d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80046e2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80046e6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80046ea:	460b      	mov	r3, r1
 80046ec:	18db      	adds	r3, r3, r3
 80046ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046f2:	4613      	mov	r3, r2
 80046f4:	eb42 0303 	adc.w	r3, r2, r3
 80046f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046fc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004700:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004704:	f7fb ff6c 	bl	80005e0 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <UART_SetConfig+0x300>)
 800470e:	fba3 1302 	umull	r1, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	2164      	movs	r1, #100	; 0x64
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	3332      	adds	r3, #50	; 0x32
 8004720:	4a07      	ldr	r2, [pc, #28]	; (8004740 <UART_SetConfig+0x300>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	f003 0207 	and.w	r2, r3, #7
 800472c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4422      	add	r2, r4
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	e349      	b.n	8004dcc <UART_SetConfig+0x98c>
 8004738:	40011000 	.word	0x40011000
 800473c:	40011400 	.word	0x40011400
 8004740:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004744:	f7fe faee 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8004748:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800474c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004750:	2200      	movs	r2, #0
 8004752:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004756:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800475a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800475e:	4622      	mov	r2, r4
 8004760:	462b      	mov	r3, r5
 8004762:	1891      	adds	r1, r2, r2
 8004764:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004768:	415b      	adcs	r3, r3
 800476a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800476e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004772:	4621      	mov	r1, r4
 8004774:	eb12 0a01 	adds.w	sl, r2, r1
 8004778:	4629      	mov	r1, r5
 800477a:	eb43 0b01 	adc.w	fp, r3, r1
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800478a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800478e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004792:	4692      	mov	sl, r2
 8004794:	469b      	mov	fp, r3
 8004796:	4623      	mov	r3, r4
 8004798:	eb1a 0303 	adds.w	r3, sl, r3
 800479c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80047a0:	462b      	mov	r3, r5
 80047a2:	eb4b 0303 	adc.w	r3, fp, r3
 80047a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80047aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80047b6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80047ba:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80047be:	460b      	mov	r3, r1
 80047c0:	18db      	adds	r3, r3, r3
 80047c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c6:	4613      	mov	r3, r2
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80047d4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80047d8:	f7fb ff02 	bl	80005e0 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4b61      	ldr	r3, [pc, #388]	; (8004968 <UART_SetConfig+0x528>)
 80047e2:	fba3 2302 	umull	r2, r3, r3, r2
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	011c      	lsls	r4, r3, #4
 80047ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80047f4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80047f8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	1891      	adds	r1, r2, r2
 8004802:	67b9      	str	r1, [r7, #120]	; 0x78
 8004804:	415b      	adcs	r3, r3
 8004806:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004808:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800480c:	4641      	mov	r1, r8
 800480e:	1851      	adds	r1, r2, r1
 8004810:	6739      	str	r1, [r7, #112]	; 0x70
 8004812:	4649      	mov	r1, r9
 8004814:	414b      	adcs	r3, r1
 8004816:	677b      	str	r3, [r7, #116]	; 0x74
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004824:	4659      	mov	r1, fp
 8004826:	00cb      	lsls	r3, r1, #3
 8004828:	4651      	mov	r1, sl
 800482a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482e:	4651      	mov	r1, sl
 8004830:	00ca      	lsls	r2, r1, #3
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	4603      	mov	r3, r0
 8004838:	4642      	mov	r2, r8
 800483a:	189b      	adds	r3, r3, r2
 800483c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004840:	464b      	mov	r3, r9
 8004842:	460a      	mov	r2, r1
 8004844:	eb42 0303 	adc.w	r3, r2, r3
 8004848:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800484c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004858:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800485c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004860:	460b      	mov	r3, r1
 8004862:	18db      	adds	r3, r3, r3
 8004864:	66bb      	str	r3, [r7, #104]	; 0x68
 8004866:	4613      	mov	r3, r2
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800486e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004872:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004876:	f7fb feb3 	bl	80005e0 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4611      	mov	r1, r2
 8004880:	4b39      	ldr	r3, [pc, #228]	; (8004968 <UART_SetConfig+0x528>)
 8004882:	fba3 2301 	umull	r2, r3, r3, r1
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2264      	movs	r2, #100	; 0x64
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004896:	4b34      	ldr	r3, [pc, #208]	; (8004968 <UART_SetConfig+0x528>)
 8004898:	fba3 2302 	umull	r2, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048a4:	441c      	add	r4, r3
 80048a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80048b0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80048b4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	6639      	str	r1, [r7, #96]	; 0x60
 80048c0:	415b      	adcs	r3, r3
 80048c2:	667b      	str	r3, [r7, #100]	; 0x64
 80048c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80048c8:	4641      	mov	r1, r8
 80048ca:	1851      	adds	r1, r2, r1
 80048cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80048ce:	4649      	mov	r1, r9
 80048d0:	414b      	adcs	r3, r1
 80048d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80048e0:	4659      	mov	r1, fp
 80048e2:	00cb      	lsls	r3, r1, #3
 80048e4:	4651      	mov	r1, sl
 80048e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ea:	4651      	mov	r1, sl
 80048ec:	00ca      	lsls	r2, r1, #3
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	4642      	mov	r2, r8
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80048fc:	464b      	mov	r3, r9
 80048fe:	460a      	mov	r2, r1
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004908:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004914:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004918:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800491c:	460b      	mov	r3, r1
 800491e:	18db      	adds	r3, r3, r3
 8004920:	653b      	str	r3, [r7, #80]	; 0x50
 8004922:	4613      	mov	r3, r2
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	657b      	str	r3, [r7, #84]	; 0x54
 800492a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800492e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004932:	f7fb fe55 	bl	80005e0 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <UART_SetConfig+0x528>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	3332      	adds	r3, #50	; 0x32
 800494e:	4a06      	ldr	r2, [pc, #24]	; (8004968 <UART_SetConfig+0x528>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f003 0207 	and.w	r2, r3, #7
 800495a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4422      	add	r2, r4
 8004962:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004964:	e232      	b.n	8004dcc <UART_SetConfig+0x98c>
 8004966:	bf00      	nop
 8004968:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800496c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b8d      	ldr	r3, [pc, #564]	; (8004ba8 <UART_SetConfig+0x768>)
 8004974:	429a      	cmp	r2, r3
 8004976:	d006      	beq.n	8004986 <UART_SetConfig+0x546>
 8004978:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b8b      	ldr	r3, [pc, #556]	; (8004bac <UART_SetConfig+0x76c>)
 8004980:	429a      	cmp	r2, r3
 8004982:	f040 8117 	bne.w	8004bb4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004986:	f7fe f9e1 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 800498a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800498e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004992:	2200      	movs	r2, #0
 8004994:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004998:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800499c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80049a0:	4622      	mov	r2, r4
 80049a2:	462b      	mov	r3, r5
 80049a4:	1891      	adds	r1, r2, r2
 80049a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049a8:	415b      	adcs	r3, r3
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049b0:	4621      	mov	r1, r4
 80049b2:	eb12 0801 	adds.w	r8, r2, r1
 80049b6:	4629      	mov	r1, r5
 80049b8:	eb43 0901 	adc.w	r9, r3, r1
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d0:	4690      	mov	r8, r2
 80049d2:	4699      	mov	r9, r3
 80049d4:	4623      	mov	r3, r4
 80049d6:	eb18 0303 	adds.w	r3, r8, r3
 80049da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80049de:	462b      	mov	r3, r5
 80049e0:	eb49 0303 	adc.w	r3, r9, r3
 80049e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80049e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80049f4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004a04:	4629      	mov	r1, r5
 8004a06:	008b      	lsls	r3, r1, #2
 8004a08:	4621      	mov	r1, r4
 8004a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a0e:	4621      	mov	r1, r4
 8004a10:	008a      	lsls	r2, r1, #2
 8004a12:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004a16:	f7fb fde3 	bl	80005e0 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4b64      	ldr	r3, [pc, #400]	; (8004bb0 <UART_SetConfig+0x770>)
 8004a20:	fba3 2302 	umull	r2, r3, r3, r2
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	011c      	lsls	r4, r3, #4
 8004a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004a32:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004a36:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	1891      	adds	r1, r2, r2
 8004a40:	6439      	str	r1, [r7, #64]	; 0x40
 8004a42:	415b      	adcs	r3, r3
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
 8004a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	1851      	adds	r1, r2, r1
 8004a4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a50:	4649      	mov	r1, r9
 8004a52:	414b      	adcs	r3, r1
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004a62:	4659      	mov	r1, fp
 8004a64:	00cb      	lsls	r3, r1, #3
 8004a66:	4651      	mov	r1, sl
 8004a68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	00ca      	lsls	r2, r1, #3
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	4603      	mov	r3, r0
 8004a76:	4642      	mov	r2, r8
 8004a78:	189b      	adds	r3, r3, r2
 8004a7a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004a7e:	464b      	mov	r3, r9
 8004a80:	460a      	mov	r2, r1
 8004a82:	eb42 0303 	adc.w	r3, r2, r3
 8004a86:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004a8a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004a96:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	008b      	lsls	r3, r1, #2
 8004aaa:	4641      	mov	r1, r8
 8004aac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	008a      	lsls	r2, r1, #2
 8004ab4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004ab8:	f7fb fd92 	bl	80005e0 <__aeabi_uldivmod>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <UART_SetConfig+0x770>)
 8004ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2164      	movs	r1, #100	; 0x64
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	3332      	adds	r3, #50	; 0x32
 8004ad4:	4a36      	ldr	r2, [pc, #216]	; (8004bb0 <UART_SetConfig+0x770>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae0:	441c      	add	r4, r3
 8004ae2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004aec:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004af0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	1891      	adds	r1, r2, r2
 8004afa:	6339      	str	r1, [r7, #48]	; 0x30
 8004afc:	415b      	adcs	r3, r3
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
 8004b00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b04:	4641      	mov	r1, r8
 8004b06:	1851      	adds	r1, r2, r1
 8004b08:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	414b      	adcs	r3, r1
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	00cb      	lsls	r3, r1, #3
 8004b20:	4651      	mov	r1, sl
 8004b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b26:	4651      	mov	r1, sl
 8004b28:	00ca      	lsls	r2, r1, #3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4642      	mov	r2, r8
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b38:	464b      	mov	r3, r9
 8004b3a:	460a      	mov	r2, r1
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004b44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b50:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004b60:	4649      	mov	r1, r9
 8004b62:	008b      	lsls	r3, r1, #2
 8004b64:	4641      	mov	r1, r8
 8004b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	008a      	lsls	r2, r1, #2
 8004b6e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004b72:	f7fb fd35 	bl	80005e0 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <UART_SetConfig+0x770>)
 8004b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	2164      	movs	r1, #100	; 0x64
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	3332      	adds	r3, #50	; 0x32
 8004b8e:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <UART_SetConfig+0x770>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f003 020f 	and.w	r2, r3, #15
 8004b9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4422      	add	r2, r4
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	e112      	b.n	8004dcc <UART_SetConfig+0x98c>
 8004ba6:	bf00      	nop
 8004ba8:	40011000 	.word	0x40011000
 8004bac:	40011400 	.word	0x40011400
 8004bb0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7fe f8b6 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004bc6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004bca:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004bce:	4642      	mov	r2, r8
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	1891      	adds	r1, r2, r2
 8004bd4:	6239      	str	r1, [r7, #32]
 8004bd6:	415b      	adcs	r3, r3
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bde:	4641      	mov	r1, r8
 8004be0:	1854      	adds	r4, r2, r1
 8004be2:	4649      	mov	r1, r9
 8004be4:	eb43 0501 	adc.w	r5, r3, r1
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	00eb      	lsls	r3, r5, #3
 8004bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf6:	00e2      	lsls	r2, r4, #3
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	4643      	mov	r3, r8
 8004bfe:	18e3      	adds	r3, r4, r3
 8004c00:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c04:	464b      	mov	r3, r9
 8004c06:	eb45 0303 	adc.w	r3, r5, r3
 8004c0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004c0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c1a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	008b      	lsls	r3, r1, #2
 8004c2e:	4621      	mov	r1, r4
 8004c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c34:	4621      	mov	r1, r4
 8004c36:	008a      	lsls	r2, r1, #2
 8004c38:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004c3c:	f7fb fcd0 	bl	80005e0 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4b64      	ldr	r3, [pc, #400]	; (8004dd8 <UART_SetConfig+0x998>)
 8004c46:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	011c      	lsls	r4, r3, #4
 8004c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c58:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004c5c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	1891      	adds	r1, r2, r2
 8004c66:	61b9      	str	r1, [r7, #24]
 8004c68:	415b      	adcs	r3, r3
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c70:	4641      	mov	r1, r8
 8004c72:	1851      	adds	r1, r2, r1
 8004c74:	6139      	str	r1, [r7, #16]
 8004c76:	4649      	mov	r1, r9
 8004c78:	414b      	adcs	r3, r1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c88:	4659      	mov	r1, fp
 8004c8a:	00cb      	lsls	r3, r1, #3
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c92:	4651      	mov	r1, sl
 8004c94:	00ca      	lsls	r2, r1, #3
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	460a      	mov	r2, r1
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cbc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004ccc:	4649      	mov	r1, r9
 8004cce:	008b      	lsls	r3, r1, #2
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	008a      	lsls	r2, r1, #2
 8004cda:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004cde:	f7fb fc7f 	bl	80005e0 <__aeabi_uldivmod>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4b3c      	ldr	r3, [pc, #240]	; (8004dd8 <UART_SetConfig+0x998>)
 8004ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	2164      	movs	r1, #100	; 0x64
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	3332      	adds	r3, #50	; 0x32
 8004cfa:	4a37      	ldr	r2, [pc, #220]	; (8004dd8 <UART_SetConfig+0x998>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d06:	441c      	add	r4, r3
 8004d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d16:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	1891      	adds	r1, r2, r2
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	415b      	adcs	r3, r3
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	1851      	adds	r1, r2, r1
 8004d2e:	6039      	str	r1, [r7, #0]
 8004d30:	4649      	mov	r1, r9
 8004d32:	414b      	adcs	r3, r1
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d42:	4659      	mov	r1, fp
 8004d44:	00cb      	lsls	r3, r1, #3
 8004d46:	4651      	mov	r1, sl
 8004d48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	00ca      	lsls	r2, r1, #3
 8004d50:	4610      	mov	r0, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	4603      	mov	r3, r0
 8004d56:	4642      	mov	r2, r8
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d5e:	464b      	mov	r3, r9
 8004d60:	460a      	mov	r2, r1
 8004d62:	eb42 0303 	adc.w	r3, r2, r3
 8004d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004d86:	4649      	mov	r1, r9
 8004d88:	008b      	lsls	r3, r1, #2
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d90:	4641      	mov	r1, r8
 8004d92:	008a      	lsls	r2, r1, #2
 8004d94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d98:	f7fb fc22 	bl	80005e0 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <UART_SetConfig+0x998>)
 8004da2:	fba3 1302 	umull	r1, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2164      	movs	r1, #100	; 0x64
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	3332      	adds	r3, #50	; 0x32
 8004db4:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <UART_SetConfig+0x998>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	f003 020f 	and.w	r2, r3, #15
 8004dc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4422      	add	r2, r4
 8004dc8:	609a      	str	r2, [r3, #8]
}
 8004dca:	e7ff      	b.n	8004dcc <UART_SetConfig+0x98c>
 8004dcc:	bf00      	nop
 8004dce:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <__errno>:
 8004ddc:	4b01      	ldr	r3, [pc, #4]	; (8004de4 <__errno+0x8>)
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c

08004de8 <__libc_init_array>:
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	4d0d      	ldr	r5, [pc, #52]	; (8004e20 <__libc_init_array+0x38>)
 8004dec:	4c0d      	ldr	r4, [pc, #52]	; (8004e24 <__libc_init_array+0x3c>)
 8004dee:	1b64      	subs	r4, r4, r5
 8004df0:	10a4      	asrs	r4, r4, #2
 8004df2:	2600      	movs	r6, #0
 8004df4:	42a6      	cmp	r6, r4
 8004df6:	d109      	bne.n	8004e0c <__libc_init_array+0x24>
 8004df8:	4d0b      	ldr	r5, [pc, #44]	; (8004e28 <__libc_init_array+0x40>)
 8004dfa:	4c0c      	ldr	r4, [pc, #48]	; (8004e2c <__libc_init_array+0x44>)
 8004dfc:	f000 fd1e 	bl	800583c <_init>
 8004e00:	1b64      	subs	r4, r4, r5
 8004e02:	10a4      	asrs	r4, r4, #2
 8004e04:	2600      	movs	r6, #0
 8004e06:	42a6      	cmp	r6, r4
 8004e08:	d105      	bne.n	8004e16 <__libc_init_array+0x2e>
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e10:	4798      	blx	r3
 8004e12:	3601      	adds	r6, #1
 8004e14:	e7ee      	b.n	8004df4 <__libc_init_array+0xc>
 8004e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1a:	4798      	blx	r3
 8004e1c:	3601      	adds	r6, #1
 8004e1e:	e7f2      	b.n	8004e06 <__libc_init_array+0x1e>
 8004e20:	080058e4 	.word	0x080058e4
 8004e24:	080058e4 	.word	0x080058e4
 8004e28:	080058e4 	.word	0x080058e4
 8004e2c:	080058e8 	.word	0x080058e8

08004e30 <memset>:
 8004e30:	4402      	add	r2, r0
 8004e32:	4603      	mov	r3, r0
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d100      	bne.n	8004e3a <memset+0xa>
 8004e38:	4770      	bx	lr
 8004e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3e:	e7f9      	b.n	8004e34 <memset+0x4>

08004e40 <_puts_r>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	460e      	mov	r6, r1
 8004e44:	4605      	mov	r5, r0
 8004e46:	b118      	cbz	r0, 8004e50 <_puts_r+0x10>
 8004e48:	6983      	ldr	r3, [r0, #24]
 8004e4a:	b90b      	cbnz	r3, 8004e50 <_puts_r+0x10>
 8004e4c:	f000 fa48 	bl	80052e0 <__sinit>
 8004e50:	69ab      	ldr	r3, [r5, #24]
 8004e52:	68ac      	ldr	r4, [r5, #8]
 8004e54:	b913      	cbnz	r3, 8004e5c <_puts_r+0x1c>
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 fa42 	bl	80052e0 <__sinit>
 8004e5c:	4b2c      	ldr	r3, [pc, #176]	; (8004f10 <_puts_r+0xd0>)
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d120      	bne.n	8004ea4 <_puts_r+0x64>
 8004e62:	686c      	ldr	r4, [r5, #4]
 8004e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e66:	07db      	lsls	r3, r3, #31
 8004e68:	d405      	bmi.n	8004e76 <_puts_r+0x36>
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	0598      	lsls	r0, r3, #22
 8004e6e:	d402      	bmi.n	8004e76 <_puts_r+0x36>
 8004e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e72:	f000 fad3 	bl	800541c <__retarget_lock_acquire_recursive>
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	0719      	lsls	r1, r3, #28
 8004e7a:	d51d      	bpl.n	8004eb8 <_puts_r+0x78>
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	b1db      	cbz	r3, 8004eb8 <_puts_r+0x78>
 8004e80:	3e01      	subs	r6, #1
 8004e82:	68a3      	ldr	r3, [r4, #8]
 8004e84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	60a3      	str	r3, [r4, #8]
 8004e8c:	bb39      	cbnz	r1, 8004ede <_puts_r+0x9e>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	da38      	bge.n	8004f04 <_puts_r+0xc4>
 8004e92:	4622      	mov	r2, r4
 8004e94:	210a      	movs	r1, #10
 8004e96:	4628      	mov	r0, r5
 8004e98:	f000 f848 	bl	8004f2c <__swbuf_r>
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d011      	beq.n	8004ec4 <_puts_r+0x84>
 8004ea0:	250a      	movs	r5, #10
 8004ea2:	e011      	b.n	8004ec8 <_puts_r+0x88>
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <_puts_r+0xd4>)
 8004ea6:	429c      	cmp	r4, r3
 8004ea8:	d101      	bne.n	8004eae <_puts_r+0x6e>
 8004eaa:	68ac      	ldr	r4, [r5, #8]
 8004eac:	e7da      	b.n	8004e64 <_puts_r+0x24>
 8004eae:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <_puts_r+0xd8>)
 8004eb0:	429c      	cmp	r4, r3
 8004eb2:	bf08      	it	eq
 8004eb4:	68ec      	ldreq	r4, [r5, #12]
 8004eb6:	e7d5      	b.n	8004e64 <_puts_r+0x24>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 f888 	bl	8004fd0 <__swsetup_r>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d0dd      	beq.n	8004e80 <_puts_r+0x40>
 8004ec4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eca:	07da      	lsls	r2, r3, #31
 8004ecc:	d405      	bmi.n	8004eda <_puts_r+0x9a>
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	059b      	lsls	r3, r3, #22
 8004ed2:	d402      	bmi.n	8004eda <_puts_r+0x9a>
 8004ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ed6:	f000 faa2 	bl	800541e <__retarget_lock_release_recursive>
 8004eda:	4628      	mov	r0, r5
 8004edc:	bd70      	pop	{r4, r5, r6, pc}
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da04      	bge.n	8004eec <_puts_r+0xac>
 8004ee2:	69a2      	ldr	r2, [r4, #24]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	dc06      	bgt.n	8004ef6 <_puts_r+0xb6>
 8004ee8:	290a      	cmp	r1, #10
 8004eea:	d004      	beq.n	8004ef6 <_puts_r+0xb6>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	6022      	str	r2, [r4, #0]
 8004ef2:	7019      	strb	r1, [r3, #0]
 8004ef4:	e7c5      	b.n	8004e82 <_puts_r+0x42>
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f000 f817 	bl	8004f2c <__swbuf_r>
 8004efe:	3001      	adds	r0, #1
 8004f00:	d1bf      	bne.n	8004e82 <_puts_r+0x42>
 8004f02:	e7df      	b.n	8004ec4 <_puts_r+0x84>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	250a      	movs	r5, #10
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	6022      	str	r2, [r4, #0]
 8004f0c:	701d      	strb	r5, [r3, #0]
 8004f0e:	e7db      	b.n	8004ec8 <_puts_r+0x88>
 8004f10:	0800589c 	.word	0x0800589c
 8004f14:	080058bc 	.word	0x080058bc
 8004f18:	0800587c 	.word	0x0800587c

08004f1c <puts>:
 8004f1c:	4b02      	ldr	r3, [pc, #8]	; (8004f28 <puts+0xc>)
 8004f1e:	4601      	mov	r1, r0
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	f7ff bf8d 	b.w	8004e40 <_puts_r>
 8004f26:	bf00      	nop
 8004f28:	2000000c 	.word	0x2000000c

08004f2c <__swbuf_r>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	460e      	mov	r6, r1
 8004f30:	4614      	mov	r4, r2
 8004f32:	4605      	mov	r5, r0
 8004f34:	b118      	cbz	r0, 8004f3e <__swbuf_r+0x12>
 8004f36:	6983      	ldr	r3, [r0, #24]
 8004f38:	b90b      	cbnz	r3, 8004f3e <__swbuf_r+0x12>
 8004f3a:	f000 f9d1 	bl	80052e0 <__sinit>
 8004f3e:	4b21      	ldr	r3, [pc, #132]	; (8004fc4 <__swbuf_r+0x98>)
 8004f40:	429c      	cmp	r4, r3
 8004f42:	d12b      	bne.n	8004f9c <__swbuf_r+0x70>
 8004f44:	686c      	ldr	r4, [r5, #4]
 8004f46:	69a3      	ldr	r3, [r4, #24]
 8004f48:	60a3      	str	r3, [r4, #8]
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	071a      	lsls	r2, r3, #28
 8004f4e:	d52f      	bpl.n	8004fb0 <__swbuf_r+0x84>
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	b36b      	cbz	r3, 8004fb0 <__swbuf_r+0x84>
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	1ac0      	subs	r0, r0, r3
 8004f5a:	6963      	ldr	r3, [r4, #20]
 8004f5c:	b2f6      	uxtb	r6, r6
 8004f5e:	4283      	cmp	r3, r0
 8004f60:	4637      	mov	r7, r6
 8004f62:	dc04      	bgt.n	8004f6e <__swbuf_r+0x42>
 8004f64:	4621      	mov	r1, r4
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 f926 	bl	80051b8 <_fflush_r>
 8004f6c:	bb30      	cbnz	r0, 8004fbc <__swbuf_r+0x90>
 8004f6e:	68a3      	ldr	r3, [r4, #8]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	60a3      	str	r3, [r4, #8]
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	6022      	str	r2, [r4, #0]
 8004f7a:	701e      	strb	r6, [r3, #0]
 8004f7c:	6963      	ldr	r3, [r4, #20]
 8004f7e:	3001      	adds	r0, #1
 8004f80:	4283      	cmp	r3, r0
 8004f82:	d004      	beq.n	8004f8e <__swbuf_r+0x62>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	07db      	lsls	r3, r3, #31
 8004f88:	d506      	bpl.n	8004f98 <__swbuf_r+0x6c>
 8004f8a:	2e0a      	cmp	r6, #10
 8004f8c:	d104      	bne.n	8004f98 <__swbuf_r+0x6c>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f911 	bl	80051b8 <_fflush_r>
 8004f96:	b988      	cbnz	r0, 8004fbc <__swbuf_r+0x90>
 8004f98:	4638      	mov	r0, r7
 8004f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <__swbuf_r+0x9c>)
 8004f9e:	429c      	cmp	r4, r3
 8004fa0:	d101      	bne.n	8004fa6 <__swbuf_r+0x7a>
 8004fa2:	68ac      	ldr	r4, [r5, #8]
 8004fa4:	e7cf      	b.n	8004f46 <__swbuf_r+0x1a>
 8004fa6:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <__swbuf_r+0xa0>)
 8004fa8:	429c      	cmp	r4, r3
 8004faa:	bf08      	it	eq
 8004fac:	68ec      	ldreq	r4, [r5, #12]
 8004fae:	e7ca      	b.n	8004f46 <__swbuf_r+0x1a>
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 f80c 	bl	8004fd0 <__swsetup_r>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d0cb      	beq.n	8004f54 <__swbuf_r+0x28>
 8004fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8004fc0:	e7ea      	b.n	8004f98 <__swbuf_r+0x6c>
 8004fc2:	bf00      	nop
 8004fc4:	0800589c 	.word	0x0800589c
 8004fc8:	080058bc 	.word	0x080058bc
 8004fcc:	0800587c 	.word	0x0800587c

08004fd0 <__swsetup_r>:
 8004fd0:	4b32      	ldr	r3, [pc, #200]	; (800509c <__swsetup_r+0xcc>)
 8004fd2:	b570      	push	{r4, r5, r6, lr}
 8004fd4:	681d      	ldr	r5, [r3, #0]
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	460c      	mov	r4, r1
 8004fda:	b125      	cbz	r5, 8004fe6 <__swsetup_r+0x16>
 8004fdc:	69ab      	ldr	r3, [r5, #24]
 8004fde:	b913      	cbnz	r3, 8004fe6 <__swsetup_r+0x16>
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f97d 	bl	80052e0 <__sinit>
 8004fe6:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <__swsetup_r+0xd0>)
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	d10f      	bne.n	800500c <__swsetup_r+0x3c>
 8004fec:	686c      	ldr	r4, [r5, #4]
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ff4:	0719      	lsls	r1, r3, #28
 8004ff6:	d42c      	bmi.n	8005052 <__swsetup_r+0x82>
 8004ff8:	06dd      	lsls	r5, r3, #27
 8004ffa:	d411      	bmi.n	8005020 <__swsetup_r+0x50>
 8004ffc:	2309      	movs	r3, #9
 8004ffe:	6033      	str	r3, [r6, #0]
 8005000:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005004:	81a3      	strh	r3, [r4, #12]
 8005006:	f04f 30ff 	mov.w	r0, #4294967295
 800500a:	e03e      	b.n	800508a <__swsetup_r+0xba>
 800500c:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <__swsetup_r+0xd4>)
 800500e:	429c      	cmp	r4, r3
 8005010:	d101      	bne.n	8005016 <__swsetup_r+0x46>
 8005012:	68ac      	ldr	r4, [r5, #8]
 8005014:	e7eb      	b.n	8004fee <__swsetup_r+0x1e>
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <__swsetup_r+0xd8>)
 8005018:	429c      	cmp	r4, r3
 800501a:	bf08      	it	eq
 800501c:	68ec      	ldreq	r4, [r5, #12]
 800501e:	e7e6      	b.n	8004fee <__swsetup_r+0x1e>
 8005020:	0758      	lsls	r0, r3, #29
 8005022:	d512      	bpl.n	800504a <__swsetup_r+0x7a>
 8005024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005026:	b141      	cbz	r1, 800503a <__swsetup_r+0x6a>
 8005028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800502c:	4299      	cmp	r1, r3
 800502e:	d002      	beq.n	8005036 <__swsetup_r+0x66>
 8005030:	4630      	mov	r0, r6
 8005032:	f000 fa5b 	bl	80054ec <_free_r>
 8005036:	2300      	movs	r3, #0
 8005038:	6363      	str	r3, [r4, #52]	; 0x34
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	2300      	movs	r3, #0
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	f043 0308 	orr.w	r3, r3, #8
 8005050:	81a3      	strh	r3, [r4, #12]
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	b94b      	cbnz	r3, 800506a <__swsetup_r+0x9a>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800505c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005060:	d003      	beq.n	800506a <__swsetup_r+0x9a>
 8005062:	4621      	mov	r1, r4
 8005064:	4630      	mov	r0, r6
 8005066:	f000 fa01 	bl	800546c <__smakebuf_r>
 800506a:	89a0      	ldrh	r0, [r4, #12]
 800506c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005070:	f010 0301 	ands.w	r3, r0, #1
 8005074:	d00a      	beq.n	800508c <__swsetup_r+0xbc>
 8005076:	2300      	movs	r3, #0
 8005078:	60a3      	str	r3, [r4, #8]
 800507a:	6963      	ldr	r3, [r4, #20]
 800507c:	425b      	negs	r3, r3
 800507e:	61a3      	str	r3, [r4, #24]
 8005080:	6923      	ldr	r3, [r4, #16]
 8005082:	b943      	cbnz	r3, 8005096 <__swsetup_r+0xc6>
 8005084:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005088:	d1ba      	bne.n	8005000 <__swsetup_r+0x30>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	0781      	lsls	r1, r0, #30
 800508e:	bf58      	it	pl
 8005090:	6963      	ldrpl	r3, [r4, #20]
 8005092:	60a3      	str	r3, [r4, #8]
 8005094:	e7f4      	b.n	8005080 <__swsetup_r+0xb0>
 8005096:	2000      	movs	r0, #0
 8005098:	e7f7      	b.n	800508a <__swsetup_r+0xba>
 800509a:	bf00      	nop
 800509c:	2000000c 	.word	0x2000000c
 80050a0:	0800589c 	.word	0x0800589c
 80050a4:	080058bc 	.word	0x080058bc
 80050a8:	0800587c 	.word	0x0800587c

080050ac <__sflush_r>:
 80050ac:	898a      	ldrh	r2, [r1, #12]
 80050ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b2:	4605      	mov	r5, r0
 80050b4:	0710      	lsls	r0, r2, #28
 80050b6:	460c      	mov	r4, r1
 80050b8:	d458      	bmi.n	800516c <__sflush_r+0xc0>
 80050ba:	684b      	ldr	r3, [r1, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dc05      	bgt.n	80050cc <__sflush_r+0x20>
 80050c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dc02      	bgt.n	80050cc <__sflush_r+0x20>
 80050c6:	2000      	movs	r0, #0
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	d0f9      	beq.n	80050c6 <__sflush_r+0x1a>
 80050d2:	2300      	movs	r3, #0
 80050d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050d8:	682f      	ldr	r7, [r5, #0]
 80050da:	602b      	str	r3, [r5, #0]
 80050dc:	d032      	beq.n	8005144 <__sflush_r+0x98>
 80050de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	075a      	lsls	r2, r3, #29
 80050e4:	d505      	bpl.n	80050f2 <__sflush_r+0x46>
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	1ac0      	subs	r0, r0, r3
 80050ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050ec:	b10b      	cbz	r3, 80050f2 <__sflush_r+0x46>
 80050ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050f0:	1ac0      	subs	r0, r0, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	4602      	mov	r2, r0
 80050f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050f8:	6a21      	ldr	r1, [r4, #32]
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b0      	blx	r6
 80050fe:	1c43      	adds	r3, r0, #1
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	d106      	bne.n	8005112 <__sflush_r+0x66>
 8005104:	6829      	ldr	r1, [r5, #0]
 8005106:	291d      	cmp	r1, #29
 8005108:	d82c      	bhi.n	8005164 <__sflush_r+0xb8>
 800510a:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <__sflush_r+0x108>)
 800510c:	40ca      	lsrs	r2, r1
 800510e:	07d6      	lsls	r6, r2, #31
 8005110:	d528      	bpl.n	8005164 <__sflush_r+0xb8>
 8005112:	2200      	movs	r2, #0
 8005114:	6062      	str	r2, [r4, #4]
 8005116:	04d9      	lsls	r1, r3, #19
 8005118:	6922      	ldr	r2, [r4, #16]
 800511a:	6022      	str	r2, [r4, #0]
 800511c:	d504      	bpl.n	8005128 <__sflush_r+0x7c>
 800511e:	1c42      	adds	r2, r0, #1
 8005120:	d101      	bne.n	8005126 <__sflush_r+0x7a>
 8005122:	682b      	ldr	r3, [r5, #0]
 8005124:	b903      	cbnz	r3, 8005128 <__sflush_r+0x7c>
 8005126:	6560      	str	r0, [r4, #84]	; 0x54
 8005128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800512a:	602f      	str	r7, [r5, #0]
 800512c:	2900      	cmp	r1, #0
 800512e:	d0ca      	beq.n	80050c6 <__sflush_r+0x1a>
 8005130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005134:	4299      	cmp	r1, r3
 8005136:	d002      	beq.n	800513e <__sflush_r+0x92>
 8005138:	4628      	mov	r0, r5
 800513a:	f000 f9d7 	bl	80054ec <_free_r>
 800513e:	2000      	movs	r0, #0
 8005140:	6360      	str	r0, [r4, #52]	; 0x34
 8005142:	e7c1      	b.n	80050c8 <__sflush_r+0x1c>
 8005144:	6a21      	ldr	r1, [r4, #32]
 8005146:	2301      	movs	r3, #1
 8005148:	4628      	mov	r0, r5
 800514a:	47b0      	blx	r6
 800514c:	1c41      	adds	r1, r0, #1
 800514e:	d1c7      	bne.n	80050e0 <__sflush_r+0x34>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0c4      	beq.n	80050e0 <__sflush_r+0x34>
 8005156:	2b1d      	cmp	r3, #29
 8005158:	d001      	beq.n	800515e <__sflush_r+0xb2>
 800515a:	2b16      	cmp	r3, #22
 800515c:	d101      	bne.n	8005162 <__sflush_r+0xb6>
 800515e:	602f      	str	r7, [r5, #0]
 8005160:	e7b1      	b.n	80050c6 <__sflush_r+0x1a>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005168:	81a3      	strh	r3, [r4, #12]
 800516a:	e7ad      	b.n	80050c8 <__sflush_r+0x1c>
 800516c:	690f      	ldr	r7, [r1, #16]
 800516e:	2f00      	cmp	r7, #0
 8005170:	d0a9      	beq.n	80050c6 <__sflush_r+0x1a>
 8005172:	0793      	lsls	r3, r2, #30
 8005174:	680e      	ldr	r6, [r1, #0]
 8005176:	bf08      	it	eq
 8005178:	694b      	ldreq	r3, [r1, #20]
 800517a:	600f      	str	r7, [r1, #0]
 800517c:	bf18      	it	ne
 800517e:	2300      	movne	r3, #0
 8005180:	eba6 0807 	sub.w	r8, r6, r7
 8005184:	608b      	str	r3, [r1, #8]
 8005186:	f1b8 0f00 	cmp.w	r8, #0
 800518a:	dd9c      	ble.n	80050c6 <__sflush_r+0x1a>
 800518c:	6a21      	ldr	r1, [r4, #32]
 800518e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005190:	4643      	mov	r3, r8
 8005192:	463a      	mov	r2, r7
 8005194:	4628      	mov	r0, r5
 8005196:	47b0      	blx	r6
 8005198:	2800      	cmp	r0, #0
 800519a:	dc06      	bgt.n	80051aa <__sflush_r+0xfe>
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	e78e      	b.n	80050c8 <__sflush_r+0x1c>
 80051aa:	4407      	add	r7, r0
 80051ac:	eba8 0800 	sub.w	r8, r8, r0
 80051b0:	e7e9      	b.n	8005186 <__sflush_r+0xda>
 80051b2:	bf00      	nop
 80051b4:	20400001 	.word	0x20400001

080051b8 <_fflush_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	690b      	ldr	r3, [r1, #16]
 80051bc:	4605      	mov	r5, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	b913      	cbnz	r3, 80051c8 <_fflush_r+0x10>
 80051c2:	2500      	movs	r5, #0
 80051c4:	4628      	mov	r0, r5
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	b118      	cbz	r0, 80051d2 <_fflush_r+0x1a>
 80051ca:	6983      	ldr	r3, [r0, #24]
 80051cc:	b90b      	cbnz	r3, 80051d2 <_fflush_r+0x1a>
 80051ce:	f000 f887 	bl	80052e0 <__sinit>
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <_fflush_r+0x6c>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	d11b      	bne.n	8005210 <_fflush_r+0x58>
 80051d8:	686c      	ldr	r4, [r5, #4]
 80051da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0ef      	beq.n	80051c2 <_fflush_r+0xa>
 80051e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051e4:	07d0      	lsls	r0, r2, #31
 80051e6:	d404      	bmi.n	80051f2 <_fflush_r+0x3a>
 80051e8:	0599      	lsls	r1, r3, #22
 80051ea:	d402      	bmi.n	80051f2 <_fflush_r+0x3a>
 80051ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ee:	f000 f915 	bl	800541c <__retarget_lock_acquire_recursive>
 80051f2:	4628      	mov	r0, r5
 80051f4:	4621      	mov	r1, r4
 80051f6:	f7ff ff59 	bl	80050ac <__sflush_r>
 80051fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051fc:	07da      	lsls	r2, r3, #31
 80051fe:	4605      	mov	r5, r0
 8005200:	d4e0      	bmi.n	80051c4 <_fflush_r+0xc>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	059b      	lsls	r3, r3, #22
 8005206:	d4dd      	bmi.n	80051c4 <_fflush_r+0xc>
 8005208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800520a:	f000 f908 	bl	800541e <__retarget_lock_release_recursive>
 800520e:	e7d9      	b.n	80051c4 <_fflush_r+0xc>
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <_fflush_r+0x70>)
 8005212:	429c      	cmp	r4, r3
 8005214:	d101      	bne.n	800521a <_fflush_r+0x62>
 8005216:	68ac      	ldr	r4, [r5, #8]
 8005218:	e7df      	b.n	80051da <_fflush_r+0x22>
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <_fflush_r+0x74>)
 800521c:	429c      	cmp	r4, r3
 800521e:	bf08      	it	eq
 8005220:	68ec      	ldreq	r4, [r5, #12]
 8005222:	e7da      	b.n	80051da <_fflush_r+0x22>
 8005224:	0800589c 	.word	0x0800589c
 8005228:	080058bc 	.word	0x080058bc
 800522c:	0800587c 	.word	0x0800587c

08005230 <std>:
 8005230:	2300      	movs	r3, #0
 8005232:	b510      	push	{r4, lr}
 8005234:	4604      	mov	r4, r0
 8005236:	e9c0 3300 	strd	r3, r3, [r0]
 800523a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800523e:	6083      	str	r3, [r0, #8]
 8005240:	8181      	strh	r1, [r0, #12]
 8005242:	6643      	str	r3, [r0, #100]	; 0x64
 8005244:	81c2      	strh	r2, [r0, #14]
 8005246:	6183      	str	r3, [r0, #24]
 8005248:	4619      	mov	r1, r3
 800524a:	2208      	movs	r2, #8
 800524c:	305c      	adds	r0, #92	; 0x5c
 800524e:	f7ff fdef 	bl	8004e30 <memset>
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <std+0x38>)
 8005254:	6263      	str	r3, [r4, #36]	; 0x24
 8005256:	4b05      	ldr	r3, [pc, #20]	; (800526c <std+0x3c>)
 8005258:	62a3      	str	r3, [r4, #40]	; 0x28
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <std+0x40>)
 800525c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <std+0x44>)
 8005260:	6224      	str	r4, [r4, #32]
 8005262:	6323      	str	r3, [r4, #48]	; 0x30
 8005264:	bd10      	pop	{r4, pc}
 8005266:	bf00      	nop
 8005268:	080056cd 	.word	0x080056cd
 800526c:	080056ef 	.word	0x080056ef
 8005270:	08005727 	.word	0x08005727
 8005274:	0800574b 	.word	0x0800574b

08005278 <_cleanup_r>:
 8005278:	4901      	ldr	r1, [pc, #4]	; (8005280 <_cleanup_r+0x8>)
 800527a:	f000 b8af 	b.w	80053dc <_fwalk_reent>
 800527e:	bf00      	nop
 8005280:	080051b9 	.word	0x080051b9

08005284 <__sfmoreglue>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	2268      	movs	r2, #104	; 0x68
 8005288:	1e4d      	subs	r5, r1, #1
 800528a:	4355      	muls	r5, r2
 800528c:	460e      	mov	r6, r1
 800528e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005292:	f000 f997 	bl	80055c4 <_malloc_r>
 8005296:	4604      	mov	r4, r0
 8005298:	b140      	cbz	r0, 80052ac <__sfmoreglue+0x28>
 800529a:	2100      	movs	r1, #0
 800529c:	e9c0 1600 	strd	r1, r6, [r0]
 80052a0:	300c      	adds	r0, #12
 80052a2:	60a0      	str	r0, [r4, #8]
 80052a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052a8:	f7ff fdc2 	bl	8004e30 <memset>
 80052ac:	4620      	mov	r0, r4
 80052ae:	bd70      	pop	{r4, r5, r6, pc}

080052b0 <__sfp_lock_acquire>:
 80052b0:	4801      	ldr	r0, [pc, #4]	; (80052b8 <__sfp_lock_acquire+0x8>)
 80052b2:	f000 b8b3 	b.w	800541c <__retarget_lock_acquire_recursive>
 80052b6:	bf00      	nop
 80052b8:	200132c1 	.word	0x200132c1

080052bc <__sfp_lock_release>:
 80052bc:	4801      	ldr	r0, [pc, #4]	; (80052c4 <__sfp_lock_release+0x8>)
 80052be:	f000 b8ae 	b.w	800541e <__retarget_lock_release_recursive>
 80052c2:	bf00      	nop
 80052c4:	200132c1 	.word	0x200132c1

080052c8 <__sinit_lock_acquire>:
 80052c8:	4801      	ldr	r0, [pc, #4]	; (80052d0 <__sinit_lock_acquire+0x8>)
 80052ca:	f000 b8a7 	b.w	800541c <__retarget_lock_acquire_recursive>
 80052ce:	bf00      	nop
 80052d0:	200132c2 	.word	0x200132c2

080052d4 <__sinit_lock_release>:
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <__sinit_lock_release+0x8>)
 80052d6:	f000 b8a2 	b.w	800541e <__retarget_lock_release_recursive>
 80052da:	bf00      	nop
 80052dc:	200132c2 	.word	0x200132c2

080052e0 <__sinit>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fff0 	bl	80052c8 <__sinit_lock_acquire>
 80052e8:	69a3      	ldr	r3, [r4, #24]
 80052ea:	b11b      	cbz	r3, 80052f4 <__sinit+0x14>
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f0:	f7ff bff0 	b.w	80052d4 <__sinit_lock_release>
 80052f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052f8:	6523      	str	r3, [r4, #80]	; 0x50
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <__sinit+0x68>)
 80052fc:	4a13      	ldr	r2, [pc, #76]	; (800534c <__sinit+0x6c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	62a2      	str	r2, [r4, #40]	; 0x28
 8005302:	42a3      	cmp	r3, r4
 8005304:	bf04      	itt	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	61a3      	streq	r3, [r4, #24]
 800530a:	4620      	mov	r0, r4
 800530c:	f000 f820 	bl	8005350 <__sfp>
 8005310:	6060      	str	r0, [r4, #4]
 8005312:	4620      	mov	r0, r4
 8005314:	f000 f81c 	bl	8005350 <__sfp>
 8005318:	60a0      	str	r0, [r4, #8]
 800531a:	4620      	mov	r0, r4
 800531c:	f000 f818 	bl	8005350 <__sfp>
 8005320:	2200      	movs	r2, #0
 8005322:	60e0      	str	r0, [r4, #12]
 8005324:	2104      	movs	r1, #4
 8005326:	6860      	ldr	r0, [r4, #4]
 8005328:	f7ff ff82 	bl	8005230 <std>
 800532c:	68a0      	ldr	r0, [r4, #8]
 800532e:	2201      	movs	r2, #1
 8005330:	2109      	movs	r1, #9
 8005332:	f7ff ff7d 	bl	8005230 <std>
 8005336:	68e0      	ldr	r0, [r4, #12]
 8005338:	2202      	movs	r2, #2
 800533a:	2112      	movs	r1, #18
 800533c:	f7ff ff78 	bl	8005230 <std>
 8005340:	2301      	movs	r3, #1
 8005342:	61a3      	str	r3, [r4, #24]
 8005344:	e7d2      	b.n	80052ec <__sinit+0xc>
 8005346:	bf00      	nop
 8005348:	08005878 	.word	0x08005878
 800534c:	08005279 	.word	0x08005279

08005350 <__sfp>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	4607      	mov	r7, r0
 8005354:	f7ff ffac 	bl	80052b0 <__sfp_lock_acquire>
 8005358:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <__sfp+0x84>)
 800535a:	681e      	ldr	r6, [r3, #0]
 800535c:	69b3      	ldr	r3, [r6, #24]
 800535e:	b913      	cbnz	r3, 8005366 <__sfp+0x16>
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff ffbd 	bl	80052e0 <__sinit>
 8005366:	3648      	adds	r6, #72	; 0x48
 8005368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800536c:	3b01      	subs	r3, #1
 800536e:	d503      	bpl.n	8005378 <__sfp+0x28>
 8005370:	6833      	ldr	r3, [r6, #0]
 8005372:	b30b      	cbz	r3, 80053b8 <__sfp+0x68>
 8005374:	6836      	ldr	r6, [r6, #0]
 8005376:	e7f7      	b.n	8005368 <__sfp+0x18>
 8005378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800537c:	b9d5      	cbnz	r5, 80053b4 <__sfp+0x64>
 800537e:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <__sfp+0x88>)
 8005380:	60e3      	str	r3, [r4, #12]
 8005382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005386:	6665      	str	r5, [r4, #100]	; 0x64
 8005388:	f000 f847 	bl	800541a <__retarget_lock_init_recursive>
 800538c:	f7ff ff96 	bl	80052bc <__sfp_lock_release>
 8005390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005398:	6025      	str	r5, [r4, #0]
 800539a:	61a5      	str	r5, [r4, #24]
 800539c:	2208      	movs	r2, #8
 800539e:	4629      	mov	r1, r5
 80053a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053a4:	f7ff fd44 	bl	8004e30 <memset>
 80053a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053b0:	4620      	mov	r0, r4
 80053b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b4:	3468      	adds	r4, #104	; 0x68
 80053b6:	e7d9      	b.n	800536c <__sfp+0x1c>
 80053b8:	2104      	movs	r1, #4
 80053ba:	4638      	mov	r0, r7
 80053bc:	f7ff ff62 	bl	8005284 <__sfmoreglue>
 80053c0:	4604      	mov	r4, r0
 80053c2:	6030      	str	r0, [r6, #0]
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d1d5      	bne.n	8005374 <__sfp+0x24>
 80053c8:	f7ff ff78 	bl	80052bc <__sfp_lock_release>
 80053cc:	230c      	movs	r3, #12
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	e7ee      	b.n	80053b0 <__sfp+0x60>
 80053d2:	bf00      	nop
 80053d4:	08005878 	.word	0x08005878
 80053d8:	ffff0001 	.word	0xffff0001

080053dc <_fwalk_reent>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4606      	mov	r6, r0
 80053e2:	4688      	mov	r8, r1
 80053e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053e8:	2700      	movs	r7, #0
 80053ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ee:	f1b9 0901 	subs.w	r9, r9, #1
 80053f2:	d505      	bpl.n	8005400 <_fwalk_reent+0x24>
 80053f4:	6824      	ldr	r4, [r4, #0]
 80053f6:	2c00      	cmp	r4, #0
 80053f8:	d1f7      	bne.n	80053ea <_fwalk_reent+0xe>
 80053fa:	4638      	mov	r0, r7
 80053fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005400:	89ab      	ldrh	r3, [r5, #12]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d907      	bls.n	8005416 <_fwalk_reent+0x3a>
 8005406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800540a:	3301      	adds	r3, #1
 800540c:	d003      	beq.n	8005416 <_fwalk_reent+0x3a>
 800540e:	4629      	mov	r1, r5
 8005410:	4630      	mov	r0, r6
 8005412:	47c0      	blx	r8
 8005414:	4307      	orrs	r7, r0
 8005416:	3568      	adds	r5, #104	; 0x68
 8005418:	e7e9      	b.n	80053ee <_fwalk_reent+0x12>

0800541a <__retarget_lock_init_recursive>:
 800541a:	4770      	bx	lr

0800541c <__retarget_lock_acquire_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_release_recursive>:
 800541e:	4770      	bx	lr

08005420 <__swhatbuf_r>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	460e      	mov	r6, r1
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	2900      	cmp	r1, #0
 800542a:	b096      	sub	sp, #88	; 0x58
 800542c:	4614      	mov	r4, r2
 800542e:	461d      	mov	r5, r3
 8005430:	da08      	bge.n	8005444 <__swhatbuf_r+0x24>
 8005432:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	602a      	str	r2, [r5, #0]
 800543a:	061a      	lsls	r2, r3, #24
 800543c:	d410      	bmi.n	8005460 <__swhatbuf_r+0x40>
 800543e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005442:	e00e      	b.n	8005462 <__swhatbuf_r+0x42>
 8005444:	466a      	mov	r2, sp
 8005446:	f000 f9a7 	bl	8005798 <_fstat_r>
 800544a:	2800      	cmp	r0, #0
 800544c:	dbf1      	blt.n	8005432 <__swhatbuf_r+0x12>
 800544e:	9a01      	ldr	r2, [sp, #4]
 8005450:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005454:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005458:	425a      	negs	r2, r3
 800545a:	415a      	adcs	r2, r3
 800545c:	602a      	str	r2, [r5, #0]
 800545e:	e7ee      	b.n	800543e <__swhatbuf_r+0x1e>
 8005460:	2340      	movs	r3, #64	; 0x40
 8005462:	2000      	movs	r0, #0
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	b016      	add	sp, #88	; 0x58
 8005468:	bd70      	pop	{r4, r5, r6, pc}
	...

0800546c <__smakebuf_r>:
 800546c:	898b      	ldrh	r3, [r1, #12]
 800546e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005470:	079d      	lsls	r5, r3, #30
 8005472:	4606      	mov	r6, r0
 8005474:	460c      	mov	r4, r1
 8005476:	d507      	bpl.n	8005488 <__smakebuf_r+0x1c>
 8005478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	2301      	movs	r3, #1
 8005482:	6163      	str	r3, [r4, #20]
 8005484:	b002      	add	sp, #8
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	ab01      	add	r3, sp, #4
 800548a:	466a      	mov	r2, sp
 800548c:	f7ff ffc8 	bl	8005420 <__swhatbuf_r>
 8005490:	9900      	ldr	r1, [sp, #0]
 8005492:	4605      	mov	r5, r0
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f895 	bl	80055c4 <_malloc_r>
 800549a:	b948      	cbnz	r0, 80054b0 <__smakebuf_r+0x44>
 800549c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a0:	059a      	lsls	r2, r3, #22
 80054a2:	d4ef      	bmi.n	8005484 <__smakebuf_r+0x18>
 80054a4:	f023 0303 	bic.w	r3, r3, #3
 80054a8:	f043 0302 	orr.w	r3, r3, #2
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	e7e3      	b.n	8005478 <__smakebuf_r+0xc>
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <__smakebuf_r+0x7c>)
 80054b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	6020      	str	r0, [r4, #0]
 80054b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054bc:	81a3      	strh	r3, [r4, #12]
 80054be:	9b00      	ldr	r3, [sp, #0]
 80054c0:	6163      	str	r3, [r4, #20]
 80054c2:	9b01      	ldr	r3, [sp, #4]
 80054c4:	6120      	str	r0, [r4, #16]
 80054c6:	b15b      	cbz	r3, 80054e0 <__smakebuf_r+0x74>
 80054c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054cc:	4630      	mov	r0, r6
 80054ce:	f000 f975 	bl	80057bc <_isatty_r>
 80054d2:	b128      	cbz	r0, 80054e0 <__smakebuf_r+0x74>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	89a0      	ldrh	r0, [r4, #12]
 80054e2:	4305      	orrs	r5, r0
 80054e4:	81a5      	strh	r5, [r4, #12]
 80054e6:	e7cd      	b.n	8005484 <__smakebuf_r+0x18>
 80054e8:	08005279 	.word	0x08005279

080054ec <_free_r>:
 80054ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d044      	beq.n	800557c <_free_r+0x90>
 80054f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f6:	9001      	str	r0, [sp, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f1a1 0404 	sub.w	r4, r1, #4
 80054fe:	bfb8      	it	lt
 8005500:	18e4      	addlt	r4, r4, r3
 8005502:	f000 f97d 	bl	8005800 <__malloc_lock>
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <_free_r+0x94>)
 8005508:	9801      	ldr	r0, [sp, #4]
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	b933      	cbnz	r3, 800551c <_free_r+0x30>
 800550e:	6063      	str	r3, [r4, #4]
 8005510:	6014      	str	r4, [r2, #0]
 8005512:	b003      	add	sp, #12
 8005514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005518:	f000 b978 	b.w	800580c <__malloc_unlock>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d908      	bls.n	8005532 <_free_r+0x46>
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	1961      	adds	r1, r4, r5
 8005524:	428b      	cmp	r3, r1
 8005526:	bf01      	itttt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	1949      	addeq	r1, r1, r5
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	e7ed      	b.n	800550e <_free_r+0x22>
 8005532:	461a      	mov	r2, r3
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b10b      	cbz	r3, 800553c <_free_r+0x50>
 8005538:	42a3      	cmp	r3, r4
 800553a:	d9fa      	bls.n	8005532 <_free_r+0x46>
 800553c:	6811      	ldr	r1, [r2, #0]
 800553e:	1855      	adds	r5, r2, r1
 8005540:	42a5      	cmp	r5, r4
 8005542:	d10b      	bne.n	800555c <_free_r+0x70>
 8005544:	6824      	ldr	r4, [r4, #0]
 8005546:	4421      	add	r1, r4
 8005548:	1854      	adds	r4, r2, r1
 800554a:	42a3      	cmp	r3, r4
 800554c:	6011      	str	r1, [r2, #0]
 800554e:	d1e0      	bne.n	8005512 <_free_r+0x26>
 8005550:	681c      	ldr	r4, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	4421      	add	r1, r4
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	e7da      	b.n	8005512 <_free_r+0x26>
 800555c:	d902      	bls.n	8005564 <_free_r+0x78>
 800555e:	230c      	movs	r3, #12
 8005560:	6003      	str	r3, [r0, #0]
 8005562:	e7d6      	b.n	8005512 <_free_r+0x26>
 8005564:	6825      	ldr	r5, [r4, #0]
 8005566:	1961      	adds	r1, r4, r5
 8005568:	428b      	cmp	r3, r1
 800556a:	bf04      	itt	eq
 800556c:	6819      	ldreq	r1, [r3, #0]
 800556e:	685b      	ldreq	r3, [r3, #4]
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	bf04      	itt	eq
 8005574:	1949      	addeq	r1, r1, r5
 8005576:	6021      	streq	r1, [r4, #0]
 8005578:	6054      	str	r4, [r2, #4]
 800557a:	e7ca      	b.n	8005512 <_free_r+0x26>
 800557c:	b003      	add	sp, #12
 800557e:	bd30      	pop	{r4, r5, pc}
 8005580:	200132c4 	.word	0x200132c4

08005584 <sbrk_aligned>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	4e0e      	ldr	r6, [pc, #56]	; (80055c0 <sbrk_aligned+0x3c>)
 8005588:	460c      	mov	r4, r1
 800558a:	6831      	ldr	r1, [r6, #0]
 800558c:	4605      	mov	r5, r0
 800558e:	b911      	cbnz	r1, 8005596 <sbrk_aligned+0x12>
 8005590:	f000 f88c 	bl	80056ac <_sbrk_r>
 8005594:	6030      	str	r0, [r6, #0]
 8005596:	4621      	mov	r1, r4
 8005598:	4628      	mov	r0, r5
 800559a:	f000 f887 	bl	80056ac <_sbrk_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	d00a      	beq.n	80055b8 <sbrk_aligned+0x34>
 80055a2:	1cc4      	adds	r4, r0, #3
 80055a4:	f024 0403 	bic.w	r4, r4, #3
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d007      	beq.n	80055bc <sbrk_aligned+0x38>
 80055ac:	1a21      	subs	r1, r4, r0
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 f87c 	bl	80056ac <_sbrk_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d101      	bne.n	80055bc <sbrk_aligned+0x38>
 80055b8:	f04f 34ff 	mov.w	r4, #4294967295
 80055bc:	4620      	mov	r0, r4
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	200132c8 	.word	0x200132c8

080055c4 <_malloc_r>:
 80055c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c8:	1ccd      	adds	r5, r1, #3
 80055ca:	f025 0503 	bic.w	r5, r5, #3
 80055ce:	3508      	adds	r5, #8
 80055d0:	2d0c      	cmp	r5, #12
 80055d2:	bf38      	it	cc
 80055d4:	250c      	movcc	r5, #12
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	4607      	mov	r7, r0
 80055da:	db01      	blt.n	80055e0 <_malloc_r+0x1c>
 80055dc:	42a9      	cmp	r1, r5
 80055de:	d905      	bls.n	80055ec <_malloc_r+0x28>
 80055e0:	230c      	movs	r3, #12
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	2600      	movs	r6, #0
 80055e6:	4630      	mov	r0, r6
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	4e2e      	ldr	r6, [pc, #184]	; (80056a8 <_malloc_r+0xe4>)
 80055ee:	f000 f907 	bl	8005800 <__malloc_lock>
 80055f2:	6833      	ldr	r3, [r6, #0]
 80055f4:	461c      	mov	r4, r3
 80055f6:	bb34      	cbnz	r4, 8005646 <_malloc_r+0x82>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4638      	mov	r0, r7
 80055fc:	f7ff ffc2 	bl	8005584 <sbrk_aligned>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	4604      	mov	r4, r0
 8005604:	d14d      	bne.n	80056a2 <_malloc_r+0xde>
 8005606:	6834      	ldr	r4, [r6, #0]
 8005608:	4626      	mov	r6, r4
 800560a:	2e00      	cmp	r6, #0
 800560c:	d140      	bne.n	8005690 <_malloc_r+0xcc>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	4631      	mov	r1, r6
 8005612:	4638      	mov	r0, r7
 8005614:	eb04 0803 	add.w	r8, r4, r3
 8005618:	f000 f848 	bl	80056ac <_sbrk_r>
 800561c:	4580      	cmp	r8, r0
 800561e:	d13a      	bne.n	8005696 <_malloc_r+0xd2>
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	3503      	adds	r5, #3
 8005624:	1a6d      	subs	r5, r5, r1
 8005626:	f025 0503 	bic.w	r5, r5, #3
 800562a:	3508      	adds	r5, #8
 800562c:	2d0c      	cmp	r5, #12
 800562e:	bf38      	it	cc
 8005630:	250c      	movcc	r5, #12
 8005632:	4629      	mov	r1, r5
 8005634:	4638      	mov	r0, r7
 8005636:	f7ff ffa5 	bl	8005584 <sbrk_aligned>
 800563a:	3001      	adds	r0, #1
 800563c:	d02b      	beq.n	8005696 <_malloc_r+0xd2>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	442b      	add	r3, r5
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	e00e      	b.n	8005664 <_malloc_r+0xa0>
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	1b52      	subs	r2, r2, r5
 800564a:	d41e      	bmi.n	800568a <_malloc_r+0xc6>
 800564c:	2a0b      	cmp	r2, #11
 800564e:	d916      	bls.n	800567e <_malloc_r+0xba>
 8005650:	1961      	adds	r1, r4, r5
 8005652:	42a3      	cmp	r3, r4
 8005654:	6025      	str	r5, [r4, #0]
 8005656:	bf18      	it	ne
 8005658:	6059      	strne	r1, [r3, #4]
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	bf08      	it	eq
 800565e:	6031      	streq	r1, [r6, #0]
 8005660:	5162      	str	r2, [r4, r5]
 8005662:	604b      	str	r3, [r1, #4]
 8005664:	4638      	mov	r0, r7
 8005666:	f104 060b 	add.w	r6, r4, #11
 800566a:	f000 f8cf 	bl	800580c <__malloc_unlock>
 800566e:	f026 0607 	bic.w	r6, r6, #7
 8005672:	1d23      	adds	r3, r4, #4
 8005674:	1af2      	subs	r2, r6, r3
 8005676:	d0b6      	beq.n	80055e6 <_malloc_r+0x22>
 8005678:	1b9b      	subs	r3, r3, r6
 800567a:	50a3      	str	r3, [r4, r2]
 800567c:	e7b3      	b.n	80055e6 <_malloc_r+0x22>
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	42a3      	cmp	r3, r4
 8005682:	bf0c      	ite	eq
 8005684:	6032      	streq	r2, [r6, #0]
 8005686:	605a      	strne	r2, [r3, #4]
 8005688:	e7ec      	b.n	8005664 <_malloc_r+0xa0>
 800568a:	4623      	mov	r3, r4
 800568c:	6864      	ldr	r4, [r4, #4]
 800568e:	e7b2      	b.n	80055f6 <_malloc_r+0x32>
 8005690:	4634      	mov	r4, r6
 8005692:	6876      	ldr	r6, [r6, #4]
 8005694:	e7b9      	b.n	800560a <_malloc_r+0x46>
 8005696:	230c      	movs	r3, #12
 8005698:	603b      	str	r3, [r7, #0]
 800569a:	4638      	mov	r0, r7
 800569c:	f000 f8b6 	bl	800580c <__malloc_unlock>
 80056a0:	e7a1      	b.n	80055e6 <_malloc_r+0x22>
 80056a2:	6025      	str	r5, [r4, #0]
 80056a4:	e7de      	b.n	8005664 <_malloc_r+0xa0>
 80056a6:	bf00      	nop
 80056a8:	200132c4 	.word	0x200132c4

080056ac <_sbrk_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4d06      	ldr	r5, [pc, #24]	; (80056c8 <_sbrk_r+0x1c>)
 80056b0:	2300      	movs	r3, #0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	602b      	str	r3, [r5, #0]
 80056b8:	f7fb fd16 	bl	80010e8 <_sbrk>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d102      	bne.n	80056c6 <_sbrk_r+0x1a>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	b103      	cbz	r3, 80056c6 <_sbrk_r+0x1a>
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	200132cc 	.word	0x200132cc

080056cc <__sread>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	460c      	mov	r4, r1
 80056d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d4:	f000 f8a0 	bl	8005818 <_read_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	bfab      	itete	ge
 80056dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056de:	89a3      	ldrhlt	r3, [r4, #12]
 80056e0:	181b      	addge	r3, r3, r0
 80056e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056e6:	bfac      	ite	ge
 80056e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ea:	81a3      	strhlt	r3, [r4, #12]
 80056ec:	bd10      	pop	{r4, pc}

080056ee <__swrite>:
 80056ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f2:	461f      	mov	r7, r3
 80056f4:	898b      	ldrh	r3, [r1, #12]
 80056f6:	05db      	lsls	r3, r3, #23
 80056f8:	4605      	mov	r5, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	4616      	mov	r6, r2
 80056fe:	d505      	bpl.n	800570c <__swrite+0x1e>
 8005700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005704:	2302      	movs	r3, #2
 8005706:	2200      	movs	r2, #0
 8005708:	f000 f868 	bl	80057dc <_lseek_r>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	4632      	mov	r2, r6
 800571a:	463b      	mov	r3, r7
 800571c:	4628      	mov	r0, r5
 800571e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005722:	f000 b817 	b.w	8005754 <_write_r>

08005726 <__sseek>:
 8005726:	b510      	push	{r4, lr}
 8005728:	460c      	mov	r4, r1
 800572a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572e:	f000 f855 	bl	80057dc <_lseek_r>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	bf15      	itete	ne
 8005738:	6560      	strne	r0, [r4, #84]	; 0x54
 800573a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800573e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005742:	81a3      	strheq	r3, [r4, #12]
 8005744:	bf18      	it	ne
 8005746:	81a3      	strhne	r3, [r4, #12]
 8005748:	bd10      	pop	{r4, pc}

0800574a <__sclose>:
 800574a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574e:	f000 b813 	b.w	8005778 <_close_r>
	...

08005754 <_write_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d07      	ldr	r5, [pc, #28]	; (8005774 <_write_r+0x20>)
 8005758:	4604      	mov	r4, r0
 800575a:	4608      	mov	r0, r1
 800575c:	4611      	mov	r1, r2
 800575e:	2200      	movs	r2, #0
 8005760:	602a      	str	r2, [r5, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	f7fb fc6f 	bl	8001046 <_write>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_write_r+0x1e>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_write_r+0x1e>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	200132cc 	.word	0x200132cc

08005778 <_close_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d06      	ldr	r5, [pc, #24]	; (8005794 <_close_r+0x1c>)
 800577c:	2300      	movs	r3, #0
 800577e:	4604      	mov	r4, r0
 8005780:	4608      	mov	r0, r1
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f7fb fc7b 	bl	800107e <_close>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_close_r+0x1a>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_close_r+0x1a>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	200132cc 	.word	0x200132cc

08005798 <_fstat_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d07      	ldr	r5, [pc, #28]	; (80057b8 <_fstat_r+0x20>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	f7fb fc76 	bl	8001096 <_fstat>
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	d102      	bne.n	80057b4 <_fstat_r+0x1c>
 80057ae:	682b      	ldr	r3, [r5, #0]
 80057b0:	b103      	cbz	r3, 80057b4 <_fstat_r+0x1c>
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	bd38      	pop	{r3, r4, r5, pc}
 80057b6:	bf00      	nop
 80057b8:	200132cc 	.word	0x200132cc

080057bc <_isatty_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d06      	ldr	r5, [pc, #24]	; (80057d8 <_isatty_r+0x1c>)
 80057c0:	2300      	movs	r3, #0
 80057c2:	4604      	mov	r4, r0
 80057c4:	4608      	mov	r0, r1
 80057c6:	602b      	str	r3, [r5, #0]
 80057c8:	f7fb fc75 	bl	80010b6 <_isatty>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_isatty_r+0x1a>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_isatty_r+0x1a>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	200132cc 	.word	0x200132cc

080057dc <_lseek_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d07      	ldr	r5, [pc, #28]	; (80057fc <_lseek_r+0x20>)
 80057e0:	4604      	mov	r4, r0
 80057e2:	4608      	mov	r0, r1
 80057e4:	4611      	mov	r1, r2
 80057e6:	2200      	movs	r2, #0
 80057e8:	602a      	str	r2, [r5, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f7fb fc6e 	bl	80010cc <_lseek>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_lseek_r+0x1e>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_lseek_r+0x1e>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	200132cc 	.word	0x200132cc

08005800 <__malloc_lock>:
 8005800:	4801      	ldr	r0, [pc, #4]	; (8005808 <__malloc_lock+0x8>)
 8005802:	f7ff be0b 	b.w	800541c <__retarget_lock_acquire_recursive>
 8005806:	bf00      	nop
 8005808:	200132c0 	.word	0x200132c0

0800580c <__malloc_unlock>:
 800580c:	4801      	ldr	r0, [pc, #4]	; (8005814 <__malloc_unlock+0x8>)
 800580e:	f7ff be06 	b.w	800541e <__retarget_lock_release_recursive>
 8005812:	bf00      	nop
 8005814:	200132c0 	.word	0x200132c0

08005818 <_read_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	; (8005838 <_read_r+0x20>)
 800581c:	4604      	mov	r4, r0
 800581e:	4608      	mov	r0, r1
 8005820:	4611      	mov	r1, r2
 8005822:	2200      	movs	r2, #0
 8005824:	602a      	str	r2, [r5, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f7fb fbf0 	bl	800100c <_read>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_read_r+0x1e>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_read_r+0x1e>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	200132cc 	.word	0x200132cc

0800583c <_init>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr

08005848 <_fini>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	bf00      	nop
 800584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584e:	bc08      	pop	{r3}
 8005850:	469e      	mov	lr, r3
 8005852:	4770      	bx	lr
